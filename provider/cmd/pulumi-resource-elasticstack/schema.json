{
    "name": "elasticstack",
    "description": "A Pulumi package for creating and managing elasticstack cloud resources.",
    "keywords": [
        "pulumi",
        "elasticstack",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`elasticstack` Terraform Provider](https://github.com/elastic/terraform-provider-elasticstack).",
    "repository": "https://github.com/pulumi/pulumi-elasticstack",
    "pluginDownloadURL": "github://api.github.com/Tonkean/pulumi-elasticstack",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing elasticstack cloud resources.",
            "packageName": "@tonkean/pulumi-elasticstack",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/elastic/terraform-provider-elasticstack)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-elasticstack` repo](https://github.com/pulumi/pulumi-elasticstack/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-elasticstack` repo](https://github.com/elastic/terraform-provider-elasticstack/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumi_elasticstack",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/elastic/terraform-provider-elasticstack)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-elasticstack` repo](https://github.com/pulumi/pulumi-elasticstack/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-elasticstack` repo](https://github.com/elastic/terraform-provider-elasticstack/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "elasticsearch": {
                "$ref": "#/types/elasticstack:config/elasticsearch:elasticsearch",
                "description": "Elasticsearch connection configuration block.\n"
            }
        }
    },
    "types": {
        "elasticstack:config/elasticsearch:elasticsearch": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "secret": true
                },
                "caData": {
                    "type": "string"
                },
                "caFile": {
                    "type": "string"
                },
                "certData": {
                    "type": "string"
                },
                "certFile": {
                    "type": "string"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean"
                },
                "keyData": {
                    "type": "string",
                    "secret": true
                },
                "keyFile": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "elasticstack:index/ClusterSettingsElasticsearchConnection:ClusterSettingsElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ClusterSettingsPersistent:ClusterSettingsPersistent": {
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ClusterSettingsPersistentSetting:ClusterSettingsPersistentSetting"
                    },
                    "description": "Defines the setting in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "settings"
            ]
        },
        "elasticstack:index/ClusterSettingsPersistentSetting:ClusterSettingsPersistentSetting": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ClusterSettingsTransient:ClusterSettingsTransient": {
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ClusterSettingsTransientSetting:ClusterSettingsTransientSetting"
                    },
                    "description": "Defines the setting in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "settings"
            ]
        },
        "elasticstack:index/ClusterSettingsTransientSetting:ClusterSettingsTransientSetting": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ComponentTemplateElasticsearchConnection:ComponentTemplateElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ComponentTemplateTemplate:ComponentTemplateTemplate": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ComponentTemplateTemplateAlias:ComponentTemplateTemplateAlias"
                    },
                    "description": "Alias to add.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "string",
                    "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ComponentTemplateTemplateAlias:ComponentTemplateTemplateAlias": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWriteIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the component template to create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routing": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/DataSecurityRoleApplication:DataSecurityRoleApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "application",
                "privileges",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSecurityRoleElasticsearchConnection:DataSecurityRoleElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/DataSecurityRoleIndex:DataSecurityRoleIndex": {
            "properties": {
                "allowRestrictedIndices": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldSecurities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/DataSecurityRoleIndexFieldSecurity:DataSecurityRoleIndexFieldSecurity"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowRestrictedIndices",
                "fieldSecurities",
                "names",
                "privileges",
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSecurityRoleIndexFieldSecurity:DataSecurityRoleIndexFieldSecurity": {
            "properties": {
                "excepts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "excepts",
                "grants"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSecurityRoleMappingElasticsearchConnection:DataSecurityRoleMappingElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/DataSecurityUserElasticsearchConnection:DataSecurityUserElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/DataSnapshotRepositoryAzure:DataSnapshotRepositoryAzure": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "container": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locationMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "basePath",
                "chunkSize",
                "client",
                "compress",
                "container",
                "locationMode",
                "maxRestoreBytesPerSec",
                "maxSnapshotBytesPerSec",
                "readonly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSnapshotRepositoryElasticsearchConnection:DataSnapshotRepositoryElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/DataSnapshotRepositoryF:DataSnapshotRepositoryF": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumberOfSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chunkSize",
                "compress",
                "location",
                "maxNumberOfSnapshots",
                "maxRestoreBytesPerSec",
                "maxSnapshotBytesPerSec",
                "readonly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSnapshotRepositoryGc:DataSnapshotRepositoryGc": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "basePath",
                "bucket",
                "chunkSize",
                "client",
                "compress",
                "maxRestoreBytesPerSec",
                "maxSnapshotBytesPerSec",
                "readonly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSnapshotRepositoryHdf:DataSnapshotRepositoryHdf": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadDefaults": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chunkSize",
                "compress",
                "loadDefaults",
                "maxRestoreBytesPerSec",
                "maxSnapshotBytesPerSec",
                "path",
                "readonly",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSnapshotRepositoryS3:DataSnapshotRepositoryS3": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bufferSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cannedAcl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverSideEncryption": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "basePath",
                "bucket",
                "bufferSize",
                "cannedAcl",
                "chunkSize",
                "client",
                "compress",
                "maxRestoreBytesPerSec",
                "maxSnapshotBytesPerSec",
                "readonly",
                "serverSideEncryption",
                "storageClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataSnapshotRepositoryUrl:DataSnapshotRepositoryUrl": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpSocketTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumberOfSnapshots": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL repository. Set only if the type of the fetched repo is `url`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chunkSize",
                "compress",
                "httpMaxRetries",
                "httpSocketTimeout",
                "maxNumberOfSnapshots",
                "maxRestoreBytesPerSec",
                "maxSnapshotBytesPerSec",
                "readonly",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "elasticstack:index/DataStreamElasticsearchConnection:DataStreamElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/DataStreamIndex:DataStreamIndex": {
            "properties": {
                "indexName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "indexName",
                        "indexUuid"
                    ]
                }
            }
        },
        "elasticstack:index/IndexAlias:IndexAlias": {
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "Query used to limit documents the alias can access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexRouting": {
                    "type": "string",
                    "description": "Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHidden": {
                    "type": "boolean",
                    "description": "If true, the alias is hidden.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWriteIndex": {
                    "type": "boolean",
                    "description": "If true, the index is the write index for the alias.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Index alias name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routing": {
                    "type": "string",
                    "description": "Value used to route indexing and search operations to a specific shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchRouting": {
                    "type": "string",
                    "description": "Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/IndexElasticsearchConnection:IndexElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleCold:IndexLifecycleCold": {
            "properties": {
                "allocate": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdAllocate:IndexLifecycleColdAllocate",
                    "description": "Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "freeze": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdFreeze:IndexLifecycleColdFreeze",
                    "description": "Freeze the index to minimize its memory footprint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migrate": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdMigrate:IndexLifecycleColdMigrate",
                    "description": "Moves the index to the data tier that corresponds to the current phase by updating the \"index.routing.allocation.include.*tier*preference\" index setting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdReadonly:IndexLifecycleColdReadonly",
                    "description": "Makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchableSnapshot": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdSearchableSnapshot:IndexLifecycleColdSearchableSnapshot",
                    "description": "Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setPriority": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdSetPriority:IndexLifecycleColdSetPriority",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unfollow": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleColdUnfollow:IndexLifecycleColdUnfollow",
                    "description": "Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/IndexLifecycleColdAllocate:IndexLifecycleColdAllocate": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "include": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfReplicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalShardsPerNode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleColdFreeze:IndexLifecycleColdFreeze": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleColdMigrate:IndexLifecycleColdMigrate": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleColdReadonly:IndexLifecycleColdReadonly": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleColdSearchableSnapshot:IndexLifecycleColdSearchableSnapshot": {
            "properties": {
                "forceMergeIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotRepository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "snapshotRepository"
            ]
        },
        "elasticstack:index/IndexLifecycleColdSetPriority:IndexLifecycleColdSetPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ]
        },
        "elasticstack:index/IndexLifecycleColdUnfollow:IndexLifecycleColdUnfollow": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleDelete:IndexLifecycleDelete": {
            "properties": {
                "delete": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleDeleteDelete:IndexLifecycleDeleteDelete",
                    "description": "Permanently removes the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitForSnapshot": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleDeleteWaitForSnapshot:IndexLifecycleDeleteWaitForSnapshot",
                    "description": "Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/IndexLifecycleDeleteDelete:IndexLifecycleDeleteDelete": {
            "properties": {
                "deleteSearchableSnapshot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleDeleteWaitForSnapshot:IndexLifecycleDeleteWaitForSnapshot": {
            "properties": {
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "policy"
            ]
        },
        "elasticstack:index/IndexLifecycleElasticsearchConnection:IndexLifecycleElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleFrozen:IndexLifecycleFrozen": {
            "properties": {
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchableSnapshot": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleFrozenSearchableSnapshot:IndexLifecycleFrozenSearchableSnapshot",
                    "description": "Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/IndexLifecycleFrozenSearchableSnapshot:IndexLifecycleFrozenSearchableSnapshot": {
            "properties": {
                "forceMergeIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotRepository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "snapshotRepository"
            ]
        },
        "elasticstack:index/IndexLifecycleHot:IndexLifecycleHot": {
            "properties": {
                "forcemerge": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotForcemerge:IndexLifecycleHotForcemerge",
                    "description": "Force merges the index into the specified maximum number of segments. This action makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotReadonly:IndexLifecycleHotReadonly",
                    "description": "Makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollover": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotRollover:IndexLifecycleHotRollover",
                    "description": "Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchableSnapshot": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotSearchableSnapshot:IndexLifecycleHotSearchableSnapshot",
                    "description": "Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setPriority": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotSetPriority:IndexLifecycleHotSetPriority",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shrink": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotShrink:IndexLifecycleHotShrink",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unfollow": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHotUnfollow:IndexLifecycleHotUnfollow",
                    "description": "Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/IndexLifecycleHotForcemerge:IndexLifecycleHotForcemerge": {
            "properties": {
                "indexCodec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumSegments": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxNumSegments"
            ]
        },
        "elasticstack:index/IndexLifecycleHotReadonly:IndexLifecycleHotReadonly": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleHotRollover:IndexLifecycleHotRollover": {
            "properties": {
                "maxAge": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxDocs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPrimaryShardSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleHotSearchableSnapshot:IndexLifecycleHotSearchableSnapshot": {
            "properties": {
                "forceMergeIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotRepository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "snapshotRepository"
            ]
        },
        "elasticstack:index/IndexLifecycleHotSetPriority:IndexLifecycleHotSetPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ]
        },
        "elasticstack:index/IndexLifecycleHotShrink:IndexLifecycleHotShrink": {
            "properties": {
                "maxPrimaryShardSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfShards": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleHotUnfollow:IndexLifecycleHotUnfollow": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleWarm:IndexLifecycleWarm": {
            "properties": {
                "allocate": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmAllocate:IndexLifecycleWarmAllocate",
                    "description": "Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forcemerge": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmForcemerge:IndexLifecycleWarmForcemerge",
                    "description": "Force merges the index into the specified maximum number of segments. This action makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migrate": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmMigrate:IndexLifecycleWarmMigrate",
                    "description": "Moves the index to the data tier that corresponds to the current phase by updating the \"index.routing.allocation.include.*tier*preference\" index setting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmReadonly:IndexLifecycleWarmReadonly",
                    "description": "Makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setPriority": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmSetPriority:IndexLifecycleWarmSetPriority",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shrink": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmShrink:IndexLifecycleWarmShrink",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unfollow": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarmUnfollow:IndexLifecycleWarmUnfollow",
                    "description": "Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/IndexLifecycleWarmAllocate:IndexLifecycleWarmAllocate": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "include": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfReplicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalShardsPerNode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleWarmForcemerge:IndexLifecycleWarmForcemerge": {
            "properties": {
                "indexCodec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumSegments": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxNumSegments"
            ]
        },
        "elasticstack:index/IndexLifecycleWarmMigrate:IndexLifecycleWarmMigrate": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleWarmReadonly:IndexLifecycleWarmReadonly": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleWarmSetPriority:IndexLifecycleWarmSetPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ]
        },
        "elasticstack:index/IndexLifecycleWarmShrink:IndexLifecycleWarmShrink": {
            "properties": {
                "maxPrimaryShardSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfShards": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexLifecycleWarmUnfollow:IndexLifecycleWarmUnfollow": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexSettings:IndexSettings": {
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/IndexSettingsSetting:IndexSettingsSetting"
                    },
                    "description": "Defines the setting for the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "settings"
            ]
        },
        "elasticstack:index/IndexSettingsSetting:IndexSettingsSetting": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the index you wish to create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "elasticstack:index/IndexTemplateDataStream:IndexTemplateDataStream": {
            "properties": {
                "allowCustomRouting": {
                    "type": "boolean",
                    "description": "If `true`, the data stream supports custom routing. Defaults to `false`. Available only in **8.x**\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "description": "If true, the data stream is hidden.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexTemplateElasticsearchConnection:IndexTemplateElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexTemplateTemplate:IndexTemplateTemplate": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/IndexTemplateTemplateAlias:IndexTemplateTemplateAlias"
                    },
                    "description": "Alias to add.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "string",
                    "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/IndexTemplateTemplateAlias:IndexTemplateTemplateAlias": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWriteIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index template to create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routing": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/IngestPipelineElasticsearchConnection:IngestPipelineElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/LogstashPipelineElasticsearchConnection:LogstashPipelineElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ProviderElasticsearch:ProviderElasticsearch": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ScriptElasticsearchConnection:ScriptElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SecurityApiKeyElasticsearchConnection:SecurityApiKeyElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SecurityRoleApplication:SecurityRoleApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "description": "The name of the application to which this entry applies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings, where each element is the name of an application privilege or action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list resources to which the privileges are applied.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "application",
                "privileges",
                "resources"
            ]
        },
        "elasticstack:index/SecurityRoleElasticsearchConnection:SecurityRoleElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SecurityRoleIndex:SecurityRoleIndex": {
            "properties": {
                "allowRestrictedIndices": {
                    "type": "boolean",
                    "description": "Include matching restricted indices in names parameter. Usage is strongly discouraged as it can grant unrestricted operations on critical data, make the entire system unstable or leak sensitive information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldSecurity": {
                    "$ref": "#/types/elasticstack:index/SecurityRoleIndexFieldSecurity:SecurityRoleIndexFieldSecurity",
                    "description": "The document fields that the owners of the role have read access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of indices (or index name patterns) to which the permissions in this entry apply.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The index level privileges that the owners of the role have on the specified indices.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "A search query that defines the documents the owners of the role have read access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "names",
                "privileges"
            ]
        },
        "elasticstack:index/SecurityRoleIndexFieldSecurity:SecurityRoleIndexFieldSecurity": {
            "properties": {
                "excepts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SecurityRoleMappingElasticsearchConnection:SecurityRoleMappingElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SecuritySystemUserElasticsearchConnection:SecuritySystemUserElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SecurityUserElasticsearchConnection:SecurityUserElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SnapshotLifecycleElasticsearchConnection:SnapshotLifecycleElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SnapshotRepositoryAzure:SnapshotRepositoryAzure": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "Specifies the path within the container to the repository data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "Azure named client to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "container": {
                    "type": "string",
                    "description": "Container name. You must create the Azure container before creating the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locationMode": {
                    "type": "string",
                    "description": "Location mode. `primary_only` or `secondary_only`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "container"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basePath",
                        "container"
                    ]
                }
            }
        },
        "elasticstack:index/SnapshotRepositoryElasticsearchConnection:SnapshotRepositoryElasticsearchConnection": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key to use for authentication to Elasticsearch\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certData": {
                    "type": "string",
                    "description": "PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded certificate for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to a file containing the PEM encoded private key for client auth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/SnapshotRepositoryFs:SnapshotRepositoryFs": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Location of the shared filesystem used to store and retrieve snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumberOfSnapshots": {
                    "type": "integer",
                    "description": "Maximum number of snapshots the repository can contain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "location"
            ]
        },
        "elasticstack:index/SnapshotRepositoryGcs:SnapshotRepositoryGcs": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket to be used for snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "The name of the client to use to connect to Google Cloud Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basePath",
                        "bucket"
                    ]
                }
            }
        },
        "elasticstack:index/SnapshotRepositoryHdfs:SnapshotRepositoryHdfs": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadDefaults": {
                    "type": "boolean",
                    "description": "Whether to load the default Hadoop configuration or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The file path within the filesystem where data is stored/loaded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The uri address for hdfs. ex: \"hdfs://\\n\\n:\\n\\n/\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "uri"
            ]
        },
        "elasticstack:index/SnapshotRepositoryS3:SnapshotRepositoryS3": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "Specifies the path to the repository data within its bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucket": {
                    "type": "string",
                    "description": "Name of the S3 bucket to use for snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bufferSize": {
                    "type": "string",
                    "description": "Minimum threshold below which the chunk is uploaded using a single request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cannedAcl": {
                    "type": "string",
                    "description": "The S3 repository supports all S3 canned ACLs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "The name of the S3 client to use to connect to S3.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverSideEncryption": {
                    "type": "boolean",
                    "description": "When true, files are encrypted server-side using AES-256 algorithm.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "description": "Sets the S3 storage class for objects stored in the snapshot repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basePath",
                        "bucket",
                        "bufferSize"
                    ]
                }
            }
        },
        "elasticstack:index/SnapshotRepositoryUrl:SnapshotRepositoryUrl": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxRetries": {
                    "type": "integer",
                    "description": "Maximum number of retries for http and https URLs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpSocketTimeout": {
                    "type": "string",
                    "description": "Maximum wait time for data transfers over a connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumberOfSnapshots": {
                    "type": "integer",
                    "description": "Maximum number of snapshots the repository can contain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL location of the root of the shared filesystem repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the elasticstack package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "elasticsearch": {
                "$ref": "#/types/elasticstack:index/ProviderElasticsearch:ProviderElasticsearch",
                "description": "Elasticsearch connection configuration block.\n"
            }
        },
        "inputProperties": {
            "elasticsearch": {
                "$ref": "#/types/elasticstack:index/ProviderElasticsearch:ProviderElasticsearch",
                "description": "Elasticsearch connection configuration block.\n"
            }
        }
    },
    "resources": {
        "elasticstack:index/clusterSettings:ClusterSettings": {
            "description": "Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ClusterSettings;\nimport com.pulumi.elasticstack.ClusterSettingsArgs;\nimport com.pulumi.elasticstack.inputs.ClusterSettingsPersistentArgs;\nimport com.pulumi.elasticstack.inputs.ClusterSettingsTransientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myClusterSettings = new ClusterSettings(\"myClusterSettings\", ClusterSettingsArgs.builder()        \n            .persistent(ClusterSettingsPersistentArgs.builder()\n                .settings(                \n                    ClusterSettingsPersistentSettingArgs.builder()\n                        .name(\"indices.lifecycle.poll_interval\")\n                        .value(\"10m\")\n                        .build(),\n                    ClusterSettingsPersistentSettingArgs.builder()\n                        .name(\"indices.recovery.max_bytes_per_sec\")\n                        .value(\"50mb\")\n                        .build(),\n                    ClusterSettingsPersistentSettingArgs.builder()\n                        .name(\"indices.breaker.total.limit\")\n                        .value(\"65%\")\n                        .build(),\n                    ClusterSettingsPersistentSettingArgs.builder()\n                        .name(\"xpack.security.audit.logfile.events.include\")\n                        .valueList(                        \n                            \"ACCESS_DENIED\",\n                            \"ACCESS_GRANTED\")\n                        .build())\n                .build())\n            .transient_(ClusterSettingsTransientArgs.builder()\n                .settings(ClusterSettingsTransientSettingArgs.builder()\n                    .name(\"indices.breaker.total.limit\")\n                    .value(\"60%\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myClusterSettings:\n    type: elasticstack:ClusterSettings\n    properties:\n      persistent:\n        settings:\n          - name: indices.lifecycle.poll_interval\n            value: 10m\n          - name: indices.recovery.max_bytes_per_sec\n            value: 50mb\n          - name: indices.breaker.total.limit\n            value: 65%\n          - name: xpack.security.audit.logfile.events.include\n            valueList:\n              - ACCESS_DENIED\n              - ACCESS_GRANTED\n      transient:\n        settings:\n          - name: indices.breaker.total.limit\n            value: 60%\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ClusterSettingsElasticsearchConnection:ClusterSettingsElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "persistent": {
                    "$ref": "#/types/elasticstack:index/ClusterSettingsPersistent:ClusterSettingsPersistent",
                    "description": "Settings will apply across restarts.\n"
                },
                "transient": {
                    "$ref": "#/types/elasticstack:index/ClusterSettingsTransient:ClusterSettingsTransient",
                    "description": "Settings do not survive a full cluster restart.\n"
                }
            },
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ClusterSettingsElasticsearchConnection:ClusterSettingsElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "persistent": {
                    "$ref": "#/types/elasticstack:index/ClusterSettingsPersistent:ClusterSettingsPersistent",
                    "description": "Settings will apply across restarts.\n"
                },
                "transient": {
                    "$ref": "#/types/elasticstack:index/ClusterSettingsTransient:ClusterSettingsTransient",
                    "description": "Settings do not survive a full cluster restart.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterSettings resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ClusterSettingsElasticsearchConnection:ClusterSettingsElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "persistent": {
                        "$ref": "#/types/elasticstack:index/ClusterSettingsPersistent:ClusterSettingsPersistent",
                        "description": "Settings will apply across restarts.\n"
                    },
                    "transient": {
                        "$ref": "#/types/elasticstack:index/ClusterSettingsTransient:ClusterSettingsTransient",
                        "description": "Settings do not survive a full cluster restart.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/componentTemplate:ComponentTemplate": {
            "description": "Creates or updates a component template. Component templates are building blocks for constructing index templates that specify index mappings, settings, and aliases. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst myTemplateComponentTemplate = new elasticstack.ComponentTemplate(\"myTemplateComponentTemplate\", {template: {\n    aliases: [{\n        name: \"my_template_test\",\n    }],\n    settings: JSON.stringify({\n        number_of_shards: \"3\",\n    }),\n}});\nconst myTemplateIndexTemplate = new elasticstack.IndexTemplate(\"myTemplateIndexTemplate\", {\n    indexPatterns: [\"stream*\"],\n    composedOfs: [myTemplateComponentTemplate.name],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_template_component_template = elasticstack.ComponentTemplate(\"myTemplateComponentTemplate\", template=elasticstack.ComponentTemplateTemplateArgs(\n    aliases=[elasticstack.ComponentTemplateTemplateAliasArgs(\n        name=\"my_template_test\",\n    )],\n    settings=json.dumps({\n        \"number_of_shards\": \"3\",\n    }),\n))\nmy_template_index_template = elasticstack.IndexTemplate(\"myTemplateIndexTemplate\",\n    index_patterns=[\"stream*\"],\n    composed_ofs=[my_template_component_template.name])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTemplateComponentTemplate = new Elasticstack.ComponentTemplate(\"myTemplateComponentTemplate\", new()\n    {\n        Template = new Elasticstack.Inputs.ComponentTemplateTemplateArgs\n        {\n            Aliases = new[]\n            {\n                new Elasticstack.Inputs.ComponentTemplateTemplateAliasArgs\n                {\n                    Name = \"my_template_test\",\n                },\n            },\n            Settings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"number_of_shards\"] = \"3\",\n            }),\n        },\n    });\n\n    var myTemplateIndexTemplate = new Elasticstack.IndexTemplate(\"myTemplateIndexTemplate\", new()\n    {\n        IndexPatterns = new[]\n        {\n            \"stream*\",\n        },\n        ComposedOfs = new[]\n        {\n            myTemplateComponentTemplate.Name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"number_of_shards\": \"3\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyTemplateComponentTemplate, err := elasticstack.NewComponentTemplate(ctx, \"myTemplateComponentTemplate\", \u0026elasticstack.ComponentTemplateArgs{\n\t\t\tTemplate: \u0026elasticstack.ComponentTemplateTemplateArgs{\n\t\t\t\tAliases: elasticstack.ComponentTemplateTemplateAliasArray{\n\t\t\t\t\t\u0026elasticstack.ComponentTemplateTemplateAliasArgs{\n\t\t\t\t\t\tName: pulumi.String(\"my_template_test\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSettings: pulumi.String(json0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIndexTemplate(ctx, \"myTemplateIndexTemplate\", \u0026elasticstack.IndexTemplateArgs{\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"stream*\"),\n\t\t\t},\n\t\t\tComposedOfs: pulumi.StringArray{\n\t\t\t\tmyTemplateComponentTemplate.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ComponentTemplate;\nimport com.pulumi.elasticstack.ComponentTemplateArgs;\nimport com.pulumi.elasticstack.inputs.ComponentTemplateTemplateArgs;\nimport com.pulumi.elasticstack.IndexTemplate;\nimport com.pulumi.elasticstack.IndexTemplateArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTemplateComponentTemplate = new ComponentTemplate(\"myTemplateComponentTemplate\", ComponentTemplateArgs.builder()        \n            .template(ComponentTemplateTemplateArgs.builder()\n                .aliases(ComponentTemplateTemplateAliasArgs.builder()\n                    .name(\"my_template_test\")\n                    .build())\n                .settings(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"number_of_shards\", \"3\")\n                    )))\n                .build())\n            .build());\n\n        var myTemplateIndexTemplate = new IndexTemplate(\"myTemplateIndexTemplate\", IndexTemplateArgs.builder()        \n            .indexPatterns(\"stream*\")\n            .composedOfs(myTemplateComponentTemplate.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTemplateComponentTemplate:\n    type: elasticstack:ComponentTemplate\n    properties:\n      template:\n        aliases:\n          - name: my_template_test\n        settings:\n          fn::toJSON:\n            number_of_shards: '3'\n  myTemplateIndexTemplate:\n    type: elasticstack:IndexTemplate\n    properties:\n      indexPatterns:\n        - stream*\n      composedOfs:\n        - ${myTemplateComponentTemplate.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/componentTemplate:ComponentTemplate my_template \u003ccluster_uuid\u003e/\u003ccomponent_name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ComponentTemplateElasticsearchConnection:ComponentTemplateElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the component template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the component template to create.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/ComponentTemplateTemplate:ComponentTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage component templates externally.\n"
                }
            },
            "required": [
                "name",
                "template"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ComponentTemplateElasticsearchConnection:ComponentTemplateElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the component template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the component template to create.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/ComponentTemplateTemplate:ComponentTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage component templates externally.\n"
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComponentTemplate resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ComponentTemplateElasticsearchConnection:ComponentTemplateElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the component template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the component template to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "template": {
                        "$ref": "#/types/elasticstack:index/ComponentTemplateTemplate:ComponentTemplateTemplate",
                        "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number used to manage component templates externally.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/dataStream:DataStream": {
            "description": "Manages data streams. This resource can create, delete and show the information about the created data stream. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/data-stream-apis.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\n// Create an ILM policy for our data stream\nconst myIlm = new elasticstack.IndexLifecycle(\"myIlm\", {\n    hot: {\n        minAge: \"1h\",\n        setPriority: {\n            priority: 10,\n        },\n        rollover: {\n            maxAge: \"1d\",\n        },\n        readonly: {},\n    },\n    \"delete\": {\n        minAge: \"2d\",\n        \"delete\": {},\n    },\n});\n// First we must have a index template created\nconst myDataStreamTemplate = new elasticstack.IndexTemplate(\"myDataStreamTemplate\", {\n    indexPatterns: [\"my-stream*\"],\n    template: {\n        settings: myIlm.name.apply(name =\u003e JSON.stringify({\n            \"lifecycle.name\": name,\n        })),\n    },\n    dataStream: {},\n});\n// and now we can create data stream based on the index template\nconst myDataStream = new elasticstack.DataStream(\"myDataStream\", {}, {\n    dependsOn: [myDataStreamTemplate],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\n# Create an ILM policy for our data stream\nmy_ilm = elasticstack.IndexLifecycle(\"myIlm\",\n    hot=elasticstack.IndexLifecycleHotArgs(\n        min_age=\"1h\",\n        set_priority=elasticstack.IndexLifecycleHotSetPriorityArgs(\n            priority=10,\n        ),\n        rollover=elasticstack.IndexLifecycleHotRolloverArgs(\n            max_age=\"1d\",\n        ),\n        readonly=elasticstack.IndexLifecycleHotReadonlyArgs(),\n    ),\n    delete=elasticstack.IndexLifecycleDeleteArgs(\n        min_age=\"2d\",\n        delete=elasticstack.IndexLifecycleDeleteDeleteArgs(),\n    ))\n# First we must have a index template created\nmy_data_stream_template = elasticstack.IndexTemplate(\"myDataStreamTemplate\",\n    index_patterns=[\"my-stream*\"],\n    template=elasticstack.IndexTemplateTemplateArgs(\n        settings=my_ilm.name.apply(lambda name: json.dumps({\n            \"lifecycle.name\": name,\n        })),\n    ),\n    data_stream=elasticstack.IndexTemplateDataStreamArgs())\n# and now we can create data stream based on the index template\nmy_data_stream = elasticstack.DataStream(\"myDataStream\", opts=pulumi.ResourceOptions(depends_on=[my_data_stream_template]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an ILM policy for our data stream\n    var myIlm = new Elasticstack.IndexLifecycle(\"myIlm\", new()\n    {\n        Hot = new Elasticstack.Inputs.IndexLifecycleHotArgs\n        {\n            MinAge = \"1h\",\n            SetPriority = new Elasticstack.Inputs.IndexLifecycleHotSetPriorityArgs\n            {\n                Priority = 10,\n            },\n            Rollover = new Elasticstack.Inputs.IndexLifecycleHotRolloverArgs\n            {\n                MaxAge = \"1d\",\n            },\n            Readonly = null,\n        },\n        Delete = new Elasticstack.Inputs.IndexLifecycleDeleteArgs\n        {\n            MinAge = \"2d\",\n            Delete = null,\n        },\n    });\n\n    // First we must have a index template created\n    var myDataStreamTemplate = new Elasticstack.IndexTemplate(\"myDataStreamTemplate\", new()\n    {\n        IndexPatterns = new[]\n        {\n            \"my-stream*\",\n        },\n        Template = new Elasticstack.Inputs.IndexTemplateTemplateArgs\n        {\n            Settings = myIlm.Name.Apply(name =\u003e JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"lifecycle.name\"] = name,\n            })),\n        },\n        DataStream = null,\n    });\n\n    // and now we can create data stream based on the index template\n    var myDataStream = new Elasticstack.DataStream(\"myDataStream\", new()\n    {\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            myDataStreamTemplate,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyIlm, err := elasticstack.NewIndexLifecycle(ctx, \"myIlm\", \u0026elasticstack.IndexLifecycleArgs{\n\t\t\tHot: \u0026elasticstack.IndexLifecycleHotArgs{\n\t\t\t\tMinAge: pulumi.String(\"1h\"),\n\t\t\t\tSetPriority: \u0026elasticstack.IndexLifecycleHotSetPriorityArgs{\n\t\t\t\t\tPriority: pulumi.Int(10),\n\t\t\t\t},\n\t\t\t\tRollover: \u0026elasticstack.IndexLifecycleHotRolloverArgs{\n\t\t\t\t\tMaxAge: pulumi.String(\"1d\"),\n\t\t\t\t},\n\t\t\t\tReadonly: nil,\n\t\t\t},\n\t\t\tDelete: \u0026elasticstack.IndexLifecycleDeleteArgs{\n\t\t\t\tMinAge: pulumi.String(\"2d\"),\n\t\t\t\tDelete: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyDataStreamTemplate, err := elasticstack.NewIndexTemplate(ctx, \"myDataStreamTemplate\", \u0026elasticstack.IndexTemplateArgs{\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-stream*\"),\n\t\t\t},\n\t\t\tTemplate: \u0026elasticstack.IndexTemplateTemplateArgs{\n\t\t\t\tSettings: myIlm.Name.ApplyT(func(name string) (pulumi.String, error) {\n\t\t\t\t\tvar _zero pulumi.String\n\t\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\t\"lifecycle.name\": name,\n\t\t\t\t\t})\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t}\n\t\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\t\treturn pulumi.String(json0), nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tDataStream: nil,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewDataStream(ctx, \"myDataStream\", nil, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmyDataStreamTemplate,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.IndexLifecycle;\nimport com.pulumi.elasticstack.IndexLifecycleArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotSetPriorityArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotRolloverArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotReadonlyArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleDeleteArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleDeleteDeleteArgs;\nimport com.pulumi.elasticstack.IndexTemplate;\nimport com.pulumi.elasticstack.IndexTemplateArgs;\nimport com.pulumi.elasticstack.inputs.IndexTemplateTemplateArgs;\nimport com.pulumi.elasticstack.inputs.IndexTemplateDataStreamArgs;\nimport com.pulumi.elasticstack.DataStream;\nimport com.pulumi.elasticstack.DataStreamArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myIlm = new IndexLifecycle(\"myIlm\", IndexLifecycleArgs.builder()        \n            .hot(IndexLifecycleHotArgs.builder()\n                .minAge(\"1h\")\n                .setPriority(IndexLifecycleHotSetPriorityArgs.builder()\n                    .priority(10)\n                    .build())\n                .rollover(IndexLifecycleHotRolloverArgs.builder()\n                    .maxAge(\"1d\")\n                    .build())\n                .readonly()\n                .build())\n            .delete(IndexLifecycleDeleteArgs.builder()\n                .minAge(\"2d\")\n                .delete()\n                .build())\n            .build());\n\n        var myDataStreamTemplate = new IndexTemplate(\"myDataStreamTemplate\", IndexTemplateArgs.builder()        \n            .indexPatterns(\"my-stream*\")\n            .template(IndexTemplateTemplateArgs.builder()\n                .settings(myIlm.name().applyValue(name -\u003e serializeJson(\n                    jsonObject(\n                        jsonProperty(\"lifecycle.name\", name)\n                    ))))\n                .build())\n            .dataStream()\n            .build());\n\n        var myDataStream = new DataStream(\"myDataStream\", DataStreamArgs.Empty, CustomResourceOptions.builder()\n            .dependsOn(myDataStreamTemplate)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create an ILM policy for our data stream\n  myIlm:\n    type: elasticstack:IndexLifecycle\n    properties:\n      hot:\n        minAge: 1h\n        setPriority:\n          priority: 10\n        rollover:\n          maxAge: 1d\n        readonly: {}\n      delete:\n        minAge: 2d\n        delete: {}\n  # First we must have a index template created\n  myDataStreamTemplate:\n    type: elasticstack:IndexTemplate\n    properties:\n      indexPatterns:\n        - my-stream*\n      template:\n        settings:\n          fn::toJSON:\n            lifecycle.name: ${myIlm.name}\n      dataStream: {}\n  # and now we can create data stream based on the index template\n  myDataStream:\n    type: elasticstack:DataStream\n    options:\n      dependson:\n        - ${myDataStreamTemplate}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/dataStream:DataStream my_data_stream \u003ccluster_uuid\u003e/\u003cdata_stream_name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/DataStreamElasticsearchConnection:DataStreamElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "Current generation for the data stream.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "If `true`, the data stream is hidden.\n"
                },
                "ilmPolicy": {
                    "type": "string",
                    "description": "Name of the current ILM lifecycle policy in the stream’s matching index template.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/DataStreamIndex:DataStreamIndex"
                    },
                    "description": "Array of objects containing information about the data stream’s backing indices. The last item in this array contains information about the stream’s current write index.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Custom metadata for the stream, copied from the _meta object of the stream’s matching index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the data stream to create.\n"
                },
                "replicated": {
                    "type": "boolean",
                    "description": "If `true`, the data stream is created and managed by cross-cluster replication and the local cluster can not write into this data stream or change its mappings.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Health status of the data stream.\n"
                },
                "system": {
                    "type": "boolean",
                    "description": "If `true`, the data stream is created and managed by an Elastic stack component and cannot be modified through normal user interaction.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Name of the index template used to create the data stream’s backing indices.\n"
                },
                "timestampField": {
                    "type": "string",
                    "description": "Contains information about the data stream’s @timestamp field.\n"
                }
            },
            "required": [
                "generation",
                "hidden",
                "ilmPolicy",
                "indices",
                "metadata",
                "name",
                "replicated",
                "status",
                "system",
                "template",
                "timestampField"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/DataStreamElasticsearchConnection:DataStreamElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the data stream to create.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataStream resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataStreamElasticsearchConnection:DataStreamElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "generation": {
                        "type": "integer",
                        "description": "Current generation for the data stream.\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "If `true`, the data stream is hidden.\n"
                    },
                    "ilmPolicy": {
                        "type": "string",
                        "description": "Name of the current ILM lifecycle policy in the stream’s matching index template.\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataStreamIndex:DataStreamIndex"
                        },
                        "description": "Array of objects containing information about the data stream’s backing indices. The last item in this array contains information about the stream’s current write index.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Custom metadata for the stream, copied from the _meta object of the stream’s matching index template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the data stream to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicated": {
                        "type": "boolean",
                        "description": "If `true`, the data stream is created and managed by cross-cluster replication and the local cluster can not write into this data stream or change its mappings.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Health status of the data stream.\n"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "If `true`, the data stream is created and managed by an Elastic stack component and cannot be modified through normal user interaction.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "Name of the index template used to create the data stream’s backing indices.\n"
                    },
                    "timestampField": {
                        "type": "string",
                        "description": "Contains information about the data stream’s @timestamp field.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/index:Index": {
            "description": "Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.Index;\nimport com.pulumi.elasticstack.IndexArgs;\nimport com.pulumi.elasticstack.inputs.IndexAliasArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myIndex = new Index(\"myIndex\", IndexArgs.builder()        \n            .aliases(            \n                IndexAliasArgs.builder()\n                    .name(\"my_alias_1\")\n                    .build(),\n                IndexAliasArgs.builder()\n                    .name(\"my_alias_2\")\n                    .filter(serializeJson(\n                        jsonObject(\n                            jsonProperty(\"term\", jsonObject(\n                                jsonProperty(\"user.id\", \"developer\")\n                            ))\n                        )))\n                    .build())\n            .mappings(serializeJson(\n                jsonObject(\n                    jsonProperty(\"properties\", jsonObject(\n                        jsonProperty(\"field1\", jsonObject(\n                            jsonProperty(\"type\", \"keyword\")\n                        )),\n                        jsonProperty(\"field2\", jsonObject(\n                            jsonProperty(\"type\", \"text\")\n                        )),\n                        jsonProperty(\"field3\", jsonObject(\n                            jsonProperty(\"properties\", jsonObject(\n                                jsonProperty(\"inner_field1\", jsonObject(\n                                    jsonProperty(\"type\", \"text\"),\n                                    jsonProperty(\"index\", false)\n                                )),\n                                jsonProperty(\"inner_field2\", jsonObject(\n                                    jsonProperty(\"type\", \"integer\"),\n                                    jsonProperty(\"index\", false)\n                                ))\n                            ))\n                        ))\n                    ))\n                )))\n            .numberOfShards(1)\n            .numberOfReplicas(2)\n            .searchIdleAfter(\"20s\")\n            .totalShardsPerNode(200)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIndex:\n    type: elasticstack:Index\n    properties:\n      aliases:\n        - name: my_alias_1\n        - name: my_alias_2\n          filter:\n            fn::toJSON:\n              term:\n                user.id: developer\n      mappings:\n        fn::toJSON:\n          properties:\n            field1:\n              type: keyword\n            field2:\n              type: text\n            field3:\n              properties:\n                inner_field1:\n                  type: text\n                  index: false\n                inner_field2:\n                  type: integer\n                  index: false\n      numberOfShards: 1\n      numberOfReplicas: 2\n      searchIdleAfter: 20s\n      totalShardsPerNode: 200\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too You can later adjust the index configuration to account for those imported settings\n\n```sh\n $ pulumi import elasticstack:index/index:Index my_index \u003ccluster_uuid\u003e/\u003cindex_name\u003e\n```\n\n ",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/IndexAlias:IndexAlias"
                    },
                    "description": "Aliases for the index.\n"
                },
                "analysisAnalyzer": {
                    "type": "string",
                    "description": "A JSON string describing the analyzers applied to the index.\n"
                },
                "analysisCharFilter": {
                    "type": "string",
                    "description": "A JSON string describing the char_filters applied to the index.\n"
                },
                "analysisFilter": {
                    "type": "string",
                    "description": "A JSON string describing the filters applied to the index.\n"
                },
                "analysisNormalizer": {
                    "type": "string",
                    "description": "A JSON string describing the normalizers applied to the index.\n"
                },
                "analysisTokenizer": {
                    "type": "string",
                    "description": "A JSON string describing the tokenizers applied to the index.\n"
                },
                "analyzeMaxTokenCount": {
                    "type": "integer",
                    "description": "The maximum number of tokens that can be produced using _analyze API.\n"
                },
                "autoExpandReplicas": {
                    "type": "string",
                    "description": "Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)\n"
                },
                "blocksMetadata": {
                    "type": "boolean",
                    "description": "Set to `true` to disable index metadata reads and writes.\n"
                },
                "blocksRead": {
                    "type": "boolean",
                    "description": "Set to `true` to disable read operations against the index.\n"
                },
                "blocksReadOnly": {
                    "type": "boolean",
                    "description": "Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.\n"
                },
                "blocksReadOnlyAllowDelete": {
                    "type": "boolean",
                    "description": "Identical to `index.blocks.read_only` but allows deleting the index to free up resources.\n"
                },
                "blocksWrite": {
                    "type": "boolean",
                    "description": "Set to `true` to disable data write operations against the index. This setting does not affect metadata.\n"
                },
                "codec": {
                    "type": "string",
                    "description": "The `default` value compresses stored data with LZ4 compression, but this can be set to `best_compression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.\n"
                },
                "defaultPipeline": {
                    "type": "string",
                    "description": "The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IndexElasticsearchConnection:IndexElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "finalPipeline": {
                    "type": "string",
                    "description": "Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.\n"
                },
                "gcDeletes": {
                    "type": "string",
                    "description": "The length of time that a deleted document's version number remains available for further versioned operations.\n"
                },
                "highlightMaxAnalyzedOffset": {
                    "type": "integer",
                    "description": "The maximum number of characters that will be analyzed for a highlight request.\n"
                },
                "indexingSlowlogLevel": {
                    "type": "string",
                    "description": "Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`\n"
                },
                "indexingSlowlogSource": {
                    "type": "string",
                    "description": "Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.\n"
                },
                "indexingSlowlogThresholdIndexDebug": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`\n"
                },
                "indexingSlowlogThresholdIndexInfo": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`\n"
                },
                "indexingSlowlogThresholdIndexTrace": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`\n"
                },
                "indexingSlowlogThresholdIndexWarn": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`\n"
                },
                "loadFixedBitsetFiltersEagerly": {
                    "type": "boolean",
                    "description": "Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.\n"
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\nIf specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).\n**NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.\n"
                },
                "maxDocvalueFieldsSearch": {
                    "type": "integer",
                    "description": "The maximum number of `docvalue_fields` that are allowed in a query.\n"
                },
                "maxInnerResultWindow": {
                    "type": "integer",
                    "description": "The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.\n"
                },
                "maxNgramDiff": {
                    "type": "integer",
                    "description": "The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.\n"
                },
                "maxRefreshListeners": {
                    "type": "integer",
                    "description": "Maximum number of refresh listeners available on each shard of the index.\n"
                },
                "maxRegexLength": {
                    "type": "integer",
                    "description": "The maximum length of regex that can be used in Regexp Query.\n"
                },
                "maxRescoreWindow": {
                    "type": "integer",
                    "description": "The maximum value of `window_size` for `rescore` requests in searches of this index.\n"
                },
                "maxResultWindow": {
                    "type": "integer",
                    "description": "The maximum value of `from + size` for searches to this index.\n"
                },
                "maxScriptFields": {
                    "type": "integer",
                    "description": "The maximum number of `script_fields` that are allowed in a query.\n"
                },
                "maxShingleDiff": {
                    "type": "integer",
                    "description": "The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.\n"
                },
                "maxTermsCount": {
                    "type": "integer",
                    "description": "The maximum number of terms that can be used in Terms Query.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index you wish to create.\n"
                },
                "numberOfReplicas": {
                    "type": "integer",
                    "description": "Number of shard replicas.\n"
                },
                "numberOfRoutingShards": {
                    "type": "integer",
                    "description": "Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.\n"
                },
                "numberOfShards": {
                    "type": "integer",
                    "description": "Number of shards for the index. This can be set only on creation.\n"
                },
                "queryDefaultFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.\n"
                },
                "routingAllocationEnable": {
                    "type": "string",
                    "description": "Controls shard allocation for this index. It can be set to: `all` , `primaries` , `new_primaries` , `none`.\n"
                },
                "routingPartitionSize": {
                    "type": "integer",
                    "description": "The number of shards a custom routing value can go to. This can be set only on creation.\n"
                },
                "routingRebalanceEnable": {
                    "type": "string",
                    "description": "Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.\n"
                },
                "searchIdleAfter": {
                    "type": "string",
                    "description": "How long a shard can not receive a search or get request until it’s considered search idle.\n"
                },
                "searchSlowlogLevel": {
                    "type": "string",
                    "description": "Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`\n"
                },
                "searchSlowlogThresholdFetchDebug": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`\n"
                },
                "searchSlowlogThresholdFetchInfo": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`\n"
                },
                "searchSlowlogThresholdFetchTrace": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`\n"
                },
                "searchSlowlogThresholdFetchWarn": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`\n"
                },
                "searchSlowlogThresholdQueryDebug": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`\n"
                },
                "searchSlowlogThresholdQueryInfo": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`\n"
                },
                "searchSlowlogThresholdQueryTrace": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`\n"
                },
                "searchSlowlogThresholdQueryWarn": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`\n"
                },
                "settings": {
                    "$ref": "#/types/elasticstack:index/IndexSettings:IndexSettings",
                    "description": "DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.\n**NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error\n",
                    "deprecationMessage": "Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead."
                },
                "settingsRaw": {
                    "type": "string",
                    "description": "All raw settings fetched from the cluster.\n"
                },
                "shardCheckOnStartup": {
                    "type": "string",
                    "description": "Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.\n"
                },
                "sortFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The field to sort shards in this index by.\n"
                },
                "sortOrders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The direction to sort shards in. Accepts `asc`, `desc`.\n"
                },
                "unassignedNodeLeftDelayedTimeout": {
                    "type": "string",
                    "description": "Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`\n"
                }
            },
            "required": [
                "name",
                "numberOfReplicas",
                "settingsRaw"
            ],
            "inputProperties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/IndexAlias:IndexAlias"
                    },
                    "description": "Aliases for the index.\n"
                },
                "analysisAnalyzer": {
                    "type": "string",
                    "description": "A JSON string describing the analyzers applied to the index.\n"
                },
                "analysisCharFilter": {
                    "type": "string",
                    "description": "A JSON string describing the char_filters applied to the index.\n"
                },
                "analysisFilter": {
                    "type": "string",
                    "description": "A JSON string describing the filters applied to the index.\n"
                },
                "analysisNormalizer": {
                    "type": "string",
                    "description": "A JSON string describing the normalizers applied to the index.\n"
                },
                "analysisTokenizer": {
                    "type": "string",
                    "description": "A JSON string describing the tokenizers applied to the index.\n"
                },
                "analyzeMaxTokenCount": {
                    "type": "integer",
                    "description": "The maximum number of tokens that can be produced using _analyze API.\n"
                },
                "autoExpandReplicas": {
                    "type": "string",
                    "description": "Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)\n"
                },
                "blocksMetadata": {
                    "type": "boolean",
                    "description": "Set to `true` to disable index metadata reads and writes.\n"
                },
                "blocksRead": {
                    "type": "boolean",
                    "description": "Set to `true` to disable read operations against the index.\n"
                },
                "blocksReadOnly": {
                    "type": "boolean",
                    "description": "Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.\n"
                },
                "blocksReadOnlyAllowDelete": {
                    "type": "boolean",
                    "description": "Identical to `index.blocks.read_only` but allows deleting the index to free up resources.\n"
                },
                "blocksWrite": {
                    "type": "boolean",
                    "description": "Set to `true` to disable data write operations against the index. This setting does not affect metadata.\n"
                },
                "codec": {
                    "type": "string",
                    "description": "The `default` value compresses stored data with LZ4 compression, but this can be set to `best_compression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.\n",
                    "willReplaceOnChanges": true
                },
                "defaultPipeline": {
                    "type": "string",
                    "description": "The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IndexElasticsearchConnection:IndexElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "finalPipeline": {
                    "type": "string",
                    "description": "Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.\n"
                },
                "gcDeletes": {
                    "type": "string",
                    "description": "The length of time that a deleted document's version number remains available for further versioned operations.\n"
                },
                "highlightMaxAnalyzedOffset": {
                    "type": "integer",
                    "description": "The maximum number of characters that will be analyzed for a highlight request.\n"
                },
                "indexingSlowlogLevel": {
                    "type": "string",
                    "description": "Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`\n"
                },
                "indexingSlowlogSource": {
                    "type": "string",
                    "description": "Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.\n"
                },
                "indexingSlowlogThresholdIndexDebug": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`\n"
                },
                "indexingSlowlogThresholdIndexInfo": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`\n"
                },
                "indexingSlowlogThresholdIndexTrace": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`\n"
                },
                "indexingSlowlogThresholdIndexWarn": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`\n"
                },
                "loadFixedBitsetFiltersEagerly": {
                    "type": "boolean",
                    "description": "Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.\n",
                    "willReplaceOnChanges": true
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\nIf specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).\n**NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.\n"
                },
                "maxDocvalueFieldsSearch": {
                    "type": "integer",
                    "description": "The maximum number of `docvalue_fields` that are allowed in a query.\n"
                },
                "maxInnerResultWindow": {
                    "type": "integer",
                    "description": "The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.\n"
                },
                "maxNgramDiff": {
                    "type": "integer",
                    "description": "The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.\n"
                },
                "maxRefreshListeners": {
                    "type": "integer",
                    "description": "Maximum number of refresh listeners available on each shard of the index.\n"
                },
                "maxRegexLength": {
                    "type": "integer",
                    "description": "The maximum length of regex that can be used in Regexp Query.\n"
                },
                "maxRescoreWindow": {
                    "type": "integer",
                    "description": "The maximum value of `window_size` for `rescore` requests in searches of this index.\n"
                },
                "maxResultWindow": {
                    "type": "integer",
                    "description": "The maximum value of `from + size` for searches to this index.\n"
                },
                "maxScriptFields": {
                    "type": "integer",
                    "description": "The maximum number of `script_fields` that are allowed in a query.\n"
                },
                "maxShingleDiff": {
                    "type": "integer",
                    "description": "The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.\n"
                },
                "maxTermsCount": {
                    "type": "integer",
                    "description": "The maximum number of terms that can be used in Terms Query.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index you wish to create.\n",
                    "willReplaceOnChanges": true
                },
                "numberOfReplicas": {
                    "type": "integer",
                    "description": "Number of shard replicas.\n"
                },
                "numberOfRoutingShards": {
                    "type": "integer",
                    "description": "Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.\n",
                    "willReplaceOnChanges": true
                },
                "numberOfShards": {
                    "type": "integer",
                    "description": "Number of shards for the index. This can be set only on creation.\n",
                    "willReplaceOnChanges": true
                },
                "queryDefaultFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.\n"
                },
                "refreshInterval": {
                    "type": "string",
                    "description": "How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.\n"
                },
                "routingAllocationEnable": {
                    "type": "string",
                    "description": "Controls shard allocation for this index. It can be set to: `all` , `primaries` , `new_primaries` , `none`.\n"
                },
                "routingPartitionSize": {
                    "type": "integer",
                    "description": "The number of shards a custom routing value can go to. This can be set only on creation.\n",
                    "willReplaceOnChanges": true
                },
                "routingRebalanceEnable": {
                    "type": "string",
                    "description": "Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.\n"
                },
                "searchIdleAfter": {
                    "type": "string",
                    "description": "How long a shard can not receive a search or get request until it’s considered search idle.\n"
                },
                "searchSlowlogLevel": {
                    "type": "string",
                    "description": "Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`\n"
                },
                "searchSlowlogThresholdFetchDebug": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`\n"
                },
                "searchSlowlogThresholdFetchInfo": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`\n"
                },
                "searchSlowlogThresholdFetchTrace": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`\n"
                },
                "searchSlowlogThresholdFetchWarn": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`\n"
                },
                "searchSlowlogThresholdQueryDebug": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`\n"
                },
                "searchSlowlogThresholdQueryInfo": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`\n"
                },
                "searchSlowlogThresholdQueryTrace": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`\n"
                },
                "searchSlowlogThresholdQueryWarn": {
                    "type": "string",
                    "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`\n"
                },
                "settings": {
                    "$ref": "#/types/elasticstack:index/IndexSettings:IndexSettings",
                    "description": "DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.\n**NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error\n",
                    "deprecationMessage": "Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead."
                },
                "shardCheckOnStartup": {
                    "type": "string",
                    "description": "Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.\n",
                    "willReplaceOnChanges": true
                },
                "sortFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The field to sort shards in this index by.\n",
                    "willReplaceOnChanges": true
                },
                "sortOrders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The direction to sort shards in. Accepts `asc`, `desc`.\n",
                    "willReplaceOnChanges": true
                },
                "unassignedNodeLeftDelayedTimeout": {
                    "type": "string",
                    "description": "Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Index resources.\n",
                "properties": {
                    "aliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/IndexAlias:IndexAlias"
                        },
                        "description": "Aliases for the index.\n"
                    },
                    "analysisAnalyzer": {
                        "type": "string",
                        "description": "A JSON string describing the analyzers applied to the index.\n"
                    },
                    "analysisCharFilter": {
                        "type": "string",
                        "description": "A JSON string describing the char_filters applied to the index.\n"
                    },
                    "analysisFilter": {
                        "type": "string",
                        "description": "A JSON string describing the filters applied to the index.\n"
                    },
                    "analysisNormalizer": {
                        "type": "string",
                        "description": "A JSON string describing the normalizers applied to the index.\n"
                    },
                    "analysisTokenizer": {
                        "type": "string",
                        "description": "A JSON string describing the tokenizers applied to the index.\n"
                    },
                    "analyzeMaxTokenCount": {
                        "type": "integer",
                        "description": "The maximum number of tokens that can be produced using _analyze API.\n"
                    },
                    "autoExpandReplicas": {
                        "type": "string",
                        "description": "Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)\n"
                    },
                    "blocksMetadata": {
                        "type": "boolean",
                        "description": "Set to `true` to disable index metadata reads and writes.\n"
                    },
                    "blocksRead": {
                        "type": "boolean",
                        "description": "Set to `true` to disable read operations against the index.\n"
                    },
                    "blocksReadOnly": {
                        "type": "boolean",
                        "description": "Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.\n"
                    },
                    "blocksReadOnlyAllowDelete": {
                        "type": "boolean",
                        "description": "Identical to `index.blocks.read_only` but allows deleting the index to free up resources.\n"
                    },
                    "blocksWrite": {
                        "type": "boolean",
                        "description": "Set to `true` to disable data write operations against the index. This setting does not affect metadata.\n"
                    },
                    "codec": {
                        "type": "string",
                        "description": "The `default` value compresses stored data with LZ4 compression, but this can be set to `best_compression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultPipeline": {
                        "type": "string",
                        "description": "The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/IndexElasticsearchConnection:IndexElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "finalPipeline": {
                        "type": "string",
                        "description": "Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.\n"
                    },
                    "gcDeletes": {
                        "type": "string",
                        "description": "The length of time that a deleted document's version number remains available for further versioned operations.\n"
                    },
                    "highlightMaxAnalyzedOffset": {
                        "type": "integer",
                        "description": "The maximum number of characters that will be analyzed for a highlight request.\n"
                    },
                    "indexingSlowlogLevel": {
                        "type": "string",
                        "description": "Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`\n"
                    },
                    "indexingSlowlogSource": {
                        "type": "string",
                        "description": "Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.\n"
                    },
                    "indexingSlowlogThresholdIndexDebug": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`\n"
                    },
                    "indexingSlowlogThresholdIndexInfo": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`\n"
                    },
                    "indexingSlowlogThresholdIndexTrace": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`\n"
                    },
                    "indexingSlowlogThresholdIndexWarn": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`\n"
                    },
                    "loadFixedBitsetFiltersEagerly": {
                        "type": "boolean",
                        "description": "Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "mappings": {
                        "type": "string",
                        "description": "Mapping for fields in the index.\nIf specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).\n**NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.\n"
                    },
                    "maxDocvalueFieldsSearch": {
                        "type": "integer",
                        "description": "The maximum number of `docvalue_fields` that are allowed in a query.\n"
                    },
                    "maxInnerResultWindow": {
                        "type": "integer",
                        "description": "The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.\n"
                    },
                    "maxNgramDiff": {
                        "type": "integer",
                        "description": "The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.\n"
                    },
                    "maxRefreshListeners": {
                        "type": "integer",
                        "description": "Maximum number of refresh listeners available on each shard of the index.\n"
                    },
                    "maxRegexLength": {
                        "type": "integer",
                        "description": "The maximum length of regex that can be used in Regexp Query.\n"
                    },
                    "maxRescoreWindow": {
                        "type": "integer",
                        "description": "The maximum value of `window_size` for `rescore` requests in searches of this index.\n"
                    },
                    "maxResultWindow": {
                        "type": "integer",
                        "description": "The maximum value of `from + size` for searches to this index.\n"
                    },
                    "maxScriptFields": {
                        "type": "integer",
                        "description": "The maximum number of `script_fields` that are allowed in a query.\n"
                    },
                    "maxShingleDiff": {
                        "type": "integer",
                        "description": "The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.\n"
                    },
                    "maxTermsCount": {
                        "type": "integer",
                        "description": "The maximum number of terms that can be used in Terms Query.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the index you wish to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "numberOfReplicas": {
                        "type": "integer",
                        "description": "Number of shard replicas.\n"
                    },
                    "numberOfRoutingShards": {
                        "type": "integer",
                        "description": "Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "numberOfShards": {
                        "type": "integer",
                        "description": "Number of shards for the index. This can be set only on creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "queryDefaultFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.\n"
                    },
                    "refreshInterval": {
                        "type": "string",
                        "description": "How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.\n"
                    },
                    "routingAllocationEnable": {
                        "type": "string",
                        "description": "Controls shard allocation for this index. It can be set to: `all` , `primaries` , `new_primaries` , `none`.\n"
                    },
                    "routingPartitionSize": {
                        "type": "integer",
                        "description": "The number of shards a custom routing value can go to. This can be set only on creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "routingRebalanceEnable": {
                        "type": "string",
                        "description": "Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.\n"
                    },
                    "searchIdleAfter": {
                        "type": "string",
                        "description": "How long a shard can not receive a search or get request until it’s considered search idle.\n"
                    },
                    "searchSlowlogLevel": {
                        "type": "string",
                        "description": "Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`\n"
                    },
                    "searchSlowlogThresholdFetchDebug": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`\n"
                    },
                    "searchSlowlogThresholdFetchInfo": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`\n"
                    },
                    "searchSlowlogThresholdFetchTrace": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`\n"
                    },
                    "searchSlowlogThresholdFetchWarn": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`\n"
                    },
                    "searchSlowlogThresholdQueryDebug": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`\n"
                    },
                    "searchSlowlogThresholdQueryInfo": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`\n"
                    },
                    "searchSlowlogThresholdQueryTrace": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`\n"
                    },
                    "searchSlowlogThresholdQueryWarn": {
                        "type": "string",
                        "description": "Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`\n"
                    },
                    "settings": {
                        "$ref": "#/types/elasticstack:index/IndexSettings:IndexSettings",
                        "description": "DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.\n**NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error\n",
                        "deprecationMessage": "Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead."
                    },
                    "settingsRaw": {
                        "type": "string",
                        "description": "All raw settings fetched from the cluster.\n"
                    },
                    "shardCheckOnStartup": {
                        "type": "string",
                        "description": "Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sortFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The field to sort shards in this index by.\n",
                        "willReplaceOnChanges": true
                    },
                    "sortOrders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The direction to sort shards in. Accepts `asc`, `desc`.\n",
                        "willReplaceOnChanges": true
                    },
                    "unassignedNodeLeftDelayedTimeout": {
                        "type": "string",
                        "description": "Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/indexLifecycle:IndexLifecycle": {
            "description": "Creates or updates lifecycle policy. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-index-lifecycle.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst myIlm = new elasticstack.IndexLifecycle(\"myIlm\", {\n    hot: {\n        minAge: \"1h\",\n        setPriority: {\n            priority: 0,\n        },\n        rollover: {\n            maxAge: \"1d\",\n        },\n        readonly: {},\n    },\n    warm: {\n        minAge: \"0ms\",\n        setPriority: {\n            priority: 10,\n        },\n        readonly: {},\n        allocate: {\n            exclude: JSON.stringify({\n                box_type: \"hot\",\n            }),\n            numberOfReplicas: 1,\n            totalShardsPerNode: 200,\n        },\n    },\n    \"delete\": {\n        minAge: \"2d\",\n        \"delete\": {},\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_ilm = elasticstack.IndexLifecycle(\"myIlm\",\n    hot=elasticstack.IndexLifecycleHotArgs(\n        min_age=\"1h\",\n        set_priority=elasticstack.IndexLifecycleHotSetPriorityArgs(\n            priority=0,\n        ),\n        rollover=elasticstack.IndexLifecycleHotRolloverArgs(\n            max_age=\"1d\",\n        ),\n        readonly=elasticstack.IndexLifecycleHotReadonlyArgs(),\n    ),\n    warm=elasticstack.IndexLifecycleWarmArgs(\n        min_age=\"0ms\",\n        set_priority=elasticstack.IndexLifecycleWarmSetPriorityArgs(\n            priority=10,\n        ),\n        readonly=elasticstack.IndexLifecycleWarmReadonlyArgs(),\n        allocate=elasticstack.IndexLifecycleWarmAllocateArgs(\n            exclude=json.dumps({\n                \"box_type\": \"hot\",\n            }),\n            number_of_replicas=1,\n            total_shards_per_node=200,\n        ),\n    ),\n    delete=elasticstack.IndexLifecycleDeleteArgs(\n        min_age=\"2d\",\n        delete=elasticstack.IndexLifecycleDeleteDeleteArgs(),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myIlm = new Elasticstack.IndexLifecycle(\"myIlm\", new()\n    {\n        Hot = new Elasticstack.Inputs.IndexLifecycleHotArgs\n        {\n            MinAge = \"1h\",\n            SetPriority = new Elasticstack.Inputs.IndexLifecycleHotSetPriorityArgs\n            {\n                Priority = 0,\n            },\n            Rollover = new Elasticstack.Inputs.IndexLifecycleHotRolloverArgs\n            {\n                MaxAge = \"1d\",\n            },\n            Readonly = null,\n        },\n        Warm = new Elasticstack.Inputs.IndexLifecycleWarmArgs\n        {\n            MinAge = \"0ms\",\n            SetPriority = new Elasticstack.Inputs.IndexLifecycleWarmSetPriorityArgs\n            {\n                Priority = 10,\n            },\n            Readonly = null,\n            Allocate = new Elasticstack.Inputs.IndexLifecycleWarmAllocateArgs\n            {\n                Exclude = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"box_type\"] = \"hot\",\n                }),\n                NumberOfReplicas = 1,\n                TotalShardsPerNode = 200,\n            },\n        },\n        Delete = new Elasticstack.Inputs.IndexLifecycleDeleteArgs\n        {\n            MinAge = \"2d\",\n            Delete = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"box_type\": \"hot\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = elasticstack.NewIndexLifecycle(ctx, \"myIlm\", \u0026elasticstack.IndexLifecycleArgs{\n\t\t\tHot: \u0026elasticstack.IndexLifecycleHotArgs{\n\t\t\t\tMinAge: pulumi.String(\"1h\"),\n\t\t\t\tSetPriority: \u0026elasticstack.IndexLifecycleHotSetPriorityArgs{\n\t\t\t\t\tPriority: pulumi.Int(0),\n\t\t\t\t},\n\t\t\t\tRollover: \u0026elasticstack.IndexLifecycleHotRolloverArgs{\n\t\t\t\t\tMaxAge: pulumi.String(\"1d\"),\n\t\t\t\t},\n\t\t\t\tReadonly: nil,\n\t\t\t},\n\t\t\tWarm: \u0026elasticstack.IndexLifecycleWarmArgs{\n\t\t\t\tMinAge: pulumi.String(\"0ms\"),\n\t\t\t\tSetPriority: \u0026elasticstack.IndexLifecycleWarmSetPriorityArgs{\n\t\t\t\t\tPriority: pulumi.Int(10),\n\t\t\t\t},\n\t\t\t\tReadonly: nil,\n\t\t\t\tAllocate: \u0026elasticstack.IndexLifecycleWarmAllocateArgs{\n\t\t\t\t\tExclude:            pulumi.String(json0),\n\t\t\t\t\tNumberOfReplicas:   pulumi.Int(1),\n\t\t\t\t\tTotalShardsPerNode: pulumi.Int(200),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelete: \u0026elasticstack.IndexLifecycleDeleteArgs{\n\t\t\t\tMinAge: pulumi.String(\"2d\"),\n\t\t\t\tDelete: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.IndexLifecycle;\nimport com.pulumi.elasticstack.IndexLifecycleArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotSetPriorityArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotRolloverArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleHotReadonlyArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleWarmArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleWarmSetPriorityArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleWarmReadonlyArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleWarmAllocateArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleDeleteArgs;\nimport com.pulumi.elasticstack.inputs.IndexLifecycleDeleteDeleteArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myIlm = new IndexLifecycle(\"myIlm\", IndexLifecycleArgs.builder()        \n            .hot(IndexLifecycleHotArgs.builder()\n                .minAge(\"1h\")\n                .setPriority(IndexLifecycleHotSetPriorityArgs.builder()\n                    .priority(0)\n                    .build())\n                .rollover(IndexLifecycleHotRolloverArgs.builder()\n                    .maxAge(\"1d\")\n                    .build())\n                .readonly()\n                .build())\n            .warm(IndexLifecycleWarmArgs.builder()\n                .minAge(\"0ms\")\n                .setPriority(IndexLifecycleWarmSetPriorityArgs.builder()\n                    .priority(10)\n                    .build())\n                .readonly()\n                .allocate(IndexLifecycleWarmAllocateArgs.builder()\n                    .exclude(serializeJson(\n                        jsonObject(\n                            jsonProperty(\"box_type\", \"hot\")\n                        )))\n                    .numberOfReplicas(1)\n                    .totalShardsPerNode(200)\n                    .build())\n                .build())\n            .delete(IndexLifecycleDeleteArgs.builder()\n                .minAge(\"2d\")\n                .delete()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIlm:\n    type: elasticstack:IndexLifecycle\n    properties:\n      hot:\n        minAge: 1h\n        setPriority:\n          priority: 0\n        rollover:\n          maxAge: 1d\n        readonly: {}\n      warm:\n        minAge: 0ms\n        setPriority:\n          priority: 10\n        readonly: {}\n        allocate:\n          exclude:\n            fn::toJSON:\n              box_type: hot\n          numberOfReplicas: 1\n          totalShardsPerNode: 200\n      delete:\n        minAge: 2d\n        delete: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/indexLifecycle:IndexLifecycle my_ilm \u003ccluster_uuid\u003e/\u003cilm_name\u003e\n```\n\n ",
            "properties": {
                "cold": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleCold:IndexLifecycleCold",
                    "description": "The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.\n"
                },
                "delete": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleDelete:IndexLifecycleDelete",
                    "description": "The index is no longer needed and can safely be removed.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleElasticsearchConnection:IndexLifecycleElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "frozen": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleFrozen:IndexLifecycleFrozen",
                    "description": "The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.\n"
                },
                "hot": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHot:IndexLifecycleHot",
                    "description": "The index is actively being updated and queried.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the ilm policy. Must be valid JSON document.\n"
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "The DateTime of the last modification.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the policy.\n"
                },
                "warm": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarm:IndexLifecycleWarm",
                    "description": "The index is no longer being updated but is still being queried.\n"
                }
            },
            "required": [
                "modifiedDate",
                "name"
            ],
            "inputProperties": {
                "cold": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleCold:IndexLifecycleCold",
                    "description": "The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.\n"
                },
                "delete": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleDelete:IndexLifecycleDelete",
                    "description": "The index is no longer needed and can safely be removed.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleElasticsearchConnection:IndexLifecycleElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "frozen": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleFrozen:IndexLifecycleFrozen",
                    "description": "The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.\n"
                },
                "hot": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleHot:IndexLifecycleHot",
                    "description": "The index is actively being updated and queried.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the ilm policy. Must be valid JSON document.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the policy.\n",
                    "willReplaceOnChanges": true
                },
                "warm": {
                    "$ref": "#/types/elasticstack:index/IndexLifecycleWarm:IndexLifecycleWarm",
                    "description": "The index is no longer being updated but is still being queried.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexLifecycle resources.\n",
                "properties": {
                    "cold": {
                        "$ref": "#/types/elasticstack:index/IndexLifecycleCold:IndexLifecycleCold",
                        "description": "The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.\n"
                    },
                    "delete": {
                        "$ref": "#/types/elasticstack:index/IndexLifecycleDelete:IndexLifecycleDelete",
                        "description": "The index is no longer needed and can safely be removed.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/IndexLifecycleElasticsearchConnection:IndexLifecycleElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "frozen": {
                        "$ref": "#/types/elasticstack:index/IndexLifecycleFrozen:IndexLifecycleFrozen",
                        "description": "The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.\n"
                    },
                    "hot": {
                        "$ref": "#/types/elasticstack:index/IndexLifecycleHot:IndexLifecycleHot",
                        "description": "The index is actively being updated and queried.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the ilm policy. Must be valid JSON document.\n"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "description": "The DateTime of the last modification.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "warm": {
                        "$ref": "#/types/elasticstack:index/IndexLifecycleWarm:IndexLifecycleWarm",
                        "description": "The index is no longer being updated but is still being queried.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/indexTemplate:IndexTemplate": {
            "description": "Creates or updates an index template. Index templates define settings, mappings, and aliases that can be applied automatically to new indices. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst myTemplate = new elasticstack.IndexTemplate(\"myTemplate\", {\n    priority: 42,\n    indexPatterns: [\n        \"logstash*\",\n        \"filebeat*\",\n    ],\n    template: {\n        aliases: [\n            {\n                name: \"my_template_test\",\n            },\n            {\n                name: \"another_test\",\n            },\n        ],\n        settings: JSON.stringify({\n            number_of_shards: \"3\",\n        }),\n    },\n});\nconst myDataStream = new elasticstack.IndexTemplate(\"myDataStream\", {\n    indexPatterns: [\"stream*\"],\n    dataStream: {},\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_template = elasticstack.IndexTemplate(\"myTemplate\",\n    priority=42,\n    index_patterns=[\n        \"logstash*\",\n        \"filebeat*\",\n    ],\n    template=elasticstack.IndexTemplateTemplateArgs(\n        aliases=[\n            elasticstack.IndexTemplateTemplateAliasArgs(\n                name=\"my_template_test\",\n            ),\n            elasticstack.IndexTemplateTemplateAliasArgs(\n                name=\"another_test\",\n            ),\n        ],\n        settings=json.dumps({\n            \"number_of_shards\": \"3\",\n        }),\n    ))\nmy_data_stream = elasticstack.IndexTemplate(\"myDataStream\",\n    index_patterns=[\"stream*\"],\n    data_stream=elasticstack.IndexTemplateDataStreamArgs())\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTemplate = new Elasticstack.IndexTemplate(\"myTemplate\", new()\n    {\n        Priority = 42,\n        IndexPatterns = new[]\n        {\n            \"logstash*\",\n            \"filebeat*\",\n        },\n        Template = new Elasticstack.Inputs.IndexTemplateTemplateArgs\n        {\n            Aliases = new[]\n            {\n                new Elasticstack.Inputs.IndexTemplateTemplateAliasArgs\n                {\n                    Name = \"my_template_test\",\n                },\n                new Elasticstack.Inputs.IndexTemplateTemplateAliasArgs\n                {\n                    Name = \"another_test\",\n                },\n            },\n            Settings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"number_of_shards\"] = \"3\",\n            }),\n        },\n    });\n\n    var myDataStream = new Elasticstack.IndexTemplate(\"myDataStream\", new()\n    {\n        IndexPatterns = new[]\n        {\n            \"stream*\",\n        },\n        DataStream = null,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"number_of_shards\": \"3\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = elasticstack.NewIndexTemplate(ctx, \"myTemplate\", \u0026elasticstack.IndexTemplateArgs{\n\t\t\tPriority: pulumi.Int(42),\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"logstash*\"),\n\t\t\t\tpulumi.String(\"filebeat*\"),\n\t\t\t},\n\t\t\tTemplate: \u0026elasticstack.IndexTemplateTemplateArgs{\n\t\t\t\tAliases: elasticstack.IndexTemplateTemplateAliasArray{\n\t\t\t\t\t\u0026elasticstack.IndexTemplateTemplateAliasArgs{\n\t\t\t\t\t\tName: pulumi.String(\"my_template_test\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026elasticstack.IndexTemplateTemplateAliasArgs{\n\t\t\t\t\t\tName: pulumi.String(\"another_test\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSettings: pulumi.String(json0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIndexTemplate(ctx, \"myDataStream\", \u0026elasticstack.IndexTemplateArgs{\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"stream*\"),\n\t\t\t},\n\t\t\tDataStream: nil,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.IndexTemplate;\nimport com.pulumi.elasticstack.IndexTemplateArgs;\nimport com.pulumi.elasticstack.inputs.IndexTemplateTemplateArgs;\nimport com.pulumi.elasticstack.inputs.IndexTemplateDataStreamArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTemplate = new IndexTemplate(\"myTemplate\", IndexTemplateArgs.builder()        \n            .priority(42)\n            .indexPatterns(            \n                \"logstash*\",\n                \"filebeat*\")\n            .template(IndexTemplateTemplateArgs.builder()\n                .aliases(                \n                    IndexTemplateTemplateAliasArgs.builder()\n                        .name(\"my_template_test\")\n                        .build(),\n                    IndexTemplateTemplateAliasArgs.builder()\n                        .name(\"another_test\")\n                        .build())\n                .settings(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"number_of_shards\", \"3\")\n                    )))\n                .build())\n            .build());\n\n        var myDataStream = new IndexTemplate(\"myDataStream\", IndexTemplateArgs.builder()        \n            .indexPatterns(\"stream*\")\n            .dataStream()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTemplate:\n    type: elasticstack:IndexTemplate\n    properties:\n      priority: 42\n      indexPatterns:\n        - logstash*\n        - filebeat*\n      template:\n        aliases:\n          - name: my_template_test\n          - name: another_test\n        settings:\n          fn::toJSON:\n            number_of_shards: '3'\n  myDataStream:\n    type: elasticstack:IndexTemplate\n    properties:\n      indexPatterns:\n        - stream*\n      dataStream: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/indexTemplate:IndexTemplate my_template \u003ccluster_uuid\u003e/\u003ctemplate_name\u003e\n```\n\n ",
            "properties": {
                "composedOfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An ordered list of component template names.\n"
                },
                "dataStream": {
                    "$ref": "#/types/elasticstack:index/IndexTemplateDataStream:IndexTemplateDataStream",
                    "description": "If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IndexTemplateElasticsearchConnection:IndexTemplateElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of wildcard (*) expressions used to match the names of data streams and indices during creation.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index template to create.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority to determine index template precedence when a new data stream or index is created.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/IndexTemplateTemplate:IndexTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage index templates externally.\n"
                }
            },
            "required": [
                "composedOfs",
                "indexPatterns",
                "name"
            ],
            "inputProperties": {
                "composedOfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An ordered list of component template names.\n"
                },
                "dataStream": {
                    "$ref": "#/types/elasticstack:index/IndexTemplateDataStream:IndexTemplateDataStream",
                    "description": "If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IndexTemplateElasticsearchConnection:IndexTemplateElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of wildcard (*) expressions used to match the names of data streams and indices during creation.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index template to create.\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority to determine index template precedence when a new data stream or index is created.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/IndexTemplateTemplate:IndexTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage index templates externally.\n"
                }
            },
            "requiredInputs": [
                "indexPatterns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexTemplate resources.\n",
                "properties": {
                    "composedOfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An ordered list of component template names.\n"
                    },
                    "dataStream": {
                        "$ref": "#/types/elasticstack:index/IndexTemplateDataStream:IndexTemplateDataStream",
                        "description": "If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/IndexTemplateElasticsearchConnection:IndexTemplateElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "indexPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of wildcard (*) expressions used to match the names of data streams and indices during creation.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the index template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the index template to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority to determine index template precedence when a new data stream or index is created.\n"
                    },
                    "template": {
                        "$ref": "#/types/elasticstack:index/IndexTemplateTemplate:IndexTemplateTemplate",
                        "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number used to manage index templates externally.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/ingestPipeline:IngestPipeline": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/ingestPipeline:IngestPipeline my_ingest_pipeline \u003ccluster_uuid\u003e/\u003cingest pipeline name\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the ingest pipeline.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IngestPipelineElasticsearchConnection:IngestPipelineElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ingest pipeline.\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document\n"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.\n"
                }
            },
            "required": [
                "name",
                "processors"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the ingest pipeline.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/IngestPipelineElasticsearchConnection:IngestPipelineElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ingest pipeline.\n",
                    "willReplaceOnChanges": true
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document\n"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.\n"
                }
            },
            "requiredInputs": [
                "processors"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IngestPipeline resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the ingest pipeline.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/IngestPipelineElasticsearchConnection:IngestPipelineElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the index template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ingest pipeline.\n",
                        "willReplaceOnChanges": true
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document\n"
                    },
                    "processors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/logstashPipeline:LogstashPipeline": {
            "description": "Creates or updates centrally managed logstash pipelines. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-apis.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst example = new elasticstack.LogstashPipeline(\"example\", {\n    pipelineId: \"test_pipeline\",\n    description: \"This is an example pipeline\",\n    pipeline: `input{}\nfilter{}\noutput{}\n`,\n    pipelineMetadata: {\n        type: \"logstash_pipeline\",\n        version: \"1\",\n    },\n    pipelineBatchDelay: 50,\n    pipelineBatchSize: 125,\n    pipelineEcsCompatibility: \"disabled\",\n    pipelineOrdered: \"auto\",\n    pipelinePluginClassloaders: false,\n    pipelineUnsafeShutdown: false,\n    pipelineWorkers: 1,\n    queueCheckpointAcks: 1024,\n    queueCheckpointRetry: true,\n    queueCheckpointWrites: 1024,\n    queueDrain: false,\n    queueMaxBytesNumber: 1,\n    queueMaxBytesUnits: \"gb\",\n    queueMaxEvents: 0,\n    queuePageCapacity: \"64mb\",\n    queueType: \"persisted\",\n});\nexport const pipeline = example.pipelineId;\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nexample = elasticstack.LogstashPipeline(\"example\",\n    pipeline_id=\"test_pipeline\",\n    description=\"This is an example pipeline\",\n    pipeline=\"\"\"input{}\nfilter{}\noutput{}\n\"\"\",\n    pipeline_metadata={\n        \"type\": \"logstash_pipeline\",\n        \"version\": \"1\",\n    },\n    pipeline_batch_delay=50,\n    pipeline_batch_size=125,\n    pipeline_ecs_compatibility=\"disabled\",\n    pipeline_ordered=\"auto\",\n    pipeline_plugin_classloaders=False,\n    pipeline_unsafe_shutdown=False,\n    pipeline_workers=1,\n    queue_checkpoint_acks=1024,\n    queue_checkpoint_retry=True,\n    queue_checkpoint_writes=1024,\n    queue_drain=False,\n    queue_max_bytes_number=1,\n    queue_max_bytes_units=\"gb\",\n    queue_max_events=0,\n    queue_page_capacity=\"64mb\",\n    queue_type=\"persisted\")\npulumi.export(\"pipeline\", example.pipeline_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Elasticstack.LogstashPipeline(\"example\", new()\n    {\n        PipelineId = \"test_pipeline\",\n        Description = \"This is an example pipeline\",\n        Pipeline = @\"input{}\nfilter{}\noutput{}\n\",\n        PipelineMetadata = \n        {\n            { \"type\", \"logstash_pipeline\" },\n            { \"version\", \"1\" },\n        },\n        PipelineBatchDelay = 50,\n        PipelineBatchSize = 125,\n        PipelineEcsCompatibility = \"disabled\",\n        PipelineOrdered = \"auto\",\n        PipelinePluginClassloaders = false,\n        PipelineUnsafeShutdown = false,\n        PipelineWorkers = 1,\n        QueueCheckpointAcks = 1024,\n        QueueCheckpointRetry = true,\n        QueueCheckpointWrites = 1024,\n        QueueDrain = false,\n        QueueMaxBytesNumber = 1,\n        QueueMaxBytesUnits = \"gb\",\n        QueueMaxEvents = 0,\n        QueuePageCapacity = \"64mb\",\n        QueueType = \"persisted\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"pipeline\"] = example.PipelineId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := elasticstack.NewLogstashPipeline(ctx, \"example\", \u0026elasticstack.LogstashPipelineArgs{\n\t\t\tPipelineId:  pulumi.String(\"test_pipeline\"),\n\t\t\tDescription: pulumi.String(\"This is an example pipeline\"),\n\t\t\tPipeline:    pulumi.String(fmt.Sprintf(\"input{}\\nfilter{}\\noutput{}\\n\")),\n\t\t\tPipelineMetadata: pulumi.StringMap{\n\t\t\t\t\"type\":    pulumi.String(\"logstash_pipeline\"),\n\t\t\t\t\"version\": pulumi.String(\"1\"),\n\t\t\t},\n\t\t\tPipelineBatchDelay:         pulumi.Int(50),\n\t\t\tPipelineBatchSize:          pulumi.Int(125),\n\t\t\tPipelineEcsCompatibility:   pulumi.String(\"disabled\"),\n\t\t\tPipelineOrdered:            pulumi.String(\"auto\"),\n\t\t\tPipelinePluginClassloaders: pulumi.Bool(false),\n\t\t\tPipelineUnsafeShutdown:     pulumi.Bool(false),\n\t\t\tPipelineWorkers:            pulumi.Int(1),\n\t\t\tQueueCheckpointAcks:        pulumi.Int(1024),\n\t\t\tQueueCheckpointRetry:       pulumi.Bool(true),\n\t\t\tQueueCheckpointWrites:      pulumi.Int(1024),\n\t\t\tQueueDrain:                 pulumi.Bool(false),\n\t\t\tQueueMaxBytesNumber:        pulumi.Int(1),\n\t\t\tQueueMaxBytesUnits:         pulumi.String(\"gb\"),\n\t\t\tQueueMaxEvents:             pulumi.Int(0),\n\t\t\tQueuePageCapacity:          pulumi.String(\"64mb\"),\n\t\t\tQueueType:                  pulumi.String(\"persisted\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"pipeline\", example.PipelineId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.LogstashPipeline;\nimport com.pulumi.elasticstack.LogstashPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new LogstashPipeline(\"example\", LogstashPipelineArgs.builder()        \n            .pipelineId(\"test_pipeline\")\n            .description(\"This is an example pipeline\")\n            .pipeline(\"\"\"\ninput{}\nfilter{}\noutput{}\n            \"\"\")\n            .pipelineMetadata(Map.ofEntries(\n                Map.entry(\"type\", \"logstash_pipeline\"),\n                Map.entry(\"version\", 1)\n            ))\n            .pipelineBatchDelay(50)\n            .pipelineBatchSize(125)\n            .pipelineEcsCompatibility(\"disabled\")\n            .pipelineOrdered(\"auto\")\n            .pipelinePluginClassloaders(false)\n            .pipelineUnsafeShutdown(false)\n            .pipelineWorkers(1)\n            .queueCheckpointAcks(1024)\n            .queueCheckpointRetry(true)\n            .queueCheckpointWrites(1024)\n            .queueDrain(false)\n            .queueMaxBytesNumber(1)\n            .queueMaxBytesUnits(\"gb\")\n            .queueMaxEvents(0)\n            .queuePageCapacity(\"64mb\")\n            .queueType(\"persisted\")\n            .build());\n\n        ctx.export(\"pipeline\", example.pipelineId());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: elasticstack:LogstashPipeline\n    properties:\n      pipelineId: test_pipeline\n      description: This is an example pipeline\n      pipeline: |\n        input{}\n        filter{}\n        output{}\n      pipelineMetadata:\n        type: logstash_pipeline\n        version: 1\n      pipelineBatchDelay: 50\n      pipelineBatchSize: 125\n      pipelineEcsCompatibility: disabled\n      pipelineOrdered: auto\n      pipelinePluginClassloaders: false\n      pipelineUnsafeShutdown: false\n      pipelineWorkers: 1\n      queueCheckpointAcks: 1024\n      queueCheckpointRetry: true\n      queueCheckpointWrites: 1024\n      queueDrain: false\n      queueMaxBytesNumber: 1\n      queueMaxBytesUnits: gb\n      queueMaxEvents: 0\n      queuePageCapacity: 64mb\n      queueType: persisted\noutputs:\n  pipeline: ${example.pipelineId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/logstashPipeline:LogstashPipeline my_pipeline \u003ccluster_uuid\u003e/\u003cpipeline ID\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the pipeline.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/LogstashPipelineElasticsearchConnection:LogstashPipelineElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "lastModified": {
                    "type": "string",
                    "description": "Date the pipeline was last updated.\n"
                },
                "pipeline": {
                    "type": "string",
                    "description": "Configuration for the pipeline.\n"
                },
                "pipelineBatchDelay": {
                    "type": "integer",
                    "description": "Time in milliseconds to wait for each event before sending an undersized batch to pipeline workers.\n"
                },
                "pipelineBatchSize": {
                    "type": "integer",
                    "description": "The maximum number of events an individual worker thread collects before executing filters and outputs.\n"
                },
                "pipelineEcsCompatibility": {
                    "type": "string",
                    "description": "Sets the pipeline default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier for the pipeline.\n"
                },
                "pipelineMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Optional metadata about the pipeline.\n"
                },
                "pipelineOrdered": {
                    "type": "string",
                    "description": "Set the pipeline event ordering.\n"
                },
                "pipelinePluginClassloaders": {
                    "type": "boolean",
                    "description": "(Beta) Load Java plugins in independent classloaders to isolate their dependencies.\n"
                },
                "pipelineUnsafeShutdown": {
                    "type": "boolean",
                    "description": "Forces Logstash to exit during shutdown even if there are still inflight events in memory.\n"
                },
                "pipelineWorkers": {
                    "type": "integer",
                    "description": "The number of parallel workers used to run the filter and output stages of the pipeline.\n"
                },
                "queueCheckpointAcks": {
                    "type": "integer",
                    "description": "The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled.\n"
                },
                "queueCheckpointRetry": {
                    "type": "boolean",
                    "description": "When enabled, Logstash will retry four times per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried.\n"
                },
                "queueCheckpointWrites": {
                    "type": "integer",
                    "description": "The maximum number of written events before forcing a checkpoint when persistent queues are enabled.\n"
                },
                "queueDrain": {
                    "type": "boolean",
                    "description": "When enabled, Logstash waits until the persistent queue is drained before shutting down.\n"
                },
                "queueMaxBytesNumber": {
                    "type": "integer",
                    "description": "The total capacity of the queue when persistent queues are enabled.\n"
                },
                "queueMaxBytesUnits": {
                    "type": "string",
                    "description": "Units for the total capacity of the queue when persistent queues are enabled.\n"
                },
                "queueMaxEvents": {
                    "type": "integer",
                    "description": "The maximum number of unread events in the queue when persistent queues are enabled.\n"
                },
                "queuePageCapacity": {
                    "type": "string",
                    "description": "The size of the page data files used when persistent queues are enabled. The queue data consists of append-only data files separated into pages.\n"
                },
                "queueType": {
                    "type": "string",
                    "description": "The internal queueing model for event buffering. Options are memory for in-memory queueing, or persisted for disk-based acknowledged queueing.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User who last updated the pipeline.\n"
                }
            },
            "required": [
                "lastModified",
                "pipeline",
                "pipelineId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the pipeline.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/LogstashPipelineElasticsearchConnection:LogstashPipelineElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "pipeline": {
                    "type": "string",
                    "description": "Configuration for the pipeline.\n"
                },
                "pipelineBatchDelay": {
                    "type": "integer",
                    "description": "Time in milliseconds to wait for each event before sending an undersized batch to pipeline workers.\n"
                },
                "pipelineBatchSize": {
                    "type": "integer",
                    "description": "The maximum number of events an individual worker thread collects before executing filters and outputs.\n"
                },
                "pipelineEcsCompatibility": {
                    "type": "string",
                    "description": "Sets the pipeline default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier for the pipeline.\n",
                    "willReplaceOnChanges": true
                },
                "pipelineMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Optional metadata about the pipeline.\n"
                },
                "pipelineOrdered": {
                    "type": "string",
                    "description": "Set the pipeline event ordering.\n"
                },
                "pipelinePluginClassloaders": {
                    "type": "boolean",
                    "description": "(Beta) Load Java plugins in independent classloaders to isolate their dependencies.\n"
                },
                "pipelineUnsafeShutdown": {
                    "type": "boolean",
                    "description": "Forces Logstash to exit during shutdown even if there are still inflight events in memory.\n"
                },
                "pipelineWorkers": {
                    "type": "integer",
                    "description": "The number of parallel workers used to run the filter and output stages of the pipeline.\n"
                },
                "queueCheckpointAcks": {
                    "type": "integer",
                    "description": "The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled.\n"
                },
                "queueCheckpointRetry": {
                    "type": "boolean",
                    "description": "When enabled, Logstash will retry four times per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried.\n"
                },
                "queueCheckpointWrites": {
                    "type": "integer",
                    "description": "The maximum number of written events before forcing a checkpoint when persistent queues are enabled.\n"
                },
                "queueDrain": {
                    "type": "boolean",
                    "description": "When enabled, Logstash waits until the persistent queue is drained before shutting down.\n"
                },
                "queueMaxBytesNumber": {
                    "type": "integer",
                    "description": "The total capacity of the queue when persistent queues are enabled.\n"
                },
                "queueMaxBytesUnits": {
                    "type": "string",
                    "description": "Units for the total capacity of the queue when persistent queues are enabled.\n"
                },
                "queueMaxEvents": {
                    "type": "integer",
                    "description": "The maximum number of unread events in the queue when persistent queues are enabled.\n"
                },
                "queuePageCapacity": {
                    "type": "string",
                    "description": "The size of the page data files used when persistent queues are enabled. The queue data consists of append-only data files separated into pages.\n"
                },
                "queueType": {
                    "type": "string",
                    "description": "The internal queueing model for event buffering. Options are memory for in-memory queueing, or persisted for disk-based acknowledged queueing.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User who last updated the pipeline.\n"
                }
            },
            "requiredInputs": [
                "pipeline",
                "pipelineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogstashPipeline resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the pipeline.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/LogstashPipelineElasticsearchConnection:LogstashPipelineElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "Date the pipeline was last updated.\n"
                    },
                    "pipeline": {
                        "type": "string",
                        "description": "Configuration for the pipeline.\n"
                    },
                    "pipelineBatchDelay": {
                        "type": "integer",
                        "description": "Time in milliseconds to wait for each event before sending an undersized batch to pipeline workers.\n"
                    },
                    "pipelineBatchSize": {
                        "type": "integer",
                        "description": "The maximum number of events an individual worker thread collects before executing filters and outputs.\n"
                    },
                    "pipelineEcsCompatibility": {
                        "type": "string",
                        "description": "Sets the pipeline default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier for the pipeline.\n",
                        "willReplaceOnChanges": true
                    },
                    "pipelineMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Optional metadata about the pipeline.\n"
                    },
                    "pipelineOrdered": {
                        "type": "string",
                        "description": "Set the pipeline event ordering.\n"
                    },
                    "pipelinePluginClassloaders": {
                        "type": "boolean",
                        "description": "(Beta) Load Java plugins in independent classloaders to isolate their dependencies.\n"
                    },
                    "pipelineUnsafeShutdown": {
                        "type": "boolean",
                        "description": "Forces Logstash to exit during shutdown even if there are still inflight events in memory.\n"
                    },
                    "pipelineWorkers": {
                        "type": "integer",
                        "description": "The number of parallel workers used to run the filter and output stages of the pipeline.\n"
                    },
                    "queueCheckpointAcks": {
                        "type": "integer",
                        "description": "The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled.\n"
                    },
                    "queueCheckpointRetry": {
                        "type": "boolean",
                        "description": "When enabled, Logstash will retry four times per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried.\n"
                    },
                    "queueCheckpointWrites": {
                        "type": "integer",
                        "description": "The maximum number of written events before forcing a checkpoint when persistent queues are enabled.\n"
                    },
                    "queueDrain": {
                        "type": "boolean",
                        "description": "When enabled, Logstash waits until the persistent queue is drained before shutting down.\n"
                    },
                    "queueMaxBytesNumber": {
                        "type": "integer",
                        "description": "The total capacity of the queue when persistent queues are enabled.\n"
                    },
                    "queueMaxBytesUnits": {
                        "type": "string",
                        "description": "Units for the total capacity of the queue when persistent queues are enabled.\n"
                    },
                    "queueMaxEvents": {
                        "type": "integer",
                        "description": "The maximum number of unread events in the queue when persistent queues are enabled.\n"
                    },
                    "queuePageCapacity": {
                        "type": "string",
                        "description": "The size of the page data files used when persistent queues are enabled. The queue data consists of append-only data files separated into pages.\n"
                    },
                    "queueType": {
                        "type": "string",
                        "description": "The internal queueing model for event buffering. Options are memory for in-memory queueing, or persisted for disk-based acknowledged queueing.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "User who last updated the pipeline.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/script:Script": {
            "description": "Creates or updates a stored script or search template. See https://www.elastic.co/guide/en/elasticsearch/reference/current/create-stored-script-api.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst myScript = new elasticstack.Script(\"myScript\", {\n    scriptId: \"my_script\",\n    lang: \"painless\",\n    source: \"Math.log(_score * 2) + params['my_modifier']\",\n    context: \"score\",\n});\nconst mySearchTemplate = new elasticstack.Script(\"mySearchTemplate\", {\n    scriptId: \"my_search_template\",\n    lang: \"mustache\",\n    source: JSON.stringify({\n        query: {\n            match: {\n                message: \"{{query_string}}\",\n            },\n        },\n        from: \"{{from}}\",\n        size: \"{{size}}\",\n    }),\n    params: JSON.stringify({\n        query_string: \"My query string\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_script = elasticstack.Script(\"myScript\",\n    script_id=\"my_script\",\n    lang=\"painless\",\n    source=\"Math.log(_score * 2) + params['my_modifier']\",\n    context=\"score\")\nmy_search_template = elasticstack.Script(\"mySearchTemplate\",\n    script_id=\"my_search_template\",\n    lang=\"mustache\",\n    source=json.dumps({\n        \"query\": {\n            \"match\": {\n                \"message\": \"{{query_string}}\",\n            },\n        },\n        \"from\": \"{{from}}\",\n        \"size\": \"{{size}}\",\n    }),\n    params=json.dumps({\n        \"query_string\": \"My query string\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myScript = new Elasticstack.Script(\"myScript\", new()\n    {\n        ScriptId = \"my_script\",\n        Lang = \"painless\",\n        Source = \"Math.log(_score * 2) + params['my_modifier']\",\n        Context = \"score\",\n    });\n\n    var mySearchTemplate = new Elasticstack.Script(\"mySearchTemplate\", new()\n    {\n        ScriptId = \"my_search_template\",\n        Lang = \"mustache\",\n        Source = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"query\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"match\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"message\"] = \"{{query_string}}\",\n                },\n            },\n            [\"from\"] = \"{{from}}\",\n            [\"size\"] = \"{{size}}\",\n        }),\n        Params = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"query_string\"] = \"My query string\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := elasticstack.NewScript(ctx, \"myScript\", \u0026elasticstack.ScriptArgs{\n\t\t\tScriptId: pulumi.String(\"my_script\"),\n\t\t\tLang:     pulumi.String(\"painless\"),\n\t\t\tSource:   pulumi.String(\"Math.log(_score * 2) + params['my_modifier']\"),\n\t\t\tContext:  pulumi.String(\"score\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"query\": map[string]interface{}{\n\t\t\t\t\"match\": map[string]interface{}{\n\t\t\t\t\t\"message\": \"{{query_string}}\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"from\": \"{{from}}\",\n\t\t\t\"size\": \"{{size}}\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"query_string\": \"My query string\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = elasticstack.NewScript(ctx, \"mySearchTemplate\", \u0026elasticstack.ScriptArgs{\n\t\t\tScriptId: pulumi.String(\"my_search_template\"),\n\t\t\tLang:     pulumi.String(\"mustache\"),\n\t\t\tSource:   pulumi.String(json0),\n\t\t\tParams:   pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.Script;\nimport com.pulumi.elasticstack.ScriptArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myScript = new Script(\"myScript\", ScriptArgs.builder()        \n            .scriptId(\"my_script\")\n            .lang(\"painless\")\n            .source(\"Math.log(_score * 2) + params['my_modifier']\")\n            .context(\"score\")\n            .build());\n\n        var mySearchTemplate = new Script(\"mySearchTemplate\", ScriptArgs.builder()        \n            .scriptId(\"my_search_template\")\n            .lang(\"mustache\")\n            .source(serializeJson(\n                jsonObject(\n                    jsonProperty(\"query\", jsonObject(\n                        jsonProperty(\"match\", jsonObject(\n                            jsonProperty(\"message\", \"{{query_string}}\")\n                        ))\n                    )),\n                    jsonProperty(\"from\", \"{{from}}\"),\n                    jsonProperty(\"size\", \"{{size}}\")\n                )))\n            .params(serializeJson(\n                jsonObject(\n                    jsonProperty(\"query_string\", \"My query string\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myScript:\n    type: elasticstack:Script\n    properties:\n      scriptId: my_script\n      lang: painless\n      source: Math.log(_score * 2) + params['my_modifier']\n      context: score\n  mySearchTemplate:\n    type: elasticstack:Script\n    properties:\n      scriptId: my_search_template\n      lang: mustache\n      source:\n        fn::toJSON:\n          query:\n            match:\n              message: '{{query_string}}'\n          from: '{{from}}'\n          size: '{{size}}'\n      params:\n        fn::toJSON:\n          query_string: My query string\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/script:Script my_script \u003ccluster_uuid\u003e/\u003cscript id\u003e\n```\n\n ",
            "properties": {
                "context": {
                    "type": "string",
                    "description": "Context in which the script or search template should run.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ScriptElasticsearchConnection:ScriptElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "lang": {
                    "type": "string",
                    "description": "Script language. For search templates, use `mustache`.\n"
                },
                "params": {
                    "type": "string",
                    "description": "Parameters for the script or search template.\n"
                },
                "scriptId": {
                    "type": "string",
                    "description": "Identifier for the stored script. Must be unique within the cluster.\n"
                },
                "source": {
                    "type": "string",
                    "description": "For scripts, a string containing the script. For search templates, an object containing the search template.\n"
                }
            },
            "required": [
                "lang",
                "scriptId",
                "source"
            ],
            "inputProperties": {
                "context": {
                    "type": "string",
                    "description": "Context in which the script or search template should run.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ScriptElasticsearchConnection:ScriptElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "lang": {
                    "type": "string",
                    "description": "Script language. For search templates, use `mustache`.\n"
                },
                "params": {
                    "type": "string",
                    "description": "Parameters for the script or search template.\n"
                },
                "scriptId": {
                    "type": "string",
                    "description": "Identifier for the stored script. Must be unique within the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "For scripts, a string containing the script. For search templates, an object containing the search template.\n"
                }
            },
            "requiredInputs": [
                "lang",
                "scriptId",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Script resources.\n",
                "properties": {
                    "context": {
                        "type": "string",
                        "description": "Context in which the script or search template should run.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ScriptElasticsearchConnection:ScriptElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "lang": {
                        "type": "string",
                        "description": "Script language. For search templates, use `mustache`.\n"
                    },
                    "params": {
                        "type": "string",
                        "description": "Parameters for the script or search template.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "Identifier for the stored script. Must be unique within the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "source": {
                        "type": "string",
                        "description": "For scripts, a string containing the script. For search templates, an object containing the search template.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/securityApiKey:SecurityApiKey": {
            "description": "Creates an API key for access without requiring basic authentication. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst apiKeySecurityApiKey = new elasticstack.SecurityApiKey(\"apiKeySecurityApiKey\", {\n    roleDescriptors: JSON.stringify({\n        \"role-a\": {\n            cluster: [\"all\"],\n            indices: [{\n                names: [\"index-a*\"],\n                privileges: [\"read\"],\n            }],\n        },\n    }),\n    expiration: \"1d\",\n    metadata: JSON.stringify({\n        env: \"testing\",\n        open: false,\n        number: 49,\n    }),\n});\nexport const apiKey = apiKeySecurityApiKey;\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\napi_key_security_api_key = elasticstack.SecurityApiKey(\"apiKeySecurityApiKey\",\n    role_descriptors=json.dumps({\n        \"role-a\": {\n            \"cluster\": [\"all\"],\n            \"indices\": [{\n                \"names\": [\"index-a*\"],\n                \"privileges\": [\"read\"],\n            }],\n        },\n    }),\n    expiration=\"1d\",\n    metadata=json.dumps({\n        \"env\": \"testing\",\n        \"open\": False,\n        \"number\": 49,\n    }))\npulumi.export(\"apiKey\", api_key_security_api_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apiKeySecurityApiKey = new Elasticstack.SecurityApiKey(\"apiKeySecurityApiKey\", new()\n    {\n        RoleDescriptors = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"role-a\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"cluster\"] = new[]\n                {\n                    \"all\",\n                },\n                [\"indices\"] = new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"names\"] = new[]\n                        {\n                            \"index-a*\",\n                        },\n                        [\"privileges\"] = new[]\n                        {\n                            \"read\",\n                        },\n                    },\n                },\n            },\n        }),\n        Expiration = \"1d\",\n        Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"env\"] = \"testing\",\n            [\"open\"] = false,\n            [\"number\"] = 49,\n        }),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"apiKey\"] = apiKeySecurityApiKey,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"role-a\": map[string]interface{}{\n\t\t\t\t\"cluster\": []string{\n\t\t\t\t\t\"all\",\n\t\t\t\t},\n\t\t\t\t\"indices\": []map[string]interface{}{\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"names\": []string{\n\t\t\t\t\t\t\t\"index-a*\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"privileges\": []string{\n\t\t\t\t\t\t\t\"read\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"env\":    \"testing\",\n\t\t\t\"open\":   false,\n\t\t\t\"number\": 49,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\tapiKeySecurityApiKey, err := elasticstack.NewSecurityApiKey(ctx, \"apiKeySecurityApiKey\", \u0026elasticstack.SecurityApiKeyArgs{\n\t\t\tRoleDescriptors: pulumi.String(json0),\n\t\t\tExpiration:      pulumi.String(\"1d\"),\n\t\t\tMetadata:        pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"apiKey\", apiKeySecurityApiKey)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SecurityApiKey;\nimport com.pulumi.elasticstack.SecurityApiKeyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var apiKeySecurityApiKey = new SecurityApiKey(\"apiKeySecurityApiKey\", SecurityApiKeyArgs.builder()        \n            .roleDescriptors(serializeJson(\n                jsonObject(\n                    jsonProperty(\"role-a\", jsonObject(\n                        jsonProperty(\"cluster\", jsonArray(\"all\")),\n                        jsonProperty(\"indices\", jsonArray(jsonObject(\n                            jsonProperty(\"names\", jsonArray(\"index-a*\")),\n                            jsonProperty(\"privileges\", jsonArray(\"read\"))\n                        )))\n                    ))\n                )))\n            .expiration(\"1d\")\n            .metadata(serializeJson(\n                jsonObject(\n                    jsonProperty(\"env\", \"testing\"),\n                    jsonProperty(\"open\", false),\n                    jsonProperty(\"number\", 49)\n                )))\n            .build());\n\n        ctx.export(\"apiKey\", apiKeySecurityApiKey);\n    }\n}\n```\n```yaml\nresources:\n  apiKeySecurityApiKey:\n    type: elasticstack:SecurityApiKey\n    properties:\n      # Set the role descriptors\n      roleDescriptors:\n        fn::toJSON:\n          role-a:\n            cluster:\n              - all\n            indices:\n              - names:\n                  - index-a*\n                privileges:\n                  - read\n      # Set the expiration for the API key\n      expiration: 1d\n      # Set the custom metadata for this user\n      metadata:\n        fn::toJSON:\n          env: testing\n          open: false\n          number: 49\noutputs:\n  apiKey: ${apiKeySecurityApiKey}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport is not supported due to the generated API key only being visible on create. ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Generated API Key.\n",
                    "secret": true
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityApiKeyElasticsearchConnection:SecurityApiKeyElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "encoded": {
                    "type": "string",
                    "description": "API key credentials which is the Base64-encoding of the UTF-8 representation of the id and api_key joined by a colon (:).\n",
                    "secret": true
                },
                "expiration": {
                    "type": "string",
                    "description": "Expiration time for the API key. By default, API keys never expire.\n"
                },
                "expirationTimestamp": {
                    "type": "integer",
                    "description": "Expiration time in milliseconds for the API key. By default, API keys never expire.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Arbitrary metadata that you want to associate with the API key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for this API key.\n"
                },
                "roleDescriptors": {
                    "type": "string",
                    "description": "Role descriptors for this API key.\n"
                }
            },
            "required": [
                "apiKey",
                "encoded",
                "expirationTimestamp",
                "metadata",
                "name"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityApiKeyElasticsearchConnection:SecurityApiKeyElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "expiration": {
                    "type": "string",
                    "description": "Expiration time for the API key. By default, API keys never expire.\n",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "string",
                    "description": "Arbitrary metadata that you want to associate with the API key.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for this API key.\n",
                    "willReplaceOnChanges": true
                },
                "roleDescriptors": {
                    "type": "string",
                    "description": "Role descriptors for this API key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityApiKey resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "Generated API Key.\n",
                        "secret": true
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SecurityApiKeyElasticsearchConnection:SecurityApiKeyElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "encoded": {
                        "type": "string",
                        "description": "API key credentials which is the Base64-encoding of the UTF-8 representation of the id and api_key joined by a colon (:).\n",
                        "secret": true
                    },
                    "expiration": {
                        "type": "string",
                        "description": "Expiration time for the API key. By default, API keys never expire.\n",
                        "willReplaceOnChanges": true
                    },
                    "expirationTimestamp": {
                        "type": "integer",
                        "description": "Expiration time in milliseconds for the API key. By default, API keys never expire.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Arbitrary metadata that you want to associate with the API key.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name for this API key.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleDescriptors": {
                        "type": "string",
                        "description": "Role descriptors for this API key.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/securityRole:SecurityRole": {
            "description": "Adds and updates roles in the native realm. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst roleSecurityRole = new elasticstack.SecurityRole(\"roleSecurityRole\", {\n    clusters: [\"all\"],\n    indices: [{\n        names: [\n            \"index1\",\n            \"index2\",\n        ],\n        privileges: [\"all\"],\n    }],\n    applications: [{\n        application: \"myapp\",\n        privileges: [\n            \"admin\",\n            \"read\",\n        ],\n        resources: [\"*\"],\n    }],\n    runAs: [\"other_user\"],\n    metadata: JSON.stringify({\n        version: 1,\n    }),\n});\nexport const role = roleSecurityRole;\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nrole_security_role = elasticstack.SecurityRole(\"roleSecurityRole\",\n    clusters=[\"all\"],\n    indices=[elasticstack.SecurityRoleIndexArgs(\n        names=[\n            \"index1\",\n            \"index2\",\n        ],\n        privileges=[\"all\"],\n    )],\n    applications=[elasticstack.SecurityRoleApplicationArgs(\n        application=\"myapp\",\n        privileges=[\n            \"admin\",\n            \"read\",\n        ],\n        resources=[\"*\"],\n    )],\n    run_as=[\"other_user\"],\n    metadata=json.dumps({\n        \"version\": 1,\n    }))\npulumi.export(\"role\", role_security_role)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var roleSecurityRole = new Elasticstack.SecurityRole(\"roleSecurityRole\", new()\n    {\n        Clusters = new[]\n        {\n            \"all\",\n        },\n        Indices = new[]\n        {\n            new Elasticstack.Inputs.SecurityRoleIndexArgs\n            {\n                Names = new[]\n                {\n                    \"index1\",\n                    \"index2\",\n                },\n                Privileges = new[]\n                {\n                    \"all\",\n                },\n            },\n        },\n        Applications = new[]\n        {\n            new Elasticstack.Inputs.SecurityRoleApplicationArgs\n            {\n                Application = \"myapp\",\n                Privileges = new[]\n                {\n                    \"admin\",\n                    \"read\",\n                },\n                Resources = new[]\n                {\n                    \"*\",\n                },\n            },\n        },\n        RunAs = new[]\n        {\n            \"other_user\",\n        },\n        Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"version\"] = 1,\n        }),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"role\"] = roleSecurityRole,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"version\": 1,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\troleSecurityRole, err := elasticstack.NewSecurityRole(ctx, \"roleSecurityRole\", \u0026elasticstack.SecurityRoleArgs{\n\t\t\tClusters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"all\"),\n\t\t\t},\n\t\t\tIndices: elasticstack.SecurityRoleIndexArray{\n\t\t\t\t\u0026elasticstack.SecurityRoleIndexArgs{\n\t\t\t\t\tNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"index1\"),\n\t\t\t\t\t\tpulumi.String(\"index2\"),\n\t\t\t\t\t},\n\t\t\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"all\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tApplications: elasticstack.SecurityRoleApplicationArray{\n\t\t\t\t\u0026elasticstack.SecurityRoleApplicationArgs{\n\t\t\t\t\tApplication: pulumi.String(\"myapp\"),\n\t\t\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"admin\"),\n\t\t\t\t\t\tpulumi.String(\"read\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRunAs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"other_user\"),\n\t\t\t},\n\t\t\tMetadata: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"role\", roleSecurityRole)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SecurityRole;\nimport com.pulumi.elasticstack.SecurityRoleArgs;\nimport com.pulumi.elasticstack.inputs.SecurityRoleIndexArgs;\nimport com.pulumi.elasticstack.inputs.SecurityRoleApplicationArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roleSecurityRole = new SecurityRole(\"roleSecurityRole\", SecurityRoleArgs.builder()        \n            .clusters(\"all\")\n            .indices(SecurityRoleIndexArgs.builder()\n                .names(                \n                    \"index1\",\n                    \"index2\")\n                .privileges(\"all\")\n                .build())\n            .applications(SecurityRoleApplicationArgs.builder()\n                .application(\"myapp\")\n                .privileges(                \n                    \"admin\",\n                    \"read\")\n                .resources(\"*\")\n                .build())\n            .runAs(\"other_user\")\n            .metadata(serializeJson(\n                jsonObject(\n                    jsonProperty(\"version\", 1)\n                )))\n            .build());\n\n        ctx.export(\"role\", roleSecurityRole);\n    }\n}\n```\n```yaml\nresources:\n  roleSecurityRole:\n    type: elasticstack:SecurityRole\n    properties:\n      clusters:\n        - all\n      indices:\n        - names:\n            - index1\n            - index2\n          privileges:\n            - all\n      applications:\n        - application: myapp\n          privileges:\n            - admin\n            - read\n          resources:\n            - '*'\n      runAs:\n        - other_user\n      metadata:\n        fn::toJSON:\n          version: 1\noutputs:\n  role: ${roleSecurityRole}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/securityRole:SecurityRole my_role \u003ccluster_uuid\u003e/\u003crole name\u003e\n```\n\n ",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/SecurityRoleApplication:SecurityRoleApplication"
                    },
                    "description": "A list of application privilege entries.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityRoleElasticsearchConnection:SecurityRoleElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "global": {
                    "type": "string",
                    "description": "An object defining global privileges.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/SecurityRoleIndex:SecurityRoleIndex"
                    },
                    "description": "A list of indices permissions entries.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional meta-data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                },
                "runAs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that the owners of this role can impersonate.\n"
                }
            },
            "required": [
                "metadata",
                "name"
            ],
            "inputProperties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/SecurityRoleApplication:SecurityRoleApplication"
                    },
                    "description": "A list of application privilege entries.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityRoleElasticsearchConnection:SecurityRoleElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "global": {
                    "type": "string",
                    "description": "An object defining global privileges.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/SecurityRoleIndex:SecurityRoleIndex"
                    },
                    "description": "A list of indices permissions entries.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional meta-data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n",
                    "willReplaceOnChanges": true
                },
                "runAs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that the owners of this role can impersonate.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityRole resources.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/SecurityRoleApplication:SecurityRoleApplication"
                        },
                        "description": "A list of application privilege entries.\n"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SecurityRoleElasticsearchConnection:SecurityRoleElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "global": {
                        "type": "string",
                        "description": "An object defining global privileges.\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/SecurityRoleIndex:SecurityRoleIndex"
                        },
                        "description": "A list of indices permissions entries.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional meta-data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n",
                        "willReplaceOnChanges": true
                    },
                    "runAs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users that the owners of this role can impersonate.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/securityRoleMapping:SecurityRoleMapping": {
            "description": "Manage role mappings. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role-mapping.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst example = new elasticstack.SecurityRoleMapping(\"example\", {\n    enabled: true,\n    roles: [\"admin\"],\n    rules: JSON.stringify({\n        any: [\n            {\n                field: {\n                    username: \"esadmin\",\n                },\n            },\n            {\n                field: {\n                    groups: \"cn=admins,dc=example,dc=com\",\n                },\n            },\n        ],\n    }),\n});\nexport const role = example.name;\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nexample = elasticstack.SecurityRoleMapping(\"example\",\n    enabled=True,\n    roles=[\"admin\"],\n    rules=json.dumps({\n        \"any\": [\n            {\n                \"field\": {\n                    \"username\": \"esadmin\",\n                },\n            },\n            {\n                \"field\": {\n                    \"groups\": \"cn=admins,dc=example,dc=com\",\n                },\n            },\n        ],\n    }))\npulumi.export(\"role\", example.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Elasticstack.SecurityRoleMapping(\"example\", new()\n    {\n        Enabled = true,\n        Roles = new[]\n        {\n            \"admin\",\n        },\n        Rules = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"any\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"field\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"username\"] = \"esadmin\",\n                    },\n                },\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"field\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"groups\"] = \"cn=admins,dc=example,dc=com\",\n                    },\n                },\n            },\n        }),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"role\"] = example.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"any\": []interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"field\": map[string]interface{}{\n\t\t\t\t\t\t\"username\": \"esadmin\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"field\": map[string]interface{}{\n\t\t\t\t\t\t\"groups\": \"cn=admins,dc=example,dc=com\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\texample, err := elasticstack.NewSecurityRoleMapping(ctx, \"example\", \u0026elasticstack.SecurityRoleMappingArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"admin\"),\n\t\t\t},\n\t\t\tRules: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"role\", example.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SecurityRoleMapping;\nimport com.pulumi.elasticstack.SecurityRoleMappingArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new SecurityRoleMapping(\"example\", SecurityRoleMappingArgs.builder()        \n            .enabled(true)\n            .roles(\"admin\")\n            .rules(serializeJson(\n                jsonObject(\n                    jsonProperty(\"any\", jsonArray(\n                        jsonObject(\n                            jsonProperty(\"field\", jsonObject(\n                                jsonProperty(\"username\", \"esadmin\")\n                            ))\n                        ), \n                        jsonObject(\n                            jsonProperty(\"field\", jsonObject(\n                                jsonProperty(\"groups\", \"cn=admins,dc=example,dc=com\")\n                            ))\n                        )\n                    ))\n                )))\n            .build());\n\n        ctx.export(\"role\", example.name());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: elasticstack:SecurityRoleMapping\n    properties:\n      enabled: true\n      roles:\n        - admin\n      rules:\n        fn::toJSON:\n          any:\n            - field:\n                username: esadmin\n            - field:\n                groups: cn=admins,dc=example,dc=com\noutputs:\n  role: ${example.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/securityRoleMapping:SecurityRoleMapping my_role_mapping \u003ccluster_uuid\u003e/\u003crole mapping name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityRoleMappingElasticsearchConnection:SecurityRoleMappingElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Mappings that have `enabled` set to `false` are ignored when role mapping is performed.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The distinct name that identifies the role mapping, used solely as an identifier.\n"
                },
                "roleTemplates": {
                    "type": "string",
                    "description": "A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of role names that are granted to the users that match the role mapping rules.\n"
                },
                "rules": {
                    "type": "string",
                    "description": "The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.\n"
                }
            },
            "required": [
                "name",
                "rules"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityRoleMappingElasticsearchConnection:SecurityRoleMappingElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Mappings that have `enabled` set to `false` are ignored when role mapping is performed.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The distinct name that identifies the role mapping, used solely as an identifier.\n"
                },
                "roleTemplates": {
                    "type": "string",
                    "description": "A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of role names that are granted to the users that match the role mapping rules.\n"
                },
                "rules": {
                    "type": "string",
                    "description": "The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityRoleMapping resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SecurityRoleMappingElasticsearchConnection:SecurityRoleMappingElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Mappings that have `enabled` set to `false` are ignored when role mapping is performed.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The distinct name that identifies the role mapping, used solely as an identifier.\n"
                    },
                    "roleTemplates": {
                        "type": "string",
                        "description": "A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of role names that are granted to the users that match the role mapping rules.\n"
                    },
                    "rules": {
                        "type": "string",
                        "description": "The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/securitySystemUser:SecuritySystemUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst kibanaSystem = new elasticstack.SecuritySystemUser(\"kibanaSystem\", {\n    elasticsearchConnection: {\n        endpoints: [\"http://localhost:9200\"],\n        password: \"changeme\",\n        username: \"elastic\",\n    },\n    passwordHash: `$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO`,\n    username: \"kibana_system\",\n});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nkibana_system = elasticstack.SecuritySystemUser(\"kibanaSystem\",\n    elasticsearch_connection=elasticstack.SecuritySystemUserElasticsearchConnectionArgs(\n        endpoints=[\"http://localhost:9200\"],\n        password=\"changeme\",\n        username=\"elastic\",\n    ),\n    password_hash=\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\",\n    username=\"kibana_system\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var kibanaSystem = new Elasticstack.SecuritySystemUser(\"kibanaSystem\", new()\n    {\n        ElasticsearchConnection = new Elasticstack.Inputs.SecuritySystemUserElasticsearchConnectionArgs\n        {\n            Endpoints = new[]\n            {\n                \"http://localhost:9200\",\n            },\n            Password = \"changeme\",\n            Username = \"elastic\",\n        },\n        PasswordHash = \"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\",\n        Username = \"kibana_system\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := elasticstack.NewSecuritySystemUser(ctx, \"kibanaSystem\", \u0026elasticstack.SecuritySystemUserArgs{\n\t\t\tElasticsearchConnection: \u0026elasticstack.SecuritySystemUserElasticsearchConnectionArgs{\n\t\t\t\tEndpoints: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"http://localhost:9200\"),\n\t\t\t\t},\n\t\t\t\tPassword: pulumi.String(\"changeme\"),\n\t\t\t\tUsername: pulumi.String(\"elastic\"),\n\t\t\t},\n\t\t\tPasswordHash: pulumi.String(fmt.Sprintf(\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\")),\n\t\t\tUsername:     pulumi.String(\"kibana_system\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SecuritySystemUser;\nimport com.pulumi.elasticstack.SecuritySystemUserArgs;\nimport com.pulumi.elasticstack.inputs.SecuritySystemUserElasticsearchConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var kibanaSystem = new SecuritySystemUser(\"kibanaSystem\", SecuritySystemUserArgs.builder()        \n            .elasticsearchConnection(SecuritySystemUserElasticsearchConnectionArgs.builder()\n                .endpoints(\"http://localhost:9200\")\n                .password(\"changeme\")\n                .username(\"elastic\")\n                .build())\n            .passwordHash(\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\")\n            .username(\"kibana_system\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  kibanaSystem:\n    type: elasticstack:SecuritySystemUser\n    properties:\n      elasticsearchConnection:\n        endpoints:\n          - http://localhost:9200\n        password: changeme\n        username: elastic\n      # For details on how to generate the hashed password see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-request-body\n      passwordHash: $2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\n      username: kibana_system\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecuritySystemUserElasticsearchConnection:SecuritySystemUserElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user is enabled. The default value is true.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user’s password. Passwords must be at least 6 characters long.\n",
                    "secret": true
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).\n"
                }
            },
            "required": [
                "username"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecuritySystemUserElasticsearchConnection:SecuritySystemUserElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user is enabled. The default value is true.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user’s password. Passwords must be at least 6 characters long.\n",
                    "secret": true
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecuritySystemUser resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SecuritySystemUserElasticsearchConnection:SecuritySystemUserElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the user is enabled. The default value is true.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user’s password. Passwords must be at least 6 characters long.\n",
                        "secret": true
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/securityUser:SecurityUser": {
            "description": "Adds and updates users in the native realm. These users are commonly referred to as native users. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst user = new elasticstack.SecurityUser(\"user\", {\n    username: \"testuser\",\n    passwordHash: `$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO`,\n    roles: [\"kibana_user\"],\n    metadata: JSON.stringify({\n        env: \"testing\",\n        open: false,\n        number: 49,\n    }),\n    elasticsearchConnection: {\n        endpoints: [\"http://localhost:9200\"],\n        username: \"elastic\",\n        password: \"changeme\",\n    },\n});\nconst dev = new elasticstack.SecurityUser(\"dev\", {\n    username: \"devuser\",\n    password: \"1234567890\",\n    roles: [\"kibana_user\"],\n    metadata: JSON.stringify({\n        env: \"testing\",\n        open: false,\n        number: 49,\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nuser = elasticstack.SecurityUser(\"user\",\n    username=\"testuser\",\n    password_hash=\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\",\n    roles=[\"kibana_user\"],\n    metadata=json.dumps({\n        \"env\": \"testing\",\n        \"open\": False,\n        \"number\": 49,\n    }),\n    elasticsearch_connection=elasticstack.SecurityUserElasticsearchConnectionArgs(\n        endpoints=[\"http://localhost:9200\"],\n        username=\"elastic\",\n        password=\"changeme\",\n    ))\ndev = elasticstack.SecurityUser(\"dev\",\n    username=\"devuser\",\n    password=\"1234567890\",\n    roles=[\"kibana_user\"],\n    metadata=json.dumps({\n        \"env\": \"testing\",\n        \"open\": False,\n        \"number\": 49,\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = new Elasticstack.SecurityUser(\"user\", new()\n    {\n        Username = \"testuser\",\n        PasswordHash = \"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\",\n        Roles = new[]\n        {\n            \"kibana_user\",\n        },\n        Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"env\"] = \"testing\",\n            [\"open\"] = false,\n            [\"number\"] = 49,\n        }),\n        ElasticsearchConnection = new Elasticstack.Inputs.SecurityUserElasticsearchConnectionArgs\n        {\n            Endpoints = new[]\n            {\n                \"http://localhost:9200\",\n            },\n            Username = \"elastic\",\n            Password = \"changeme\",\n        },\n    });\n\n    var dev = new Elasticstack.SecurityUser(\"dev\", new()\n    {\n        Username = \"devuser\",\n        Password = \"1234567890\",\n        Roles = new[]\n        {\n            \"kibana_user\",\n        },\n        Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"env\"] = \"testing\",\n            [\"open\"] = false,\n            [\"number\"] = 49,\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"env\":    \"testing\",\n\t\t\t\"open\":   false,\n\t\t\t\"number\": 49,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = elasticstack.NewSecurityUser(ctx, \"user\", \u0026elasticstack.SecurityUserArgs{\n\t\t\tUsername:     pulumi.String(\"testuser\"),\n\t\t\tPasswordHash: pulumi.String(fmt.Sprintf(\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\")),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"kibana_user\"),\n\t\t\t},\n\t\t\tMetadata: pulumi.String(json0),\n\t\t\tElasticsearchConnection: \u0026elasticstack.SecurityUserElasticsearchConnectionArgs{\n\t\t\t\tEndpoints: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"http://localhost:9200\"),\n\t\t\t\t},\n\t\t\t\tUsername: pulumi.String(\"elastic\"),\n\t\t\t\tPassword: pulumi.String(\"changeme\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"env\":    \"testing\",\n\t\t\t\"open\":   false,\n\t\t\t\"number\": 49,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = elasticstack.NewSecurityUser(ctx, \"dev\", \u0026elasticstack.SecurityUserArgs{\n\t\t\tUsername: pulumi.String(\"devuser\"),\n\t\t\tPassword: pulumi.String(\"1234567890\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"kibana_user\"),\n\t\t\t},\n\t\t\tMetadata: pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SecurityUser;\nimport com.pulumi.elasticstack.SecurityUserArgs;\nimport com.pulumi.elasticstack.inputs.SecurityUserElasticsearchConnectionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new SecurityUser(\"user\", SecurityUserArgs.builder()        \n            .username(\"testuser\")\n            .passwordHash(\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\")\n            .roles(\"kibana_user\")\n            .metadata(serializeJson(\n                jsonObject(\n                    jsonProperty(\"env\", \"testing\"),\n                    jsonProperty(\"open\", false),\n                    jsonProperty(\"number\", 49)\n                )))\n            .elasticsearchConnection(SecurityUserElasticsearchConnectionArgs.builder()\n                .endpoints(\"http://localhost:9200\")\n                .username(\"elastic\")\n                .password(\"changeme\")\n                .build())\n            .build());\n\n        var dev = new SecurityUser(\"dev\", SecurityUserArgs.builder()        \n            .username(\"devuser\")\n            .password(\"1234567890\")\n            .roles(\"kibana_user\")\n            .metadata(serializeJson(\n                jsonObject(\n                    jsonProperty(\"env\", \"testing\"),\n                    jsonProperty(\"open\", false),\n                    jsonProperty(\"number\", 49)\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: elasticstack:SecurityUser\n    properties:\n      username: testuser\n      # use hashed password: see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-request-body\n      passwordHash: $2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\n      roles:\n        - kibana_user\n      # set the custom metadata for this user\n      metadata:\n        fn::toJSON:\n          env: testing\n          open: false\n          number: 49\n      elasticsearchConnection:\n        endpoints:\n          - http://localhost:9200\n        username: elastic\n        password: changeme\n  dev:\n    type: elasticstack:SecurityUser\n    properties:\n      username: devuser\n      password: '1234567890'\n      roles:\n        - kibana_user\n      # set the custom metadata for this user\n      metadata:\n        fn::toJSON:\n          env: testing\n          open: false\n          number: 49\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/securityUser:SecurityUser user \u003ccluster_uuid\u003e/elastic\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityUserElasticsearchConnection:SecurityUserElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user is enabled. The default value is true.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the user.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Arbitrary metadata that you want to associate with the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user’s password. Passwords must be at least 6 characters long.\n",
                    "secret": true
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                },
                "username": {
                    "type": "string",
                    "description": "An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).\n"
                }
            },
            "required": [
                "metadata",
                "roles",
                "username"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SecurityUserElasticsearchConnection:SecurityUserElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user is enabled. The default value is true.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the user.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Arbitrary metadata that you want to associate with the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user’s password. Passwords must be at least 6 characters long.\n",
                    "secret": true
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                },
                "username": {
                    "type": "string",
                    "description": "An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityUser resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SecurityUserElasticsearchConnection:SecurityUserElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the user is enabled. The default value is true.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the user.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Arbitrary metadata that you want to associate with the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user’s password. Passwords must be at least 6 characters long.\n",
                        "secret": true
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n",
                        "secret": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/snapshotLifecycle:SnapshotLifecycle": {
            "description": "Creates or updates a snapshot lifecycle policy. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\n// create a repository for snapshots\nconst repo = new elasticstack.SnapshotRepository(\"repo\", {fs: {\n    location: \"/tmp/snapshots\",\n    compress: true,\n    maxRestoreBytesPerSec: \"20mb\",\n}});\n// create a SLM policy and use the above created repository\nconst slmPolicy = new elasticstack.SnapshotLifecycle(\"slmPolicy\", {\n    schedule: \"0 30 1 * * ?\",\n    snapshotName: \"\u003cdaily-snap-{now/d}\u003e\",\n    repository: repo.name,\n    indices: [\n        \"data-*\",\n        \"important\",\n    ],\n    ignoreUnavailable: false,\n    includeGlobalState: false,\n    expireAfter: \"30d\",\n    minCount: 5,\n    maxCount: 50,\n});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\n# create a repository for snapshots\nrepo = elasticstack.SnapshotRepository(\"repo\", fs=elasticstack.SnapshotRepositoryFsArgs(\n    location=\"/tmp/snapshots\",\n    compress=True,\n    max_restore_bytes_per_sec=\"20mb\",\n))\n# create a SLM policy and use the above created repository\nslm_policy = elasticstack.SnapshotLifecycle(\"slmPolicy\",\n    schedule=\"0 30 1 * * ?\",\n    snapshot_name=\"\u003cdaily-snap-{now/d}\u003e\",\n    repository=repo.name,\n    indices=[\n        \"data-*\",\n        \"important\",\n    ],\n    ignore_unavailable=False,\n    include_global_state=False,\n    expire_after=\"30d\",\n    min_count=5,\n    max_count=50)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // create a repository for snapshots\n    var repo = new Elasticstack.SnapshotRepository(\"repo\", new()\n    {\n        Fs = new Elasticstack.Inputs.SnapshotRepositoryFsArgs\n        {\n            Location = \"/tmp/snapshots\",\n            Compress = true,\n            MaxRestoreBytesPerSec = \"20mb\",\n        },\n    });\n\n    // create a SLM policy and use the above created repository\n    var slmPolicy = new Elasticstack.SnapshotLifecycle(\"slmPolicy\", new()\n    {\n        Schedule = \"0 30 1 * * ?\",\n        SnapshotName = \"\u003cdaily-snap-{now/d}\u003e\",\n        Repository = repo.Name,\n        Indices = new[]\n        {\n            \"data-*\",\n            \"important\",\n        },\n        IgnoreUnavailable = false,\n        IncludeGlobalState = false,\n        ExpireAfter = \"30d\",\n        MinCount = 5,\n        MaxCount = 50,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := elasticstack.NewSnapshotRepository(ctx, \"repo\", \u0026elasticstack.SnapshotRepositoryArgs{\n\t\t\tFs: \u0026elasticstack.SnapshotRepositoryFsArgs{\n\t\t\t\tLocation:              pulumi.String(\"/tmp/snapshots\"),\n\t\t\t\tCompress:              pulumi.Bool(true),\n\t\t\t\tMaxRestoreBytesPerSec: pulumi.String(\"20mb\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewSnapshotLifecycle(ctx, \"slmPolicy\", \u0026elasticstack.SnapshotLifecycleArgs{\n\t\t\tSchedule:     pulumi.String(\"0 30 1 * * ?\"),\n\t\t\tSnapshotName: pulumi.String(\"\u003cdaily-snap-{now/d}\u003e\"),\n\t\t\tRepository:   repo.Name,\n\t\t\tIndices: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"data-*\"),\n\t\t\t\tpulumi.String(\"important\"),\n\t\t\t},\n\t\t\tIgnoreUnavailable:  pulumi.Bool(false),\n\t\t\tIncludeGlobalState: pulumi.Bool(false),\n\t\t\tExpireAfter:        pulumi.String(\"30d\"),\n\t\t\tMinCount:           pulumi.Int(5),\n\t\t\tMaxCount:           pulumi.Int(50),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SnapshotRepository;\nimport com.pulumi.elasticstack.SnapshotRepositoryArgs;\nimport com.pulumi.elasticstack.inputs.SnapshotRepositoryFsArgs;\nimport com.pulumi.elasticstack.SnapshotLifecycle;\nimport com.pulumi.elasticstack.SnapshotLifecycleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo = new SnapshotRepository(\"repo\", SnapshotRepositoryArgs.builder()        \n            .fs(SnapshotRepositoryFsArgs.builder()\n                .location(\"/tmp/snapshots\")\n                .compress(true)\n                .maxRestoreBytesPerSec(\"20mb\")\n                .build())\n            .build());\n\n        var slmPolicy = new SnapshotLifecycle(\"slmPolicy\", SnapshotLifecycleArgs.builder()        \n            .schedule(\"0 30 1 * * ?\")\n            .snapshotName(\"\u003cdaily-snap-{now/d}\u003e\")\n            .repository(repo.name())\n            .indices(            \n                \"data-*\",\n                \"important\")\n            .ignoreUnavailable(false)\n            .includeGlobalState(false)\n            .expireAfter(\"30d\")\n            .minCount(5)\n            .maxCount(50)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # create a repository for snapshots\n  repo:\n    type: elasticstack:SnapshotRepository\n    properties:\n      fs:\n        location: /tmp/snapshots\n        compress: true\n        maxRestoreBytesPerSec: 20mb\n  # create a SLM policy and use the above created repository\n  slmPolicy:\n    type: elasticstack:SnapshotLifecycle\n    properties:\n      schedule: 0 30 1 * * ?\n      snapshotName: \u003cdaily-snap-{now/d}\u003e\n      repository: ${repo.name}\n      indices:\n        - data-*\n        - important\n      ignoreUnavailable: false\n      includeGlobalState: false\n      expireAfter: 30d\n      minCount: 5\n      maxCount: 50\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/snapshotLifecycle:SnapshotLifecycle my_policy \u003ccluster_uuid\u003e/\u003cslm policy name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SnapshotLifecycleElasticsearchConnection:SnapshotLifecycleElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "expandWildcards": {
                    "type": "string",
                    "description": "Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.\n"
                },
                "expireAfter": {
                    "type": "string",
                    "description": "Time period after which a snapshot is considered expired and eligible for deletion.\n"
                },
                "featureStates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Feature states to include in the snapshot.\n"
                },
                "ignoreUnavailable": {
                    "type": "boolean",
                    "description": "If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.\n"
                },
                "includeGlobalState": {
                    "type": "boolean",
                    "description": "If `true`, include the cluster state in the snapshot.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma-separated list of data streams and indices to include in the snapshot.\n"
                },
                "maxCount": {
                    "type": "integer",
                    "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Attaches arbitrary metadata to the snapshot.\n"
                },
                "minCount": {
                    "type": "integer",
                    "description": "Minimum number of snapshots to retain, even if the snapshots have expired.\n"
                },
                "name": {
                    "type": "string",
                    "description": "ID for the snapshot lifecycle policy you want to create or update.\n"
                },
                "partial": {
                    "type": "boolean",
                    "description": "If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository used to store snapshots created by this policy.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Periodic or absolute schedule at which the policy creates snapshots.\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Name automatically assigned to each snapshot created by the policy.\n"
                }
            },
            "required": [
                "featureStates",
                "indices",
                "metadata",
                "name",
                "repository",
                "schedule"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SnapshotLifecycleElasticsearchConnection:SnapshotLifecycleElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "expandWildcards": {
                    "type": "string",
                    "description": "Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.\n"
                },
                "expireAfter": {
                    "type": "string",
                    "description": "Time period after which a snapshot is considered expired and eligible for deletion.\n"
                },
                "featureStates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Feature states to include in the snapshot.\n"
                },
                "ignoreUnavailable": {
                    "type": "boolean",
                    "description": "If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.\n"
                },
                "includeGlobalState": {
                    "type": "boolean",
                    "description": "If `true`, include the cluster state in the snapshot.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma-separated list of data streams and indices to include in the snapshot.\n"
                },
                "maxCount": {
                    "type": "integer",
                    "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Attaches arbitrary metadata to the snapshot.\n"
                },
                "minCount": {
                    "type": "integer",
                    "description": "Minimum number of snapshots to retain, even if the snapshots have expired.\n"
                },
                "name": {
                    "type": "string",
                    "description": "ID for the snapshot lifecycle policy you want to create or update.\n",
                    "willReplaceOnChanges": true
                },
                "partial": {
                    "type": "boolean",
                    "description": "If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository used to store snapshots created by this policy.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Periodic or absolute schedule at which the policy creates snapshots.\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Name automatically assigned to each snapshot created by the policy.\n"
                }
            },
            "requiredInputs": [
                "repository",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnapshotLifecycle resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SnapshotLifecycleElasticsearchConnection:SnapshotLifecycleElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "expandWildcards": {
                        "type": "string",
                        "description": "Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.\n"
                    },
                    "expireAfter": {
                        "type": "string",
                        "description": "Time period after which a snapshot is considered expired and eligible for deletion.\n"
                    },
                    "featureStates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Feature states to include in the snapshot.\n"
                    },
                    "ignoreUnavailable": {
                        "type": "boolean",
                        "description": "If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.\n"
                    },
                    "includeGlobalState": {
                        "type": "boolean",
                        "description": "If `true`, include the cluster state in the snapshot.\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Comma-separated list of data streams and indices to include in the snapshot.\n"
                    },
                    "maxCount": {
                        "type": "integer",
                        "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Attaches arbitrary metadata to the snapshot.\n"
                    },
                    "minCount": {
                        "type": "integer",
                        "description": "Minimum number of snapshots to retain, even if the snapshots have expired.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "ID for the snapshot lifecycle policy you want to create or update.\n",
                        "willReplaceOnChanges": true
                    },
                    "partial": {
                        "type": "boolean",
                        "description": "If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Repository used to store snapshots created by this policy.\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Periodic or absolute schedule at which the policy creates snapshots.\n"
                    },
                    "snapshotName": {
                        "type": "string",
                        "description": "Name automatically assigned to each snapshot created by the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/snapshotRepository:SnapshotRepository": {
            "description": "Registers or updates a snapshot repository. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/put-snapshot-repo-api.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst myUrlRepo = new elasticstack.SnapshotRepository(\"myUrlRepo\", {url: {\n    url: \"https://example.com/repo\",\n}});\nconst myFsRepo = new elasticstack.SnapshotRepository(\"myFsRepo\", {fs: {\n    compress: true,\n    location: \"/tmp\",\n    maxRestoreBytesPerSec: \"10mb\",\n}});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nmy_url_repo = elasticstack.SnapshotRepository(\"myUrlRepo\", url=elasticstack.SnapshotRepositoryUrlArgs(\n    url=\"https://example.com/repo\",\n))\nmy_fs_repo = elasticstack.SnapshotRepository(\"myFsRepo\", fs=elasticstack.SnapshotRepositoryFsArgs(\n    compress=True,\n    location=\"/tmp\",\n    max_restore_bytes_per_sec=\"10mb\",\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUrlRepo = new Elasticstack.SnapshotRepository(\"myUrlRepo\", new()\n    {\n        Url = new Elasticstack.Inputs.SnapshotRepositoryUrlArgs\n        {\n            Url = \"https://example.com/repo\",\n        },\n    });\n\n    var myFsRepo = new Elasticstack.SnapshotRepository(\"myFsRepo\", new()\n    {\n        Fs = new Elasticstack.Inputs.SnapshotRepositoryFsArgs\n        {\n            Compress = true,\n            Location = \"/tmp\",\n            MaxRestoreBytesPerSec = \"10mb\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := elasticstack.NewSnapshotRepository(ctx, \"myUrlRepo\", \u0026elasticstack.SnapshotRepositoryArgs{\n\t\t\tUrl: \u0026elasticstack.SnapshotRepositoryUrlArgs{\n\t\t\t\tUrl: pulumi.String(\"https://example.com/repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewSnapshotRepository(ctx, \"myFsRepo\", \u0026elasticstack.SnapshotRepositoryArgs{\n\t\t\tFs: \u0026elasticstack.SnapshotRepositoryFsArgs{\n\t\t\t\tCompress:              pulumi.Bool(true),\n\t\t\t\tLocation:              pulumi.String(\"/tmp\"),\n\t\t\t\tMaxRestoreBytesPerSec: pulumi.String(\"10mb\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SnapshotRepository;\nimport com.pulumi.elasticstack.SnapshotRepositoryArgs;\nimport com.pulumi.elasticstack.inputs.SnapshotRepositoryUrlArgs;\nimport com.pulumi.elasticstack.inputs.SnapshotRepositoryFsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myUrlRepo = new SnapshotRepository(\"myUrlRepo\", SnapshotRepositoryArgs.builder()        \n            .url(SnapshotRepositoryUrlArgs.builder()\n                .url(\"https://example.com/repo\")\n                .build())\n            .build());\n\n        var myFsRepo = new SnapshotRepository(\"myFsRepo\", SnapshotRepositoryArgs.builder()        \n            .fs(SnapshotRepositoryFsArgs.builder()\n                .compress(true)\n                .location(\"/tmp\")\n                .maxRestoreBytesPerSec(\"10mb\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myUrlRepo:\n    type: elasticstack:SnapshotRepository\n    properties:\n      url:\n        url: https://example.com/repo\n  myFsRepo:\n    type: elasticstack:SnapshotRepository\n    properties:\n      fs:\n        compress: true\n        location: /tmp\n        maxRestoreBytesPerSec: 10mb\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/snapshotRepository:SnapshotRepository my_repository \u003ccluster_uuid\u003e/\u003crepository name\u003e\n```\n\n ",
            "properties": {
                "azure": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryAzure:SnapshotRepositoryAzure",
                    "description": "Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryElasticsearchConnection:SnapshotRepositoryElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "fs": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryFs:SnapshotRepositoryFs",
                    "description": "Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.\n"
                },
                "gcs": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryGcs:SnapshotRepositoryGcs",
                    "description": "Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html\n"
                },
                "hdfs": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryHdfs:SnapshotRepositoryHdfs",
                    "description": "Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the snapshot repository to register or update.\n"
                },
                "s3": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryS3:SnapshotRepositoryS3",
                    "description": "Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html\n"
                },
                "url": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryUrl:SnapshotRepositoryUrl",
                    "description": "URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.\n"
                },
                "verify": {
                    "type": "boolean",
                    "description": "If true, the request verifies the repository is functional on all master and data nodes in the cluster.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "azure": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryAzure:SnapshotRepositoryAzure",
                    "description": "Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html\n",
                    "willReplaceOnChanges": true
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryElasticsearchConnection:SnapshotRepositoryElasticsearchConnection",
                    "description": "Elasticsearch connection configuration block.\n"
                },
                "fs": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryFs:SnapshotRepositoryFs",
                    "description": "Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "gcs": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryGcs:SnapshotRepositoryGcs",
                    "description": "Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html\n",
                    "willReplaceOnChanges": true
                },
                "hdfs": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryHdfs:SnapshotRepositoryHdfs",
                    "description": "Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the snapshot repository to register or update.\n",
                    "willReplaceOnChanges": true
                },
                "s3": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryS3:SnapshotRepositoryS3",
                    "description": "Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "$ref": "#/types/elasticstack:index/SnapshotRepositoryUrl:SnapshotRepositoryUrl",
                    "description": "URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.\n",
                    "willReplaceOnChanges": true
                },
                "verify": {
                    "type": "boolean",
                    "description": "If true, the request verifies the repository is functional on all master and data nodes in the cluster.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnapshotRepository resources.\n",
                "properties": {
                    "azure": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryAzure:SnapshotRepositoryAzure",
                        "description": "Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html\n",
                        "willReplaceOnChanges": true
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryElasticsearchConnection:SnapshotRepositoryElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "fs": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryFs:SnapshotRepositoryFs",
                        "description": "Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcs": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryGcs:SnapshotRepositoryGcs",
                        "description": "Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html\n",
                        "willReplaceOnChanges": true
                    },
                    "hdfs": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryHdfs:SnapshotRepositoryHdfs",
                        "description": "Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the snapshot repository to register or update.\n",
                        "willReplaceOnChanges": true
                    },
                    "s3": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryS3:SnapshotRepositoryS3",
                        "description": "Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "$ref": "#/types/elasticstack:index/SnapshotRepositoryUrl:SnapshotRepositoryUrl",
                        "description": "URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.\n",
                        "willReplaceOnChanges": true
                    },
                    "verify": {
                        "type": "boolean",
                        "description": "If true, the request verifies the repository is functional on all master and data nodes in the cluster.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "elasticstack:index/dataSecurityRole:DataSecurityRole": {
            "description": "Use this data source to get information about an existing Elasticsearch role. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst roleDataSecurityRole = elasticstack.DataSecurityRole({\n    name: \"testrole\",\n});\nexport const role = roleDataSecurityRole.then(roleDataSecurityRole =\u003e roleDataSecurityRole.name);\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nrole_data_security_role = elasticstack.data_security_role(name=\"testrole\")\npulumi.export(\"role\", role_data_security_role.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var roleDataSecurityRole = Elasticstack.DataSecurityRole.Invoke(new()\n    {\n        Name = \"testrole\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"role\"] = roleDataSecurityRole.Apply(dataSecurityRoleResult =\u003e dataSecurityRoleResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\troleDataSecurityRole, err := elasticstack.DataSecurityRole(ctx, \u0026elasticstack.DataSecurityRoleArgs{\n\t\t\tName: \"testrole\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"role\", roleDataSecurityRole.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.DataSecurityRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var roleDataSecurityRole = ElasticstackFunctions.DataSecurityRole(DataSecurityRoleArgs.builder()\n            .name(\"testrole\")\n            .build());\n\n        ctx.export(\"role\", roleDataSecurityRole.applyValue(dataSecurityRoleResult -\u003e dataSecurityRoleResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  roleDataSecurityRole:\n    fn::invoke:\n      Function: elasticstack:DataSecurityRole\n      Arguments:\n        name: testrole\noutputs:\n  role: ${roleDataSecurityRole.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking DataSecurityRole.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSecurityRoleElasticsearchConnection:DataSecurityRoleElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n"
                    },
                    "runAs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users that the owners of this role can impersonate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by DataSecurityRole.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSecurityRoleApplication:DataSecurityRoleApplication"
                        },
                        "description": "A list of application privilege entries.\n"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSecurityRoleElasticsearchConnection:DataSecurityRoleElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "global": {
                        "type": "string",
                        "description": "An object defining global privileges.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSecurityRoleIndex:DataSecurityRoleIndex"
                        },
                        "description": "A list of indices permissions entries.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional meta-data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n"
                    },
                    "runAs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users that the owners of this role can impersonate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "applications",
                    "clusters",
                    "global",
                    "id",
                    "indices",
                    "metadata",
                    "name"
                ]
            }
        },
        "elasticstack:index/dataSecurityRoleMapping:DataSecurityRoleMapping": {
            "description": "Retrieves role mappings. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst mapping = elasticstack.DataSecurityRoleMapping({\n    name: \"my_mapping\",\n});\nexport const user = mapping.then(mapping =\u003e mapping.name);\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nmapping = elasticstack.data_security_role_mapping(name=\"my_mapping\")\npulumi.export(\"user\", mapping.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mapping = Elasticstack.DataSecurityRoleMapping.Invoke(new()\n    {\n        Name = \"my_mapping\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"user\"] = mapping.Apply(dataSecurityRoleMappingResult =\u003e dataSecurityRoleMappingResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmapping, err := elasticstack.DataSecurityRoleMapping(ctx, \u0026elasticstack.DataSecurityRoleMappingArgs{\n\t\t\tName: \"my_mapping\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"user\", mapping.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.DataSecurityRoleMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mapping = ElasticstackFunctions.DataSecurityRoleMapping(DataSecurityRoleMappingArgs.builder()\n            .name(\"my_mapping\")\n            .build());\n\n        ctx.export(\"user\", mapping.applyValue(dataSecurityRoleMappingResult -\u003e dataSecurityRoleMappingResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  mapping:\n    fn::invoke:\n      Function: elasticstack:DataSecurityRoleMapping\n      Arguments:\n        name: my_mapping\noutputs:\n  user: ${mapping.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking DataSecurityRoleMapping.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSecurityRoleMappingElasticsearchConnection:DataSecurityRoleMappingElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The distinct name that identifies the role mapping, used solely as an identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by DataSecurityRoleMapping.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSecurityRoleMappingElasticsearchConnection:DataSecurityRoleMappingElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Mappings that have `enabled` set to `false` are ignored when role mapping is performed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The distinct name that identifies the role mapping, used solely as an identifier.\n"
                    },
                    "roleTemplates": {
                        "type": "string",
                        "description": "A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of role names that are granted to the users that match the role mapping rules.\n"
                    },
                    "rules": {
                        "type": "string",
                        "description": "The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.\n"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "id",
                    "metadata",
                    "name",
                    "roleTemplates",
                    "roles",
                    "rules"
                ]
            }
        },
        "elasticstack:index/dataSecurityUser:DataSecurityUser": {
            "description": "Use this data source to get information about existing Elasticsearch user. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user.html\".\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst userDataSecurityUser = elasticstack.DataSecurityUser({\n    username: \"elastic\",\n});\nexport const user = userDataSecurityUser;\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nuser_data_security_user = elasticstack.data_security_user(username=\"elastic\")\npulumi.export(\"user\", user_data_security_user)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var userDataSecurityUser = Elasticstack.DataSecurityUser.Invoke(new()\n    {\n        Username = \"elastic\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"user\"] = userDataSecurityUser.Apply(dataSecurityUserResult =\u003e dataSecurityUserResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuserDataSecurityUser, err := elasticstack.DataSecurityUser(ctx, \u0026elasticstack.DataSecurityUserArgs{\n\t\t\tUsername: \"elastic\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"user\", userDataSecurityUser)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.DataSecurityUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var userDataSecurityUser = ElasticstackFunctions.DataSecurityUser(DataSecurityUserArgs.builder()\n            .username(\"elastic\")\n            .build());\n\n        ctx.export(\"user\", userDataSecurityUser.applyValue(dataSecurityUserResult -\u003e dataSecurityUserResult));\n    }\n}\n```\n```yaml\nvariables:\n  userDataSecurityUser:\n    fn::invoke:\n      Function: elasticstack:DataSecurityUser\n      Arguments:\n        username: elastic\noutputs:\n  user: ${userDataSecurityUser}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking DataSecurityUser.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSecurityUserElasticsearchConnection:DataSecurityUserElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "An identifier for the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by DataSecurityUser.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSecurityUserElasticsearchConnection:DataSecurityUserElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the user is enabled. The default value is true.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Arbitrary metadata that you want to associate with the user.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "An identifier for the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "enabled",
                    "fullName",
                    "id",
                    "metadata",
                    "roles",
                    "username"
                ]
            }
        },
        "elasticstack:index/dataSnapshotRepository:DataSnapshotRepository": {
            "description": "This data source provides the information about the registered snaphosts repositories\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst myUrlRepoSnapshotRepository = new elasticstack.SnapshotRepository(\"myUrlRepoSnapshotRepository\", {url: {\n    url: \"https://example.com/repo\",\n}});\nconst myFsRepoSnapshotRepository = new elasticstack.SnapshotRepository(\"myFsRepoSnapshotRepository\", {fs: {\n    location: \"/tmp\",\n    compress: true,\n    maxRestoreBytesPerSec: \"10mb\",\n}});\nconst myFsRepoDataSnapshotRepository = elasticstack.DataSnapshotRepositoryOutput({\n    name: myFsRepoSnapshotRepository.name,\n});\nconst myUrlRepoDataSnapshotRepository = elasticstack.DataSnapshotRepositoryOutput({\n    name: myUrlRepoSnapshotRepository.name,\n});\nexport const repoFsLocation = myFsRepoSnapshotRepository.fs.apply(fs =\u003e fs?.location);\nexport const repoUrl = myUrlRepoSnapshotRepository.url.apply(url =\u003e url?.url);\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nmy_url_repo_snapshot_repository = elasticstack.SnapshotRepository(\"myUrlRepoSnapshotRepository\", url=elasticstack.SnapshotRepositoryUrlArgs(\n    url=\"https://example.com/repo\",\n))\nmy_fs_repo_snapshot_repository = elasticstack.SnapshotRepository(\"myFsRepoSnapshotRepository\", fs=elasticstack.SnapshotRepositoryFsArgs(\n    location=\"/tmp\",\n    compress=True,\n    max_restore_bytes_per_sec=\"10mb\",\n))\nmy_fs_repo_data_snapshot_repository = elasticstack.data_snapshot_repository_output(name=my_fs_repo_snapshot_repository.name)\nmy_url_repo_data_snapshot_repository = elasticstack.data_snapshot_repository_output(name=my_url_repo_snapshot_repository.name)\npulumi.export(\"repoFsLocation\", my_fs_repo_snapshot_repository.fs.location)\npulumi.export(\"repoUrl\", my_url_repo_snapshot_repository.url.url)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUrlRepoSnapshotRepository = new Elasticstack.SnapshotRepository(\"myUrlRepoSnapshotRepository\", new()\n    {\n        Url = new Elasticstack.Inputs.SnapshotRepositoryUrlArgs\n        {\n            Url = \"https://example.com/repo\",\n        },\n    });\n\n    var myFsRepoSnapshotRepository = new Elasticstack.SnapshotRepository(\"myFsRepoSnapshotRepository\", new()\n    {\n        Fs = new Elasticstack.Inputs.SnapshotRepositoryFsArgs\n        {\n            Location = \"/tmp\",\n            Compress = true,\n            MaxRestoreBytesPerSec = \"10mb\",\n        },\n    });\n\n    var myFsRepoDataSnapshotRepository = Elasticstack.DataSnapshotRepository.Invoke(new()\n    {\n        Name = myFsRepoSnapshotRepository.Name,\n    });\n\n    var myUrlRepoDataSnapshotRepository = Elasticstack.DataSnapshotRepository.Invoke(new()\n    {\n        Name = myUrlRepoSnapshotRepository.Name,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"repoFsLocation\"] = myFsRepoSnapshotRepository.Fs.Apply(fs =\u003e fs?.Location),\n        [\"repoUrl\"] = myUrlRepoSnapshotRepository.Url.Apply(url =\u003e url?.Url),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyUrlRepoSnapshotRepository, err := elasticstack.NewSnapshotRepository(ctx, \"myUrlRepoSnapshotRepository\", \u0026elasticstack.SnapshotRepositoryArgs{\n\t\t\tUrl: \u0026elasticstack.SnapshotRepositoryUrlArgs{\n\t\t\t\tUrl: pulumi.String(\"https://example.com/repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyFsRepoSnapshotRepository, err := elasticstack.NewSnapshotRepository(ctx, \"myFsRepoSnapshotRepository\", \u0026elasticstack.SnapshotRepositoryArgs{\n\t\t\tFs: \u0026elasticstack.SnapshotRepositoryFsArgs{\n\t\t\t\tLocation:              pulumi.String(\"/tmp\"),\n\t\t\t\tCompress:              pulumi.Bool(true),\n\t\t\t\tMaxRestoreBytesPerSec: pulumi.String(\"10mb\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = elasticstack.DataSnapshotRepositoryOutput(ctx, elasticstack.DataSnapshotRepositoryOutputArgs{\n\t\t\tName: myFsRepoSnapshotRepository.Name,\n\t\t}, nil)\n\t\t_ = elasticstack.DataSnapshotRepositoryOutput(ctx, elasticstack.DataSnapshotRepositoryOutputArgs{\n\t\t\tName: myUrlRepoSnapshotRepository.Name,\n\t\t}, nil)\n\t\tctx.Export(\"repoFsLocation\", myFsRepoSnapshotRepository.Fs.ApplyT(func(fs elasticstack.SnapshotRepositoryFs) (*string, error) {\n\t\t\treturn \u0026fs.Location, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\tctx.Export(\"repoUrl\", myUrlRepoSnapshotRepository.Url.ApplyT(func(url elasticstack.SnapshotRepositoryUrl) (*string, error) {\n\t\t\treturn \u0026url.Url, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.SnapshotRepository;\nimport com.pulumi.elasticstack.SnapshotRepositoryArgs;\nimport com.pulumi.elasticstack.inputs.SnapshotRepositoryUrlArgs;\nimport com.pulumi.elasticstack.inputs.SnapshotRepositoryFsArgs;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.DataSnapshotRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myUrlRepoSnapshotRepository = new SnapshotRepository(\"myUrlRepoSnapshotRepository\", SnapshotRepositoryArgs.builder()        \n            .url(SnapshotRepositoryUrlArgs.builder()\n                .url(\"https://example.com/repo\")\n                .build())\n            .build());\n\n        var myFsRepoSnapshotRepository = new SnapshotRepository(\"myFsRepoSnapshotRepository\", SnapshotRepositoryArgs.builder()        \n            .fs(SnapshotRepositoryFsArgs.builder()\n                .location(\"/tmp\")\n                .compress(true)\n                .maxRestoreBytesPerSec(\"10mb\")\n                .build())\n            .build());\n\n        final var myFsRepoDataSnapshotRepository = ElasticstackFunctions.DataSnapshotRepository(DataSnapshotRepositoryArgs.builder()\n            .name(myFsRepoSnapshotRepository.name())\n            .build());\n\n        final var myUrlRepoDataSnapshotRepository = ElasticstackFunctions.DataSnapshotRepository(DataSnapshotRepositoryArgs.builder()\n            .name(myUrlRepoSnapshotRepository.name())\n            .build());\n\n        ctx.export(\"repoFsLocation\", myFsRepoSnapshotRepository.fs().applyValue(fs -\u003e fs.location()));\n        ctx.export(\"repoUrl\", myUrlRepoSnapshotRepository.url().applyValue(url -\u003e url.url()));\n    }\n}\n```\n```yaml\nresources:\n  myUrlRepoSnapshotRepository:\n    type: elasticstack:SnapshotRepository\n    properties:\n      url:\n        url: https://example.com/repo\n  myFsRepoSnapshotRepository:\n    type: elasticstack:SnapshotRepository\n    properties:\n      fs:\n        location: /tmp\n        compress: true\n        maxRestoreBytesPerSec: 10mb\nvariables:\n  myFsRepoDataSnapshotRepository:\n    fn::invoke:\n      Function: elasticstack:DataSnapshotRepository\n      Arguments:\n        name: ${myFsRepoSnapshotRepository.name}\n  myUrlRepoDataSnapshotRepository:\n    fn::invoke:\n      Function: elasticstack:DataSnapshotRepository\n      Arguments:\n        name: ${myUrlRepoSnapshotRepository.name}\noutputs:\n  repoFsLocation: ${myFsRepoSnapshotRepository.fs.location}\n  repoUrl: ${myUrlRepoSnapshotRepository.url.url}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking DataSnapshotRepository.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryElasticsearchConnection:DataSnapshotRepositoryElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the snapshot repository.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by DataSnapshotRepository.\n",
                "properties": {
                    "azures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryAzure:DataSnapshotRepositoryAzure"
                        },
                        "description": "Azure Blob storage as a repository. Set only if the type of the fetched repo is `azure`.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryElasticsearchConnection:DataSnapshotRepositoryElasticsearchConnection",
                        "description": "Elasticsearch connection configuration block.\n"
                    },
                    "fs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryF:DataSnapshotRepositoryF"
                        },
                        "description": "Shared filesystem repository. Set only if the type of the fetched repo is `fs`.\n"
                    },
                    "gcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryGc:DataSnapshotRepositoryGc"
                        },
                        "description": "Google Cloud Storage service as a repository. Set only if the type of the fetched repo is `gcs`.\n"
                    },
                    "hdfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryHdf:DataSnapshotRepositoryHdf"
                        },
                        "description": "HDFS File System as a repository. Set only if the type of the fetched repo is `hdfs`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the snapshot repository.\n"
                    },
                    "s3s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryS3:DataSnapshotRepositoryS3"
                        },
                        "description": "AWS S3 as a repository. Set only if the type of the fetched repo is `s3`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Repository type.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/DataSnapshotRepositoryUrl:DataSnapshotRepositoryUrl"
                        },
                        "description": "URL repository. Set only if the type of the fetched repo is `url`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "azures",
                    "fs",
                    "gcs",
                    "hdfs",
                    "id",
                    "name",
                    "s3s",
                    "type",
                    "urls"
                ]
            }
        },
        "elasticstack:index/ingestProcessorAppend:IngestProcessorAppend": {
            "description": "Helper data source to which can be used to create a processor to append one or more values to an existing array if the field already exists and it is an array.\nConverts a scalar to an array and appends one or more values to it if the field exists and it is a scalar. Creates an array containing the provided values if the field doesn’t exist.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/append-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst tags = elasticstack.IngestProcessorAppend({\n    field: \"tags\",\n    values: [\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [tags.then(tags =\u003e tags.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ntags = elasticstack.ingest_processor_append(field=\"tags\",\n    values=[\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ])\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[tags.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tags = Elasticstack.IngestProcessorAppend.Invoke(new()\n    {\n        Field = \"tags\",\n        Values = new[]\n        {\n            \"production\",\n            \"{{{app}}}\",\n            \"{{{owner}}}\",\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            tags.Apply(ingestProcessorAppendResult =\u003e ingestProcessorAppendResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttags, err := elasticstack.IngestProcessorAppend(ctx, \u0026elasticstack.IngestProcessorAppendArgs{\n\t\t\tField: \"tags\",\n\t\t\tValues: []string{\n\t\t\t\t\"production\",\n\t\t\t\t\"{{{app}}}\",\n\t\t\t\t\"{{{owner}}}\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(tags.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorAppendArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tags = ElasticstackFunctions.IngestProcessorAppend(IngestProcessorAppendArgs.builder()\n            .field(\"tags\")\n            .values(            \n                \"production\",\n                \"{{{app}}}\",\n                \"{{{owner}}}\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(tags.applyValue(ingestProcessorAppendResult -\u003e ingestProcessorAppendResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${tags.json}\nvariables:\n  tags:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorAppend\n      Arguments:\n        field: tags\n        values:\n          - production\n          - '{{{app}}}'\n          - '{{{owner}}}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorAppend.\n",
                "properties": {
                    "allowDuplicates": {
                        "type": "boolean",
                        "description": "If `false`, the processor does not append values already present in the field.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be appended to.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value. Applies only when value is a template snippet. Must be one of `application/json`, `text/plain`, or `application/x-www-form-urlencoded`. Supported only from Elasticsearch version **7.15**.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The value to be appended.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "values"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorAppend.\n",
                "properties": {
                    "allowDuplicates": {
                        "type": "boolean",
                        "description": "If `false`, the processor does not append values already present in the field.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be appended to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value. Applies only when value is a template snippet. Must be one of `application/json`, `text/plain`, or `application/x-www-form-urlencoded`. Supported only from Elasticsearch version **7.15**.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The value to be appended.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "values"
                ]
            }
        },
        "elasticstack:index/ingestProcessorBytes:IngestProcessorBytes": {
            "description": "Helper data source to which can be used to create a processor to convert a human readable byte value (e.g. 1kb) to its value in bytes (e.g. 1024). If the field is an array of strings, all members of the array will be converted.\n\nSupported human readable units are \"b\", \"kb\", \"mb\", \"gb\", \"tb\", \"pb\" case insensitive. An error will occur if the field is not a supported format or resultant value exceeds 2^63.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/bytes-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst bytes = elasticstack.IngestProcessorBytes({\n    field: \"file.size\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [bytes.then(bytes =\u003e bytes.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nbytes = elasticstack.ingest_processor_bytes(field=\"file.size\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[bytes.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bytes = Elasticstack.IngestProcessorBytes.Invoke(new()\n    {\n        Field = \"file.size\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            bytes.Apply(ingestProcessorBytesResult =\u003e ingestProcessorBytesResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbytes, err := elasticstack.IngestProcessorBytes(ctx, \u0026elasticstack.IngestProcessorBytesArgs{\n\t\t\tField: \"file.size\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(bytes.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorBytesArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var bytes = ElasticstackFunctions.IngestProcessorBytes(IngestProcessorBytesArgs.builder()\n            .field(\"file.size\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(bytes.applyValue(ingestProcessorBytesResult -\u003e ingestProcessorBytesResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${bytes.json}\nvariables:\n  bytes:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorBytes\n      Arguments:\n        field: file.size\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorBytes.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to convert\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorBytes.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to convert\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorCircle:IngestProcessorCircle": {
            "description": "Helper data source to which can be used to create a processor to convert circle definitions of shapes to regular polygons which approximate them.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst circle = elasticstack.IngestProcessorCircle({\n    field: \"circle\",\n    errorDistance: 28.1,\n    shapeType: \"geo_shape\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [circle.then(circle =\u003e circle.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ncircle = elasticstack.ingest_processor_circle(field=\"circle\",\n    error_distance=28.1,\n    shape_type=\"geo_shape\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[circle.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var circle = Elasticstack.IngestProcessorCircle.Invoke(new()\n    {\n        Field = \"circle\",\n        ErrorDistance = 28.1,\n        ShapeType = \"geo_shape\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            circle.Apply(ingestProcessorCircleResult =\u003e ingestProcessorCircleResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcircle, err := elasticstack.IngestProcessorCircle(ctx, \u0026elasticstack.IngestProcessorCircleArgs{\n\t\t\tField:         \"circle\",\n\t\t\tErrorDistance: 28.1,\n\t\t\tShapeType:     \"geo_shape\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(circle.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorCircleArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var circle = ElasticstackFunctions.IngestProcessorCircle(IngestProcessorCircleArgs.builder()\n            .field(\"circle\")\n            .errorDistance(28.1)\n            .shapeType(\"geo_shape\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(circle.applyValue(ingestProcessorCircleResult -\u003e ingestProcessorCircleResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${circle.json}\nvariables:\n  circle:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorCircle\n      Arguments:\n        field: circle\n        errorDistance: 28.1\n        shapeType: geo_shape\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorCircle.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "errorDistance": {
                        "type": "number",
                        "description": "The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geo_shape`, unit-less for `shape`)\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "shapeType": {
                        "type": "string",
                        "description": "Which field mapping type is to be used when processing the circle.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "errorDistance",
                    "field",
                    "shapeType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorCircle.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "errorDistance": {
                        "type": "number",
                        "description": "The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geo_shape`, unit-less for `shape`)\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "shapeType": {
                        "type": "string",
                        "description": "Which field mapping type is to be used when processing the circle.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "errorDistance",
                    "field",
                    "id",
                    "json",
                    "shapeType"
                ]
            }
        },
        "elasticstack:index/ingestProcessorCommunityId:IngestProcessorCommunityId": {
            "description": "Helper data source to which can be used to create a processor to compute the Community ID for network flow data as defined in the [Community ID Specification](https://github.com/corelight/community-id-spec). \nYou can use a community ID to correlate network events related to a single flow.\n\nThe community ID processor reads network flow data from related [Elastic Common Schema (ECS)](https://www.elastic.co/guide/en/ecs/1.12) fields by default. If you use the ECS, no configuration is required.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/community-id-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst community = elasticstack.IngestProcessorCommunityId({});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [community.then(community =\u003e community.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ncommunity = elasticstack.ingest_processor_community_id()\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[community.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var community = Elasticstack.IngestProcessorCommunityId.Invoke();\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            community.Apply(ingestProcessorCommunityIdResult =\u003e ingestProcessorCommunityIdResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcommunity, err := elasticstack.IngestProcessorCommunityId(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(community.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorCommunityIdArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var community = ElasticstackFunctions.IngestProcessorCommunityId();\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(community.applyValue(ingestProcessorCommunityIdResult -\u003e ingestProcessorCommunityIdResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${community.json}\nvariables:\n  community:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorCommunityId\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorCommunityId.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "destinationPort": {
                        "type": "integer",
                        "description": "Field containing the destination port.\n"
                    },
                    "ianaNumber": {
                        "type": "integer",
                        "description": "Field containing the IANA number.\n"
                    },
                    "icmpCode": {
                        "type": "integer",
                        "description": "Field containing the ICMP code.\n"
                    },
                    "icmpType": {
                        "type": "integer",
                        "description": "Field containing the ICMP type.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "sourcePort": {
                        "type": "integer",
                        "description": "Field containing the source port.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the community ID.\n"
                    },
                    "transport": {
                        "type": "string",
                        "description": "Field containing the transport protocol. Used only when the `iana_number` field is not present.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorCommunityId.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "destinationPort": {
                        "type": "integer",
                        "description": "Field containing the destination port.\n"
                    },
                    "ianaNumber": {
                        "type": "integer",
                        "description": "Field containing the IANA number.\n"
                    },
                    "icmpCode": {
                        "type": "integer",
                        "description": "Field containing the ICMP code.\n"
                    },
                    "icmpType": {
                        "type": "integer",
                        "description": "Field containing the ICMP type.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "sourcePort": {
                        "type": "integer",
                        "description": "Field containing the source port.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the community ID.\n"
                    },
                    "transport": {
                        "type": "string",
                        "description": "Field containing the transport protocol. Used only when the `iana_number` field is not present.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorConvert:IngestProcessorConvert": {
            "description": "Helper data source to which can be used to convert a field in the currently ingested document to a different type, such as converting a string to an integer. If the field value is an array, all members will be converted.\n\nThe supported types include: `integer`, `long`, `float`, `double`, `string`, `boolean`, `ip`, and `auto`.\n\nSpecifying `boolean` will set the field to true if its string value is equal to true (ignore case), to false if its string value is equal to false (ignore case), or it will throw an exception otherwise.\n\nSpecifying `ip` will set the target field to the value of `field` if it contains a valid IPv4 or IPv6 address that can be indexed into an IP field type.\n\nSpecifying `auto` will attempt to convert the string-valued `field` into the closest non-string, non-IP type. For example, a field whose value is \"true\" will be converted to its respective boolean type: true. Do note that float takes precedence of double in auto. A value of \"242.15\" will \"automatically\" be converted to 242.15 of type `float`. If a provided field cannot be appropriately converted, the processor will still process successfully and leave the field value as-is. In such a case, `target_field` will be updated with the unconverted field value.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/convert-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst convert = elasticstack.IngestProcessorConvert({\n    description: \"converts the content of the id field to an integer\",\n    field: \"id\",\n    type: \"integer\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [convert.then(convert =\u003e convert.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nconvert = elasticstack.ingest_processor_convert(description=\"converts the content of the id field to an integer\",\n    field=\"id\",\n    type=\"integer\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[convert.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var convert = Elasticstack.IngestProcessorConvert.Invoke(new()\n    {\n        Description = \"converts the content of the id field to an integer\",\n        Field = \"id\",\n        Type = \"integer\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            convert.Apply(ingestProcessorConvertResult =\u003e ingestProcessorConvertResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tconvert, err := elasticstack.IngestProcessorConvert(ctx, \u0026elasticstack.IngestProcessorConvertArgs{\n\t\t\tDescription: pulumi.StringRef(\"converts the content of the id field to an integer\"),\n\t\t\tField:       \"id\",\n\t\t\tType:        \"integer\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(convert.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorConvertArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var convert = ElasticstackFunctions.IngestProcessorConvert(IngestProcessorConvertArgs.builder()\n            .description(\"converts the content of the id field to an integer\")\n            .field(\"id\")\n            .type(\"integer\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(convert.applyValue(ingestProcessorConvertResult -\u003e ingestProcessorConvertResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${convert.json}\nvariables:\n  convert:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorConvert\n      Arguments:\n        description: converts the content of the id field to an integer\n        field: id\n        type: integer\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorConvert.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field whose value is to be converted.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type to convert the existing value to\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorConvert.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field whose value is to be converted.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type to convert the existing value to\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "type"
                ]
            }
        },
        "elasticstack:index/ingestProcessorCsv:IngestProcessorCsv": {
            "description": "Helper data source to which can be used to extract fields from CSV line out of a single text field within a document. Any empty field in CSV will be skipped.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/csv-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst csv = elasticstack.IngestProcessorCsv({\n    field: \"my_field\",\n    targetFields: [\n        \"field1\",\n        \"field2\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [csv.then(csv =\u003e csv.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ncsv = elasticstack.ingest_processor_csv(field=\"my_field\",\n    target_fields=[\n        \"field1\",\n        \"field2\",\n    ])\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[csv.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var csv = Elasticstack.IngestProcessorCsv.Invoke(new()\n    {\n        Field = \"my_field\",\n        TargetFields = new[]\n        {\n            \"field1\",\n            \"field2\",\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            csv.Apply(ingestProcessorCsvResult =\u003e ingestProcessorCsvResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcsv, err := elasticstack.IngestProcessorCsv(ctx, \u0026elasticstack.IngestProcessorCsvArgs{\n\t\t\tField: \"my_field\",\n\t\t\tTargetFields: []string{\n\t\t\t\t\"field1\",\n\t\t\t\t\"field2\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(csv.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorCsvArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csv = ElasticstackFunctions.IngestProcessorCsv(IngestProcessorCsvArgs.builder()\n            .field(\"my_field\")\n            .targetFields(            \n                \"field1\",\n                \"field2\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(csv.applyValue(ingestProcessorCsvResult -\u003e ingestProcessorCsvResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${csv.json}\nvariables:\n  csv:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorCsv\n      Arguments:\n        field: my_field\n        targetFields:\n          - field1\n          - field2\n```\n\nIf the `trim` option is enabled then any whitespace in the beginning and in the end of each unquoted field will be trimmed. For example with configuration above, a value of A, B will result in field field2 having value {nbsp}B (with space at the beginning). If trim is enabled A, B will result in field field2 having value B (no whitespace). Quoted fields will be left untouched.\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorCsv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "emptyValue": {
                        "type": "string",
                        "description": "Value used to fill empty fields, empty fields will be skipped if this is not provided.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to extract data from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "quote": {
                        "type": "string",
                        "description": "Quote used in CSV, has to be single character string\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "Separator used in CSV, has to be single character string.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The array of fields to assign extracted values to.\n"
                    },
                    "trim": {
                        "type": "boolean",
                        "description": "Trim whitespaces in unquoted fields.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "targetFields"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorCsv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "emptyValue": {
                        "type": "string",
                        "description": "Value used to fill empty fields, empty fields will be skipped if this is not provided.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to extract data from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "quote": {
                        "type": "string",
                        "description": "Quote used in CSV, has to be single character string\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "Separator used in CSV, has to be single character string.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The array of fields to assign extracted values to.\n"
                    },
                    "trim": {
                        "type": "boolean",
                        "description": "Trim whitespaces in unquoted fields.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "targetFields"
                ]
            }
        },
        "elasticstack:index/ingestProcessorDate:IngestProcessorDate": {
            "description": "Helper data source to which can be used to parse dates from fields, and then uses the date or timestamp as the timestamp for the document. \nBy default, the date processor adds the parsed date as a new field called `@timestamp`. You can specify a different field by setting the `target_field` configuration parameter. Multiple date formats are supported as part of the same date processor definition. They will be used sequentially to attempt parsing the date field, in the same order they were defined as part of the processor definition.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/date-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nHere is an example that adds the parsed date to the `timestamp` field based on the `initial_date` field:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst date = elasticstack.IngestProcessorDate({\n    field: \"initial_date\",\n    targetField: \"timestamp\",\n    formats: [\"dd/MM/yyyy HH:mm:ss\"],\n    timezone: \"Europe/Amsterdam\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [date.then(date =\u003e date.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndate = elasticstack.ingest_processor_date(field=\"initial_date\",\n    target_field=\"timestamp\",\n    formats=[\"dd/MM/yyyy HH:mm:ss\"],\n    timezone=\"Europe/Amsterdam\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[date.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var date = Elasticstack.IngestProcessorDate.Invoke(new()\n    {\n        Field = \"initial_date\",\n        TargetField = \"timestamp\",\n        Formats = new[]\n        {\n            \"dd/MM/yyyy HH:mm:ss\",\n        },\n        Timezone = \"Europe/Amsterdam\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            date.Apply(ingestProcessorDateResult =\u003e ingestProcessorDateResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdate, err := elasticstack.IngestProcessorDate(ctx, \u0026elasticstack.IngestProcessorDateArgs{\n\t\t\tField:       \"initial_date\",\n\t\t\tTargetField: pulumi.StringRef(\"timestamp\"),\n\t\t\tFormats: []string{\n\t\t\t\t\"dd/MM/yyyy HH:mm:ss\",\n\t\t\t},\n\t\t\tTimezone: pulumi.StringRef(\"Europe/Amsterdam\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(date.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorDateArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var date = ElasticstackFunctions.IngestProcessorDate(IngestProcessorDateArgs.builder()\n            .field(\"initial_date\")\n            .targetField(\"timestamp\")\n            .formats(\"dd/MM/yyyy HH:mm:ss\")\n            .timezone(\"Europe/Amsterdam\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(date.applyValue(ingestProcessorDateResult -\u003e ingestProcessorDateResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${date.json}\nvariables:\n  date:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorDate\n      Arguments:\n        field: initial_date\n        targetField: timestamp\n        formats:\n          - dd/MM/yyyy HH:mm:ss\n        timezone: Europe/Amsterdam\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorDate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date from.\n"
                    },
                    "formats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "outputFormat": {
                        "type": "string",
                        "description": "The format to use when writing the date to `target_field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the parsed date.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "formats"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorDate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date from.\n"
                    },
                    "formats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "outputFormat": {
                        "type": "string",
                        "description": "The format to use when writing the date to `target_field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the parsed date.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "formats",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorDateIndexName:IngestProcessorDateIndexName": {
            "description": "The purpose of this processor is to point documents to the right time based index based on a date or timestamp field in a document by using the date math index name support.\n\nThe processor sets the _index metadata field with a date math index name expression based on the provided index name prefix, a date or timestamp field in the documents being processed and the provided date rounding.\n\nFirst, this processor fetches the date or timestamp from a field in the document being processed. Optionally, date formatting can be configured on how the field’s value should be parsed into a date. Then this date, the provided index name prefix and the provided date rounding get formatted into a date math index name expression. Also here optionally date formatting can be specified on how the date should be formatted into a date math index name expression.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/date-index-name-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst dateIndexName = elasticstack.IngestProcessorDateIndexName({\n    description: \"monthly date-time index naming\",\n    field: \"date1\",\n    indexNamePrefix: \"my-index-\",\n    dateRounding: \"M\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [dateIndexName.then(dateIndexName =\u003e dateIndexName.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndate_index_name = elasticstack.ingest_processor_date_index_name(description=\"monthly date-time index naming\",\n    field=\"date1\",\n    index_name_prefix=\"my-index-\",\n    date_rounding=\"M\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[date_index_name.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dateIndexName = Elasticstack.IngestProcessorDateIndexName.Invoke(new()\n    {\n        Description = \"monthly date-time index naming\",\n        Field = \"date1\",\n        IndexNamePrefix = \"my-index-\",\n        DateRounding = \"M\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            dateIndexName.Apply(ingestProcessorDateIndexNameResult =\u003e ingestProcessorDateIndexNameResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdateIndexName, err := elasticstack.IngestProcessorDateIndexName(ctx, \u0026elasticstack.IngestProcessorDateIndexNameArgs{\n\t\t\tDescription:     pulumi.StringRef(\"monthly date-time index naming\"),\n\t\t\tField:           \"date1\",\n\t\t\tIndexNamePrefix: pulumi.StringRef(\"my-index-\"),\n\t\t\tDateRounding:    \"M\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(dateIndexName.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorDateIndexNameArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dateIndexName = ElasticstackFunctions.IngestProcessorDateIndexName(IngestProcessorDateIndexNameArgs.builder()\n            .description(\"monthly date-time index naming\")\n            .field(\"date1\")\n            .indexNamePrefix(\"my-index-\")\n            .dateRounding(\"M\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(dateIndexName.applyValue(ingestProcessorDateIndexNameResult -\u003e ingestProcessorDateIndexNameResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${dateIndexName.json}\nvariables:\n  dateIndexName:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorDateIndexName\n      Arguments:\n        description: monthly date-time index naming\n        field: date1\n        indexNamePrefix: my-index-\n        dateRounding: M\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorDateIndexName.\n",
                "properties": {
                    "dateFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.\n"
                    },
                    "dateRounding": {
                        "type": "string",
                        "description": "How to round the date when formatting the date into the index name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date or timestamp from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "indexNameFormat": {
                        "type": "string",
                        "description": "The format to be used when printing the parsed date into the index name.\n"
                    },
                    "indexNamePrefix": {
                        "type": "string",
                        "description": "A prefix of the index name to be prepended before the printed date.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateRounding",
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorDateIndexName.\n",
                "properties": {
                    "dateFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.\n"
                    },
                    "dateRounding": {
                        "type": "string",
                        "description": "How to round the date when formatting the date into the index name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date or timestamp from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "indexNameFormat": {
                        "type": "string",
                        "description": "The format to be used when printing the parsed date into the index name.\n"
                    },
                    "indexNamePrefix": {
                        "type": "string",
                        "description": "A prefix of the index name to be prepended before the printed date.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateRounding",
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorDissect:IngestProcessorDissect": {
            "description": "Similar to the Grok Processor, dissect also extracts structured fields out of a single text field within a document. However unlike the Grok Processor, dissect does not use Regular Expressions. This allows dissect’s syntax to be simple and for some cases faster than the Grok Processor.\n\nDissect matches a single text field against a defined pattern.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/dissect-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst dissect = elasticstack.IngestProcessorDissect({\n    field: \"message\",\n    pattern: `%{clientip} %{ident} %{auth} [%{@timestamp}] \"%{verb} %{request} HTTP/%{httpversion}\" %{status} %{size}`,\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [dissect.then(dissect =\u003e dissect.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndissect = elasticstack.ingest_processor_dissect(field=\"message\",\n    pattern=\"%{clientip} %{ident} %{auth} [%{@timestamp}] \\\"%{verb} %{request} HTTP/%{httpversion}\\\" %{status} %{size}\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[dissect.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dissect = Elasticstack.IngestProcessorDissect.Invoke(new()\n    {\n        Field = \"message\",\n        Pattern = \"%{clientip} %{ident} %{auth} [%{@timestamp}] \\\"%{verb} %{request} HTTP/%{httpversion}\\\" %{status} %{size}\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            dissect.Apply(ingestProcessorDissectResult =\u003e ingestProcessorDissectResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdissect, err := elasticstack.IngestProcessorDissect(ctx, \u0026elasticstack.IngestProcessorDissectArgs{\n\t\t\tField:   \"message\",\n\t\t\tPattern: fmt.Sprintf(\"%vclientip} %vident} %vauth} [%v@timestamp}] \\\"%vverb} %vrequest} HTTP/%vhttpversion}\\\" %vstatus} %vsize}\", \"%{\", \"%{\", \"%{\", \"%{\", \"%{\", \"%{\", \"%{\", \"%{\", \"%{\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(dissect.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorDissectArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dissect = ElasticstackFunctions.IngestProcessorDissect(IngestProcessorDissectArgs.builder()\n            .field(\"message\")\n            .pattern(\"%{clientip} %{ident} %{auth} [%{@timestamp}] \\\"%{verb} %{request} HTTP/%{httpversion}\\\" %{status} %{size}\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(dissect.applyValue(ingestProcessorDissectResult -\u003e ingestProcessorDissectResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${dissect.json}\nvariables:\n  dissect:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorDissect\n      Arguments:\n        field: message\n        pattern: '%{clientip} %{ident} %{auth} [%{@timestamp}] \"%{verb} %{request} HTTP/%{httpversion}\" %{status} %{size}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorDissect.\n",
                "properties": {
                    "appendSeparator": {
                        "type": "string",
                        "description": "The character(s) that separate the appended fields.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to dissect.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to apply to the field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "pattern"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorDissect.\n",
                "properties": {
                    "appendSeparator": {
                        "type": "string",
                        "description": "The character(s) that separate the appended fields.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to dissect.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to apply to the field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "pattern"
                ]
            }
        },
        "elasticstack:index/ingestProcessorDotExpander:IngestProcessorDotExpander": {
            "description": "Expands a field with dots into an object field. This processor allows fields with dots in the name to be accessible by other processors in the pipeline. Otherwise these fields can’t be accessed by any processor.\n\nSee: elastic.co/guide/en/elasticsearch/reference/current/dot-expand-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst dotExpander = elasticstack.IngestProcessorDotExpander({\n    field: \"foo.bar\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [dotExpander.then(dotExpander =\u003e dotExpander.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndot_expander = elasticstack.ingest_processor_dot_expander(field=\"foo.bar\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[dot_expander.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dotExpander = Elasticstack.IngestProcessorDotExpander.Invoke(new()\n    {\n        Field = \"foo.bar\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            dotExpander.Apply(ingestProcessorDotExpanderResult =\u003e ingestProcessorDotExpanderResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdotExpander, err := elasticstack.IngestProcessorDotExpander(ctx, \u0026elasticstack.IngestProcessorDotExpanderArgs{\n\t\t\tField: \"foo.bar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(dotExpander.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorDotExpanderArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dotExpander = ElasticstackFunctions.IngestProcessorDotExpander(IngestProcessorDotExpanderArgs.builder()\n            .field(\"foo.bar\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(dotExpander.applyValue(ingestProcessorDotExpanderResult -\u003e ingestProcessorDotExpanderResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${dotExpander.json}\nvariables:\n  dotExpander:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorDotExpander\n      Arguments:\n        field: foo.bar\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorDotExpander.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to expand into an object field. If set to *, all top-level fields will be expanded.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "Controls the behavior when there is already an existing nested object that conflicts with the expanded field.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The field that contains the field to expand.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorDotExpander.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to expand into an object field. If set to *, all top-level fields will be expanded.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "Controls the behavior when there is already an existing nested object that conflicts with the expanded field.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The field that contains the field to expand.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorDrop:IngestProcessorDrop": {
            "description": "Drops the document without raising any errors. This is useful to prevent the document from getting indexed based on some condition.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/drop-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst drop = elasticstack.IngestProcessorDrop({\n    \"if\": \"ctx.network_name == 'Guest'\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [drop.then(drop =\u003e drop.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndrop = elasticstack.ingest_processor_drop(if_=\"ctx.network_name == 'Guest'\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[drop.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var drop = Elasticstack.IngestProcessorDrop.Invoke(new()\n    {\n        If = \"ctx.network_name == 'Guest'\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            drop.Apply(ingestProcessorDropResult =\u003e ingestProcessorDropResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdrop, err := elasticstack.IngestProcessorDrop(ctx, \u0026elasticstack.IngestProcessorDropArgs{\n\t\t\tIf: pulumi.StringRef(\"ctx.network_name == 'Guest'\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(drop.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorDropArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var drop = ElasticstackFunctions.IngestProcessorDrop(IngestProcessorDropArgs.builder()\n            .if_(\"ctx.network_name == 'Guest'\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(drop.applyValue(ingestProcessorDropResult -\u003e ingestProcessorDropResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${drop.json}\nvariables:\n  drop:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorDrop\n      Arguments:\n        if: ctx.network_name == 'Guest'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorDrop.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorDrop.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorEnrich:IngestProcessorEnrich": {
            "description": "The enrich processor can enrich documents with data from another index. See enrich data section for more information about how to set this up.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-enriching-data.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/enrich-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst enrich = elasticstack.IngestProcessorEnrich({\n    policyName: \"users-policy\",\n    field: \"email\",\n    targetField: \"user\",\n    maxMatches: 1,\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [enrich.then(enrich =\u003e enrich.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nenrich = elasticstack.ingest_processor_enrich(policy_name=\"users-policy\",\n    field=\"email\",\n    target_field=\"user\",\n    max_matches=1)\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[enrich.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var enrich = Elasticstack.IngestProcessorEnrich.Invoke(new()\n    {\n        PolicyName = \"users-policy\",\n        Field = \"email\",\n        TargetField = \"user\",\n        MaxMatches = 1,\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            enrich.Apply(ingestProcessorEnrichResult =\u003e ingestProcessorEnrichResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tenrich, err := elasticstack.IngestProcessorEnrich(ctx, \u0026elasticstack.IngestProcessorEnrichArgs{\n\t\t\tPolicyName:  \"users-policy\",\n\t\t\tField:       \"email\",\n\t\t\tTargetField: \"user\",\n\t\t\tMaxMatches:  pulumi.IntRef(1),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(enrich.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorEnrichArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var enrich = ElasticstackFunctions.IngestProcessorEnrich(IngestProcessorEnrichArgs.builder()\n            .policyName(\"users-policy\")\n            .field(\"email\")\n            .targetField(\"user\")\n            .maxMatches(1)\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(enrich.applyValue(ingestProcessorEnrichResult -\u003e ingestProcessorEnrichResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${enrich.json}\nvariables:\n  enrich:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorEnrich\n      Arguments:\n        policyName: users-policy\n        field: email\n        targetField: user\n        maxMatches: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorEnrich.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field in the input document that matches the policies match_field used to retrieve the enrichment data.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "maxMatches": {
                        "type": "integer",
                        "description": "The maximum number of matched documents to include under the configured target field.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The name of the enrich policy to use.\n"
                    },
                    "shapeRelation": {
                        "type": "string",
                        "description": "A spatial relation operator used to match the geoshape of incoming documents to documents in the enrich index.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Field added to incoming documents to contain enrich data.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "policyName",
                    "targetField"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorEnrich.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field in the input document that matches the policies match_field used to retrieve the enrichment data.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "maxMatches": {
                        "type": "integer",
                        "description": "The maximum number of matched documents to include under the configured target field.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The name of the enrich policy to use.\n"
                    },
                    "shapeRelation": {
                        "type": "string",
                        "description": "A spatial relation operator used to match the geoshape of incoming documents to documents in the enrich index.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Field added to incoming documents to contain enrich data.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "policyName",
                    "targetField"
                ]
            }
        },
        "elasticstack:index/ingestProcessorFail:IngestProcessorFail": {
            "description": "Raises an exception. This is useful for when you expect a pipeline to fail and want to relay a specific message to the requester.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/fail-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst fail = elasticstack.IngestProcessorFail({\n    \"if\": \"ctx.tags.contains('production') != true\",\n    message: \"The production tag is not present, found tags: {{{tags}}}\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [fail.then(fail =\u003e fail.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nfail = elasticstack.ingest_processor_fail(if_=\"ctx.tags.contains('production') != true\",\n    message=\"The production tag is not present, found tags: {{{tags}}}\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[fail.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fail = Elasticstack.IngestProcessorFail.Invoke(new()\n    {\n        If = \"ctx.tags.contains('production') != true\",\n        Message = \"The production tag is not present, found tags: {{{tags}}}\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            fail.Apply(ingestProcessorFailResult =\u003e ingestProcessorFailResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfail, err := elasticstack.IngestProcessorFail(ctx, \u0026elasticstack.IngestProcessorFailArgs{\n\t\t\tIf:      pulumi.StringRef(\"ctx.tags.contains('production') != true\"),\n\t\t\tMessage: \"The production tag is not present, found tags: {{{tags}}}\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(fail.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorFailArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fail = ElasticstackFunctions.IngestProcessorFail(IngestProcessorFailArgs.builder()\n            .if_(\"ctx.tags.contains('production') != true\")\n            .message(\"The production tag is not present, found tags: {{{tags}}}\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(fail.applyValue(ingestProcessorFailResult -\u003e ingestProcessorFailResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${fail.json}\nvariables:\n  fail:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorFail\n      Arguments:\n        if: ctx.tags.contains('production') != true\n        message: 'The production tag is not present, found tags: {{{tags}}}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorFail.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message thrown by the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "message"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorFail.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message thrown by the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json",
                    "message"
                ]
            }
        },
        "elasticstack:index/ingestProcessorFingerprint:IngestProcessorFingerprint": {
            "description": "Computes a hash of the document’s content. You can use this hash for content fingerprinting.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/fingerprint-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst fingerprint = elasticstack.IngestProcessorFingerprint({\n    fields: [\"user\"],\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [fingerprint.then(fingerprint =\u003e fingerprint.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nfingerprint = elasticstack.ingest_processor_fingerprint(fields=[\"user\"])\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[fingerprint.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fingerprint = Elasticstack.IngestProcessorFingerprint.Invoke(new()\n    {\n        Fields = new[]\n        {\n            \"user\",\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            fingerprint.Apply(ingestProcessorFingerprintResult =\u003e ingestProcessorFingerprintResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfingerprint, err := elasticstack.IngestProcessorFingerprint(ctx, \u0026elasticstack.IngestProcessorFingerprintArgs{\n\t\t\tFields: []string{\n\t\t\t\t\"user\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(fingerprint.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorFingerprintArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fingerprint = ElasticstackFunctions.IngestProcessorFingerprint(IngestProcessorFingerprintArgs.builder()\n            .fields(\"user\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(fingerprint.applyValue(ingestProcessorFingerprintResult -\u003e ingestProcessorFingerprintResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${fingerprint.json}\nvariables:\n  fingerprint:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorFingerprint\n      Arguments:\n        fields:\n          - user\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorFingerprint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of fields to include in the fingerprint.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The hash method used to compute the fingerprint.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "salt": {
                        "type": "string",
                        "description": "Salt value for the hash function.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the fingerprint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorFingerprint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of fields to include in the fingerprint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The hash method used to compute the fingerprint.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "salt": {
                        "type": "string",
                        "description": "Salt value for the hash function.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the fingerprint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorForeach:IngestProcessorForeach": {
            "description": "Runs an ingest processor on each element of an array or object.\n\nAll ingest processors can run on array or object elements. However, if the number of elements is unknown, it can be cumbersome to process each one in the same way.\n\nThe `foreach` processor lets you specify a `field` containing array or object values and a `processor` to run on each element in the field.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/foreach-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst convert = elasticstack.IngestProcessorConvert({\n    field: \"_ingest._value\",\n    type: \"integer\",\n});\nconst foreach = convert.then(convert =\u003e elasticstack.IngestProcessorForeach({\n    field: \"values\",\n    processor: convert.json,\n}));\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [foreach.then(foreach =\u003e foreach.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nconvert = elasticstack.ingest_processor_convert(field=\"_ingest._value\",\n    type=\"integer\")\nforeach = elasticstack.ingest_processor_foreach(field=\"values\",\n    processor=convert.json)\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[foreach.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var convert = Elasticstack.IngestProcessorConvert.Invoke(new()\n    {\n        Field = \"_ingest._value\",\n        Type = \"integer\",\n    });\n\n    var @foreach = Elasticstack.IngestProcessorForeach.Invoke(new()\n    {\n        Field = \"values\",\n        Processor = convert.Apply(ingestProcessorConvertResult =\u003e ingestProcessorConvertResult.Json),\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            @foreach.Apply(ingestProcessorForeachResult =\u003e ingestProcessorForeachResult).Apply(@foreach =\u003e @foreach.Apply(ingestProcessorForeachResult =\u003e ingestProcessorForeachResult.Json)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tconvert, err := elasticstack.IngestProcessorConvert(ctx, \u0026elasticstack.IngestProcessorConvertArgs{\n\t\t\tField: \"_ingest._value\",\n\t\t\tType:  \"integer\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tforeach, err := elasticstack.IngestProcessorForeach(ctx, \u0026elasticstack.IngestProcessorForeachArgs{\n\t\t\tField:     \"values\",\n\t\t\tProcessor: convert.Json,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(foreach.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorConvertArgs;\nimport com.pulumi.elasticstack.inputs.IngestProcessorForeachArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var convert = ElasticstackFunctions.IngestProcessorConvert(IngestProcessorConvertArgs.builder()\n            .field(\"_ingest._value\")\n            .type(\"integer\")\n            .build());\n\n        final var foreach = ElasticstackFunctions.IngestProcessorForeach(IngestProcessorForeachArgs.builder()\n            .field(\"values\")\n            .processor(convert.applyValue(ingestProcessorConvertResult -\u003e ingestProcessorConvertResult.json()))\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(foreach.applyValue(ingestProcessorForeachResult -\u003e ingestProcessorForeachResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${foreach.json}\nvariables:\n  convert:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorConvert\n      Arguments:\n        field: _ingest._value\n        type: integer\n  foreach:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorForeach\n      Arguments:\n        field: values\n        processor: ${convert.json}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorForeach.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array or object values.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor silently exits without changing the document if the `field` is `null` or missing.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "processor": {
                        "type": "string",
                        "description": "Ingest processor to run on each element.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "processor"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorForeach.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array or object values.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor silently exits without changing the document if the `field` is `null` or missing.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "processor": {
                        "type": "string",
                        "description": "Ingest processor to run on each element.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "processor"
                ]
            }
        },
        "elasticstack:index/ingestProcessorGeoip:IngestProcessorGeoip": {
            "description": "The geoip processor adds information about the geographical location of an IPv4 or IPv6 address.\n\nBy default, the processor uses the GeoLite2 City, GeoLite2 Country, and GeoLite2 ASN GeoIP2 databases from MaxMind, shared under the CC BY-SA 4.0 license. Elasticsearch automatically downloads updates for these databases from the Elastic GeoIP endpoint: https://geoip.elastic.co/v1/database. To get download statistics for these updates, use the GeoIP stats API.\n\nIf your cluster can’t connect to the Elastic GeoIP endpoint or you want to manage your own updates, [see Manage your own GeoIP2 database updates](https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html#manage-geoip-database-updates).\n\nIf Elasticsearch can’t connect to the endpoint for 30 days all updated databases will become invalid. Elasticsearch will stop enriching documents with geoip data and will add tags: [\"_geoip_expired_database\"] field instead.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst geoip = elasticstack.IngestProcessorGeoip({\n    field: \"ip\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [geoip.then(geoip =\u003e geoip.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ngeoip = elasticstack.ingest_processor_geoip(field=\"ip\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[geoip.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var geoip = Elasticstack.IngestProcessorGeoip.Invoke(new()\n    {\n        Field = \"ip\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            geoip.Apply(ingestProcessorGeoipResult =\u003e ingestProcessorGeoipResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgeoip, err := elasticstack.IngestProcessorGeoip(ctx, \u0026elasticstack.IngestProcessorGeoipArgs{\n\t\t\tField: \"ip\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(geoip.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorGeoipArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var geoip = ElasticstackFunctions.IngestProcessorGeoip(IngestProcessorGeoipArgs.builder()\n            .field(\"ip\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(geoip.applyValue(ingestProcessorGeoipResult -\u003e ingestProcessorGeoipResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${geoip.json}\nvariables:\n  geoip:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorGeoip\n      Arguments:\n        field: ip\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorGeoip.\n",
                "properties": {
                    "databaseFile": {
                        "type": "string",
                        "description": "The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the ip address from for the geographical lookup.\n"
                    },
                    "firstOnly": {
                        "type": "boolean",
                        "description": "If `true` only first found geoip data will be returned, even if field contains array.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist, the processor quietly exits without modifying the document.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to the `target_field` based on the geoip lookup.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the geographical information looked up from the MaxMind database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorGeoip.\n",
                "properties": {
                    "databaseFile": {
                        "type": "string",
                        "description": "The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the ip address from for the geographical lookup.\n"
                    },
                    "firstOnly": {
                        "type": "boolean",
                        "description": "If `true` only first found geoip data will be returned, even if field contains array.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to the `target_field` based on the geoip lookup.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the geographical information looked up from the MaxMind database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorGrok:IngestProcessorGrok": {
            "description": "Extracts structured fields out of a single text field within a document. You choose which field to extract matched fields from, as well as the grok pattern you expect will match. A grok pattern is like a regular expression that supports aliased expressions that can be reused.\n\nThis processor comes packaged with many [reusable patterns](https://github.com/elastic/elasticsearch/blob/master/libs/grok/src/main/resources/patterns).\n\nIf you need help building patterns to match your logs, you will find the [Grok Debugger](https://www.elastic.co/guide/en/kibana/master/xpack-grokdebugger.html) tool quite useful! [The Grok Constructor](https://grokconstructor.appspot.com/) is also a useful tool.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/grok-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst grok = elasticstack.IngestProcessorGrok({\n    field: \"message\",\n    patterns: [\n        `%{FAVORITE_DOG:pet}`,\n        `%{FAVORITE_CAT:pet}`,\n    ],\n    patternDefinitions: {\n        FAVORITE_DOG: \"beagle\",\n        FAVORITE_CAT: \"burmese\",\n    },\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [grok.then(grok =\u003e grok.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ngrok = elasticstack.ingest_processor_grok(field=\"message\",\n    patterns=[\n        \"%{FAVORITE_DOG:pet}\",\n        \"%{FAVORITE_CAT:pet}\",\n    ],\n    pattern_definitions={\n        \"FAVORITE_DOG\": \"beagle\",\n        \"FAVORITE_CAT\": \"burmese\",\n    })\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[grok.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var grok = Elasticstack.IngestProcessorGrok.Invoke(new()\n    {\n        Field = \"message\",\n        Patterns = new[]\n        {\n            \"%{FAVORITE_DOG:pet}\",\n            \"%{FAVORITE_CAT:pet}\",\n        },\n        PatternDefinitions = \n        {\n            { \"FAVORITE_DOG\", \"beagle\" },\n            { \"FAVORITE_CAT\", \"burmese\" },\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            grok.Apply(ingestProcessorGrokResult =\u003e ingestProcessorGrokResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgrok, err := elasticstack.IngestProcessorGrok(ctx, \u0026elasticstack.IngestProcessorGrokArgs{\n\t\t\tField: \"message\",\n\t\t\tPatterns: []string{\n\t\t\t\tfmt.Sprintf(\"%vFAVORITE_DOG:pet}\", \"%{\"),\n\t\t\t\tfmt.Sprintf(\"%vFAVORITE_CAT:pet}\", \"%{\"),\n\t\t\t},\n\t\t\tPatternDefinitions: map[string]interface{}{\n\t\t\t\t\"FAVORITE_DOG\": \"beagle\",\n\t\t\t\t\"FAVORITE_CAT\": \"burmese\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(grok.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorGrokArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var grok = ElasticstackFunctions.IngestProcessorGrok(IngestProcessorGrokArgs.builder()\n            .field(\"message\")\n            .patterns(            \n                \"%{FAVORITE_DOG:pet}\",\n                \"%{FAVORITE_CAT:pet}\")\n            .patternDefinitions(Map.ofEntries(\n                Map.entry(\"FAVORITE_DOG\", \"beagle\"),\n                Map.entry(\"FAVORITE_CAT\", \"burmese\")\n            ))\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(grok.applyValue(ingestProcessorGrokResult -\u003e ingestProcessorGrokResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${grok.json}\nvariables:\n  grok:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorGrok\n      Arguments:\n        field: message\n        patterns:\n          - '%{FAVORITE_DOG:pet}'\n          - '%{FAVORITE_CAT:pet}'\n        patternDefinitions:\n          FAVORITE_DOG: beagle\n          FAVORITE_CAT: burmese\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorGrok.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "ecsCompatibility": {
                        "type": "string",
                        "description": "Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to use for grok expression parsing\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "patternDefinitions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "traceMatch": {
                        "type": "boolean",
                        "description": "when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "patterns"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorGrok.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "ecsCompatibility": {
                        "type": "string",
                        "description": "Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to use for grok expression parsing\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "patternDefinitions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "traceMatch": {
                        "type": "boolean",
                        "description": "when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "patterns"
                ]
            }
        },
        "elasticstack:index/ingestProcessorGsub:IngestProcessorGsub": {
            "description": "Converts a string field by applying a regular expression and a replacement. If the field is an array of string, all members of the array will be converted. If any non-string values are encountered, the processor will throw an exception.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/gsub-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst gsub = elasticstack.IngestProcessorGsub({\n    field: \"field1\",\n    pattern: \"\\\\.\",\n    replacement: \"-\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [gsub.then(gsub =\u003e gsub.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ngsub = elasticstack.ingest_processor_gsub(field=\"field1\",\n    pattern=\"\\\\.\",\n    replacement=\"-\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[gsub.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gsub = Elasticstack.IngestProcessorGsub.Invoke(new()\n    {\n        Field = \"field1\",\n        Pattern = \"\\\\.\",\n        Replacement = \"-\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            gsub.Apply(ingestProcessorGsubResult =\u003e ingestProcessorGsubResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgsub, err := elasticstack.IngestProcessorGsub(ctx, \u0026elasticstack.IngestProcessorGsubArgs{\n\t\t\tField:       \"field1\",\n\t\t\tPattern:     \"\\\\.\",\n\t\t\tReplacement: \"-\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(gsub.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorGsubArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gsub = ElasticstackFunctions.IngestProcessorGsub(IngestProcessorGsubArgs.builder()\n            .field(\"field1\")\n            .pattern(\"\\\\.\")\n            .replacement(\"-\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(gsub.applyValue(ingestProcessorGsubResult -\u003e ingestProcessorGsubResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${gsub.json}\nvariables:\n  gsub:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorGsub\n      Arguments:\n        field: field1\n        pattern: \\.\n        replacement: '-'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorGsub.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to be replaced.\n"
                    },
                    "replacement": {
                        "type": "string",
                        "description": "The string to replace the matching patterns with.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "pattern",
                    "replacement"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorGsub.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to be replaced.\n"
                    },
                    "replacement": {
                        "type": "string",
                        "description": "The string to replace the matching patterns with.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "pattern",
                    "replacement"
                ]
            }
        },
        "elasticstack:index/ingestProcessorHtmlStrip:IngestProcessorHtmlStrip": {
            "description": "Removes HTML tags from the field. If the field is an array of strings, HTML tags will be removed from all members of the array.\n\nSee: templates/data-sources/elasticsearch_ingest_processor_html_strip.md.tmpl\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst htmlStrip = elasticstack.IngestProcessorHtmlStrip({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [htmlStrip.then(htmlStrip =\u003e htmlStrip.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nhtml_strip = elasticstack.ingest_processor_html_strip(field=\"foo\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[html_strip.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var htmlStrip = Elasticstack.IngestProcessorHtmlStrip.Invoke(new()\n    {\n        Field = \"foo\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            htmlStrip.Apply(ingestProcessorHtmlStripResult =\u003e ingestProcessorHtmlStripResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\thtmlStrip, err := elasticstack.IngestProcessorHtmlStrip(ctx, \u0026elasticstack.IngestProcessorHtmlStripArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(htmlStrip.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorHtmlStripArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var htmlStrip = ElasticstackFunctions.IngestProcessorHtmlStrip(IngestProcessorHtmlStripArgs.builder()\n            .field(\"foo\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(htmlStrip.applyValue(ingestProcessorHtmlStripResult -\u003e ingestProcessorHtmlStripResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${htmlStrip.json}\nvariables:\n  htmlStrip:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorHtmlStrip\n      Arguments:\n        field: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorHtmlStrip.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorHtmlStrip.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorJoin:IngestProcessorJoin": {
            "description": "Joins each element of an array into a single string using a separator character between each element. Throws an error when the field is not an array.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/join-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst join = elasticstack.IngestProcessorJoin({\n    field: \"joined_array_field\",\n    separator: \"-\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [join.then(join =\u003e join.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\njoin = elasticstack.ingest_processor_join(field=\"joined_array_field\",\n    separator=\"-\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[join.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @join = Elasticstack.IngestProcessorJoin.Invoke(new()\n    {\n        Field = \"joined_array_field\",\n        Separator = \"-\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            @join.Apply(ingestProcessorJoinResult =\u003e ingestProcessorJoinResult).Apply(@join =\u003e @join.Apply(ingestProcessorJoinResult =\u003e ingestProcessorJoinResult.Json)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjoin, err := elasticstack.IngestProcessorJoin(ctx, \u0026elasticstack.IngestProcessorJoinArgs{\n\t\t\tField:     \"joined_array_field\",\n\t\t\tSeparator: \"-\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(join.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorJoinArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var join = ElasticstackFunctions.IngestProcessorJoin(IngestProcessorJoinArgs.builder()\n            .field(\"joined_array_field\")\n            .separator(\"-\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(join.applyValue(ingestProcessorJoinResult -\u003e ingestProcessorJoinResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${join.json}\nvariables:\n  join:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorJoin\n      Arguments:\n        field: joined_array_field\n        separator: '-'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorJoin.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array values to join.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "The separator character.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "separator"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorJoin.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array values to join.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "The separator character.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "separator"
                ]
            }
        },
        "elasticstack:index/ingestProcessorJson:IngestProcessorJson": {
            "description": "Converts a JSON string into a structured JSON object.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/json-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst jsonProc = elasticstack.IngestProcessorJson({\n    field: \"string_source\",\n    targetField: \"json_target\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [jsonProc.then(jsonProc =\u003e jsonProc.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\njson_proc = elasticstack.ingest_processor_json(field=\"string_source\",\n    target_field=\"json_target\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[json_proc.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jsonProc = Elasticstack.IngestProcessorJson.Invoke(new()\n    {\n        Field = \"string_source\",\n        TargetField = \"json_target\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            jsonProc.Apply(ingestProcessorJsonResult =\u003e ingestProcessorJsonResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjsonProc, err := elasticstack.IngestProcessorJson(ctx, \u0026elasticstack.IngestProcessorJsonArgs{\n\t\t\tField:       \"string_source\",\n\t\t\tTargetField: pulumi.StringRef(\"json_target\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(jsonProc.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorJsonArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var jsonProc = ElasticstackFunctions.IngestProcessorJson(IngestProcessorJsonArgs.builder()\n            .field(\"string_source\")\n            .targetField(\"json_target\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(jsonProc.applyValue(ingestProcessorJsonResult -\u003e ingestProcessorJsonResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${jsonProc.json}\nvariables:\n  jsonProc:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorJson\n      Arguments:\n        field: string_source\n        targetField: json_target\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorJson.\n",
                "properties": {
                    "addToRoot": {
                        "type": "boolean",
                        "description": "Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.\n"
                    },
                    "addToRootConflictStrategy": {
                        "type": "string",
                        "description": "When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.\n"
                    },
                    "allowDuplicateKeys": {
                        "type": "boolean",
                        "description": "When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that the converted structured object will be written into. Any existing content in this field will be overwritten.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorJson.\n",
                "properties": {
                    "addToRoot": {
                        "type": "boolean",
                        "description": "Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.\n"
                    },
                    "addToRootConflictStrategy": {
                        "type": "string",
                        "description": "When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.\n"
                    },
                    "allowDuplicateKeys": {
                        "type": "boolean",
                        "description": "When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that the converted structured object will be written into. Any existing content in this field will be overwritten.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorKv:IngestProcessorKv": {
            "description": "This processor helps automatically parse messages (or specific event fields) which are of the `foo=bar` variety.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/kv-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst kv = elasticstack.IngestProcessorKv({\n    field: \"message\",\n    fieldSplit: \" \",\n    valueSplit: \"=\",\n    excludeKeys: [\"tags\"],\n    prefix: \"setting_\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [kv.then(kv =\u003e kv.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nkv = elasticstack.ingest_processor_kv(field=\"message\",\n    field_split=\" \",\n    value_split=\"=\",\n    exclude_keys=[\"tags\"],\n    prefix=\"setting_\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[kv.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var kv = Elasticstack.IngestProcessorKv.Invoke(new()\n    {\n        Field = \"message\",\n        FieldSplit = \" \",\n        ValueSplit = \"=\",\n        ExcludeKeys = new[]\n        {\n            \"tags\",\n        },\n        Prefix = \"setting_\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            kv.Apply(ingestProcessorKvResult =\u003e ingestProcessorKvResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tkv, err := elasticstack.IngestProcessorKv(ctx, \u0026elasticstack.IngestProcessorKvArgs{\n\t\t\tField:      \"message\",\n\t\t\tFieldSplit: \" \",\n\t\t\tValueSplit: \"=\",\n\t\t\tExcludeKeys: []string{\n\t\t\t\t\"tags\",\n\t\t\t},\n\t\t\tPrefix: pulumi.StringRef(\"setting_\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(kv.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorKvArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var kv = ElasticstackFunctions.IngestProcessorKv(IngestProcessorKvArgs.builder()\n            .field(\"message\")\n            .fieldSplit(\" \")\n            .valueSplit(\"=\")\n            .excludeKeys(\"tags\")\n            .prefix(\"setting_\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(kv.applyValue(ingestProcessorKvResult -\u003e ingestProcessorKvResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${kv.json}\nvariables:\n  kv:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorKv\n      Arguments:\n        field: message\n        fieldSplit: ' '\n        valueSplit: =\n        excludeKeys:\n          - tags\n        prefix: setting_\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorKv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "excludeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to exclude from document\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed. Supports template snippets.\n"
                    },
                    "fieldSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting key-value pairs.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "includeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to filter and insert into document. Defaults to including all keys\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix to be added to extracted keys.\n"
                    },
                    "stripBrackets": {
                        "type": "boolean",
                        "description": "If `true` strip brackets `()`, `\u003c\u003e`, `[]` as well as quotes `'` and `\"` from extracted values.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to insert the extracted keys into. Defaults to the root of the document.\n"
                    },
                    "trimKey": {
                        "type": "string",
                        "description": "String of characters to trim from extracted keys.\n"
                    },
                    "trimValue": {
                        "type": "string",
                        "description": "String of characters to trim from extracted values.\n"
                    },
                    "valueSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting the key from the value within a key-value pair.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "fieldSplit",
                    "valueSplit"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorKv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "excludeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to exclude from document\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed. Supports template snippets.\n"
                    },
                    "fieldSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting key-value pairs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "includeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to filter and insert into document. Defaults to including all keys\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix to be added to extracted keys.\n"
                    },
                    "stripBrackets": {
                        "type": "boolean",
                        "description": "If `true` strip brackets `()`, `\u003c\u003e`, `[]` as well as quotes `'` and `\"` from extracted values.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to insert the extracted keys into. Defaults to the root of the document.\n"
                    },
                    "trimKey": {
                        "type": "string",
                        "description": "String of characters to trim from extracted keys.\n"
                    },
                    "trimValue": {
                        "type": "string",
                        "description": "String of characters to trim from extracted values.\n"
                    },
                    "valueSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting the key from the value within a key-value pair.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "fieldSplit",
                    "id",
                    "json",
                    "valueSplit"
                ]
            }
        },
        "elasticstack:index/ingestProcessorLowercase:IngestProcessorLowercase": {
            "description": "Converts a string to its lowercase equivalent. If the field is an array of strings, all members of the array will be converted.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/lowercase-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst lowercase = elasticstack.IngestProcessorLowercase({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [lowercase.then(lowercase =\u003e lowercase.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nlowercase = elasticstack.ingest_processor_lowercase(field=\"foo\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[lowercase.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lowercase = Elasticstack.IngestProcessorLowercase.Invoke(new()\n    {\n        Field = \"foo\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            lowercase.Apply(ingestProcessorLowercaseResult =\u003e ingestProcessorLowercaseResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlowercase, err := elasticstack.IngestProcessorLowercase(ctx, \u0026elasticstack.IngestProcessorLowercaseArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(lowercase.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorLowercaseArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var lowercase = ElasticstackFunctions.IngestProcessorLowercase(IngestProcessorLowercaseArgs.builder()\n            .field(\"foo\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(lowercase.applyValue(ingestProcessorLowercaseResult -\u003e ingestProcessorLowercaseResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${lowercase.json}\nvariables:\n  lowercase:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorLowercase\n      Arguments:\n        field: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorLowercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make lowercase.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorLowercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make lowercase.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorNetworkDirection:IngestProcessorNetworkDirection": {
            "description": "Calculates the network direction given a source IP address, destination IP address, and a list of internal networks.\n\nThe network direction processor reads IP addresses from Elastic Common Schema (ECS) fields by default. If you use the ECS, only the `internal_networks` option must be specified.\n\n\nOne of either `internal_networks` or `internal_networks_field` must be specified. If `internal_networks_field` is specified, it follows the behavior specified by `ignore_missing`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst networkDirection = elasticstack.IngestProcessorNetworkDirection({\n    internalNetworks: [\"private\"],\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [networkDirection.then(networkDirection =\u003e networkDirection.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nnetwork_direction = elasticstack.ingest_processor_network_direction(internal_networks=[\"private\"])\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[network_direction.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var networkDirection = Elasticstack.IngestProcessorNetworkDirection.Invoke(new()\n    {\n        InternalNetworks = new[]\n        {\n            \"private\",\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            networkDirection.Apply(ingestProcessorNetworkDirectionResult =\u003e ingestProcessorNetworkDirectionResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnetworkDirection, err := elasticstack.IngestProcessorNetworkDirection(ctx, \u0026elasticstack.IngestProcessorNetworkDirectionArgs{\n\t\t\tInternalNetworks: []string{\n\t\t\t\t\"private\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(networkDirection.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorNetworkDirectionArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var networkDirection = ElasticstackFunctions.IngestProcessorNetworkDirection(IngestProcessorNetworkDirectionArgs.builder()\n            .internalNetworks(\"private\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(networkDirection.applyValue(ingestProcessorNetworkDirectionResult -\u003e ingestProcessorNetworkDirectionResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${networkDirection.json}\nvariables:\n  networkDirection:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorNetworkDirection\n      Arguments:\n        internalNetworks:\n          - private\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorNetworkDirection.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "internalNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of internal networks.\n"
                    },
                    "internalNetworksField": {
                        "type": "string",
                        "description": "A field on the given document to read the internal_networks configuration from.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the network direction.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorNetworkDirection.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "internalNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of internal networks.\n"
                    },
                    "internalNetworksField": {
                        "type": "string",
                        "description": "A field on the given document to read the internal_networks configuration from.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the network direction.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorPipeline:IngestProcessorPipeline": {
            "description": "Executes another pipeline.\n\nThe name of the current pipeline can be accessed from the `_ingest.pipeline` ingest metadata key.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/pipeline-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst appendTags = elasticstack.IngestProcessorAppend({\n    field: \"tags\",\n    values: [\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ],\n});\nconst pipelineA = new elasticstack.IngestPipeline(\"pipelineA\", {processors: [appendTags.then(appendTags =\u003e appendTags.json)]});\nconst fingerprint = elasticstack.IngestProcessorFingerprint({\n    fields: [\"owner\"],\n});\nconst pipeline = elasticstack.IngestProcessorPipelineOutput({\n    name: pipelineA.name,\n});\nconst pipelineB = new elasticstack.IngestPipeline(\"pipelineB\", {processors: [\n    pipeline.apply(pipeline =\u003e pipeline.json),\n    fingerprint.then(fingerprint =\u003e fingerprint.json),\n]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nappend_tags = elasticstack.ingest_processor_append(field=\"tags\",\n    values=[\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ])\npipeline_a = elasticstack.IngestPipeline(\"pipelineA\", processors=[append_tags.json])\nfingerprint = elasticstack.ingest_processor_fingerprint(fields=[\"owner\"])\npipeline = elasticstack.ingest_processor_pipeline_output(name=pipeline_a.name)\npipeline_b = elasticstack.IngestPipeline(\"pipelineB\", processors=[\n    pipeline.json,\n    fingerprint.json,\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var appendTags = Elasticstack.IngestProcessorAppend.Invoke(new()\n    {\n        Field = \"tags\",\n        Values = new[]\n        {\n            \"production\",\n            \"{{{app}}}\",\n            \"{{{owner}}}\",\n        },\n    });\n\n    var pipelineA = new Elasticstack.IngestPipeline(\"pipelineA\", new()\n    {\n        Processors = new[]\n        {\n            appendTags.Apply(ingestProcessorAppendResult =\u003e ingestProcessorAppendResult.Json),\n        },\n    });\n\n    var fingerprint = Elasticstack.IngestProcessorFingerprint.Invoke(new()\n    {\n        Fields = new[]\n        {\n            \"owner\",\n        },\n    });\n\n    var pipeline = Elasticstack.IngestProcessorPipeline.Invoke(new()\n    {\n        Name = pipelineA.Name,\n    });\n\n    var pipelineB = new Elasticstack.IngestPipeline(\"pipelineB\", new()\n    {\n        Processors = new[]\n        {\n            pipeline.Apply(ingestProcessorPipelineResult =\u003e ingestProcessorPipelineResult.Json),\n            fingerprint.Apply(ingestProcessorFingerprintResult =\u003e ingestProcessorFingerprintResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tappendTags, err := elasticstack.IngestProcessorAppend(ctx, \u0026elasticstack.IngestProcessorAppendArgs{\n\t\t\tField: \"tags\",\n\t\t\tValues: []string{\n\t\t\t\t\"production\",\n\t\t\t\t\"{{{app}}}\",\n\t\t\t\t\"{{{owner}}}\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpipelineA, err := elasticstack.NewIngestPipeline(ctx, \"pipelineA\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(appendTags.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfingerprint, err := elasticstack.IngestProcessorFingerprint(ctx, \u0026elasticstack.IngestProcessorFingerprintArgs{\n\t\t\tFields: []string{\n\t\t\t\t\"owner\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpipeline := elasticstack.IngestProcessorPipelineOutput(ctx, elasticstack.IngestProcessorPipelineOutputArgs{\n\t\t\tName: pipelineA.Name,\n\t\t}, nil)\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"pipelineB\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpipeline.ApplyT(func(pipeline elasticstack.IngestProcessorPipelineResult) (*string, error) {\n\t\t\t\t\treturn \u0026pipeline.Json, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t*pulumi.String(fingerprint.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorAppendArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport com.pulumi.elasticstack.inputs.IngestProcessorFingerprintArgs;\nimport com.pulumi.elasticstack.inputs.IngestProcessorPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var appendTags = ElasticstackFunctions.IngestProcessorAppend(IngestProcessorAppendArgs.builder()\n            .field(\"tags\")\n            .values(            \n                \"production\",\n                \"{{{app}}}\",\n                \"{{{owner}}}\")\n            .build());\n\n        var pipelineA = new IngestPipeline(\"pipelineA\", IngestPipelineArgs.builder()        \n            .processors(appendTags.applyValue(ingestProcessorAppendResult -\u003e ingestProcessorAppendResult.json()))\n            .build());\n\n        final var fingerprint = ElasticstackFunctions.IngestProcessorFingerprint(IngestProcessorFingerprintArgs.builder()\n            .fields(\"owner\")\n            .build());\n\n        final var pipeline = ElasticstackFunctions.IngestProcessorPipeline(IngestProcessorPipelineArgs.builder()\n            .name(pipelineA.name())\n            .build());\n\n        var pipelineB = new IngestPipeline(\"pipelineB\", IngestPipelineArgs.builder()        \n            .processors(            \n                pipeline.applyValue(ingestProcessorPipelineResult -\u003e ingestProcessorPipelineResult).applyValue(pipeline -\u003e pipeline.applyValue(ingestProcessorPipelineResult -\u003e ingestProcessorPipelineResult.json())),\n                fingerprint.applyValue(ingestProcessorFingerprintResult -\u003e ingestProcessorFingerprintResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pipelineA:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${appendTags.json}\n  pipelineB:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${pipeline.json}\n        - ${fingerprint.json}\nvariables:\n  appendTags:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorAppend\n      Arguments:\n        field: tags\n        values:\n          - production\n          - '{{{app}}}'\n          - '{{{owner}}}'\n  fingerprint:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorFingerprint\n      Arguments:\n        fields:\n          - owner\n  pipeline:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorPipeline\n      Arguments:\n        name: ${pipelineA.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorPipeline.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline to execute.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorPipeline.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline to execute.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json",
                    "name"
                ]
            }
        },
        "elasticstack:index/ingestProcessorRegisteredDomain:IngestProcessorRegisteredDomain": {
            "description": "Extracts the registered domain (also known as the effective top-level domain or eTLD), sub-domain, and top-level domain from a fully qualified domain name (FQDN). Uses the registered domains defined in the Mozilla Public Suffix List.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/registered-domain-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst domain = elasticstack.IngestProcessorRegisteredDomain({\n    field: \"fqdn\",\n    targetField: \"url\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [domain.then(domain =\u003e domain.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndomain = elasticstack.ingest_processor_registered_domain(field=\"fqdn\",\n    target_field=\"url\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[domain.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var domain = Elasticstack.IngestProcessorRegisteredDomain.Invoke(new()\n    {\n        Field = \"fqdn\",\n        TargetField = \"url\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            domain.Apply(ingestProcessorRegisteredDomainResult =\u003e ingestProcessorRegisteredDomainResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdomain, err := elasticstack.IngestProcessorRegisteredDomain(ctx, \u0026elasticstack.IngestProcessorRegisteredDomainArgs{\n\t\t\tField:       \"fqdn\",\n\t\t\tTargetField: pulumi.StringRef(\"url\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(domain.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorRegisteredDomainArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var domain = ElasticstackFunctions.IngestProcessorRegisteredDomain(IngestProcessorRegisteredDomainArgs.builder()\n            .field(\"fqdn\")\n            .targetField(\"url\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(domain.applyValue(ingestProcessorRegisteredDomainResult -\u003e ingestProcessorRegisteredDomainResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${domain.json}\nvariables:\n  domain:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorRegisteredDomain\n      Arguments:\n        field: fqdn\n        targetField: url\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorRegisteredDomain.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the source FQDN.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Object field containing extracted domain components. If an `\u003cempty string\u003e`, the processor adds components to the document’s root.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorRegisteredDomain.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the source FQDN.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Object field containing extracted domain components. If an `\u003cempty string\u003e`, the processor adds components to the document’s root.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorRemove:IngestProcessorRemove": {
            "description": "Removes existing fields. If one field doesn’t exist, an exception will be thrown.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/remove-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst remove = elasticstack.IngestProcessorRemove({\n    fields: [\n        \"user_agent\",\n        \"url\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [remove.then(remove =\u003e remove.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nremove = elasticstack.ingest_processor_remove(fields=[\n    \"user_agent\",\n    \"url\",\n])\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[remove.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @remove = Elasticstack.IngestProcessorRemove.Invoke(new()\n    {\n        Fields = new[]\n        {\n            \"user_agent\",\n            \"url\",\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            @remove.Apply(ingestProcessorRemoveResult =\u003e ingestProcessorRemoveResult).Apply(@remove =\u003e @remove.Apply(ingestProcessorRemoveResult =\u003e ingestProcessorRemoveResult.Json)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tremove, err := elasticstack.IngestProcessorRemove(ctx, \u0026elasticstack.IngestProcessorRemoveArgs{\n\t\t\tFields: []string{\n\t\t\t\t\"user_agent\",\n\t\t\t\t\"url\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(remove.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorRemoveArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var remove = ElasticstackFunctions.IngestProcessorRemove(IngestProcessorRemoveArgs.builder()\n            .fields(            \n                \"user_agent\",\n                \"url\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(remove.applyValue(ingestProcessorRemoveResult -\u003e ingestProcessorRemoveResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${remove.json}\nvariables:\n  remove:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorRemove\n      Arguments:\n        fields:\n          - user_agent\n          - url\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorRemove.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Fields to be removed.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorRemove.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Fields to be removed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorRename:IngestProcessorRename": {
            "description": "Renames an existing field. If the field doesn’t exist or the new name is already used, an exception will be thrown.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/rename-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst rename = elasticstack.IngestProcessorRename({\n    field: \"provider\",\n    targetField: \"cloud.provider\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [rename.then(rename =\u003e rename.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nrename = elasticstack.ingest_processor_rename(field=\"provider\",\n    target_field=\"cloud.provider\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[rename.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rename = Elasticstack.IngestProcessorRename.Invoke(new()\n    {\n        Field = \"provider\",\n        TargetField = \"cloud.provider\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            rename.Apply(ingestProcessorRenameResult =\u003e ingestProcessorRenameResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trename, err := elasticstack.IngestProcessorRename(ctx, \u0026elasticstack.IngestProcessorRenameArgs{\n\t\t\tField:       \"provider\",\n\t\t\tTargetField: \"cloud.provider\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(rename.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorRenameArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rename = ElasticstackFunctions.IngestProcessorRename(IngestProcessorRenameArgs.builder()\n            .field(\"provider\")\n            .targetField(\"cloud.provider\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(rename.applyValue(ingestProcessorRenameResult -\u003e ingestProcessorRenameResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${rename.json}\nvariables:\n  rename:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorRename\n      Arguments:\n        field: provider\n        targetField: cloud.provider\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorRename.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be renamed.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The new name of the field.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "targetField"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorRename.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be renamed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The new name of the field.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "targetField"
                ]
            }
        },
        "elasticstack:index/ingestProcessorScript:IngestProcessorScript": {
            "description": "Runs an inline or stored script on incoming documents. The script runs in the ingest context.\n\nThe script processor uses the script cache to avoid recompiling the script for each incoming document. To improve performance, ensure the script cache is properly sized before using a script processor in production.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/script-processor.html\n",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorScript.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "lang": {
                        "type": "string",
                        "description": "Script language.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "params": {
                        "type": "string",
                        "description": "Object containing parameters for the script.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "ID of a stored script. If no `source` is specified, this parameter is required.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Inline script. If no id is specified, this parameter is required.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorScript.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "lang": {
                        "type": "string",
                        "description": "Script language.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "params": {
                        "type": "string",
                        "description": "Object containing parameters for the script.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "ID of a stored script. If no `source` is specified, this parameter is required.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Inline script. If no id is specified, this parameter is required.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorSet:IngestProcessorSet": {
            "description": "Sets one field and associates it with the specified value. If the field already exists, its value will be replaced with the provided one.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/set-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst set = elasticstack.IngestProcessorSet({\n    field: \"count\",\n    value: \"1\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [set.then(set =\u003e set.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nset = elasticstack.ingest_processor_set(field=\"count\",\n    value=\"1\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[set.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @set = Elasticstack.IngestProcessorSet.Invoke(new()\n    {\n        Field = \"count\",\n        Value = \"1\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            @set.Apply(ingestProcessorSetResult =\u003e ingestProcessorSetResult).Apply(@set =\u003e @set.Apply(ingestProcessorSetResult =\u003e ingestProcessorSetResult.Json)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tset, err := elasticstack.IngestProcessorSet(ctx, \u0026elasticstack.IngestProcessorSetArgs{\n\t\t\tField: \"count\",\n\t\t\tValue: pulumi.StringRef(\"1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(set.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorSetArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var set = ElasticstackFunctions.IngestProcessorSet(IngestProcessorSetArgs.builder()\n            .field(\"count\")\n            .value(1)\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(set.applyValue(ingestProcessorSetResult -\u003e ingestProcessorSetResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${set.json}\nvariables:\n  set:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorSet\n      Arguments:\n        field: count\n        value: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorSet.\n",
                "properties": {
                    "copyFrom": {
                        "type": "string",
                        "description": "The origin field which will be copied to `field`, cannot set `value` simultaneously.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to insert, upsert, or update.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreEmptyValue": {
                        "type": "boolean",
                        "description": "If `true` and `value` is a template snippet that evaluates to `null` or the empty string, the processor quietly exits without modifying the document\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be set for the field. Supports template snippets. May specify only one of `value` or `copy_from`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorSet.\n",
                "properties": {
                    "copyFrom": {
                        "type": "string",
                        "description": "The origin field which will be copied to `field`, cannot set `value` simultaneously.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to insert, upsert, or update.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreEmptyValue": {
                        "type": "boolean",
                        "description": "If `true` and `value` is a template snippet that evaluates to `null` or the empty string, the processor quietly exits without modifying the document\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be set for the field. Supports template snippets. May specify only one of `value` or `copy_from`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorSetSecurityUser:IngestProcessorSetSecurityUser": {
            "description": "Sets user-related details (such as `username`, `roles`, `email`, `full_name`, `metadata`, `api_key`, `realm` and `authentication_typ`e) from the current authenticated user to the current document by pre-processing the ingest. The `api_key` property exists only if the user authenticates with an API key. It is an object containing the id, name and metadata (if it exists and is non-empty) fields of the API key. The realm property is also an object with two fields, name and type. When using API key authentication, the realm property refers to the realm from which the API key is created. The `authentication_type property` is a string that can take value from `REALM`, `API_KEY`, `TOKEN` and `ANONYMOUS`.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-node-set-security-user-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst user = elasticstack.IngestProcessorSetSecurityUser({\n    field: \"user\",\n    properties: [\n        \"username\",\n        \"realm\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [user.then(user =\u003e user.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nuser = elasticstack.ingest_processor_set_security_user(field=\"user\",\n    properties=[\n        \"username\",\n        \"realm\",\n    ])\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[user.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = Elasticstack.IngestProcessorSetSecurityUser.Invoke(new()\n    {\n        Field = \"user\",\n        Properties = new[]\n        {\n            \"username\",\n            \"realm\",\n        },\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            user.Apply(ingestProcessorSetSecurityUserResult =\u003e ingestProcessorSetSecurityUserResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := elasticstack.IngestProcessorSetSecurityUser(ctx, \u0026elasticstack.IngestProcessorSetSecurityUserArgs{\n\t\t\tField: \"user\",\n\t\t\tProperties: []string{\n\t\t\t\t\"username\",\n\t\t\t\t\"realm\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(user.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorSetSecurityUserArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var user = ElasticstackFunctions.IngestProcessorSetSecurityUser(IngestProcessorSetSecurityUserArgs.builder()\n            .field(\"user\")\n            .properties(            \n                \"username\",\n                \"realm\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(user.applyValue(ingestProcessorSetSecurityUserResult -\u003e ingestProcessorSetSecurityUserResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${user.json}\nvariables:\n  user:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorSetSecurityUser\n      Arguments:\n        field: user\n        properties:\n          - username\n          - realm\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorSetSecurityUser.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to store the user information into.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what user related properties are added to the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorSetSecurityUser.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to store the user information into.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what user related properties are added to the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorSort:IngestProcessorSort": {
            "description": "Sorts the elements of an array ascending or descending. Homogeneous arrays of numbers will be sorted numerically, while arrays of strings or heterogeneous arrays of strings + numbers will be sorted lexicographically. Throws an error when the field is not an array.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst sort = elasticstack.IngestProcessorSort({\n    field: \"array_field_to_sort\",\n    order: \"desc\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [sort.then(sort =\u003e sort.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nsort = elasticstack.ingest_processor_sort(field=\"array_field_to_sort\",\n    order=\"desc\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[sort.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sort = Elasticstack.IngestProcessorSort.Invoke(new()\n    {\n        Field = \"array_field_to_sort\",\n        Order = \"desc\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            sort.Apply(ingestProcessorSortResult =\u003e ingestProcessorSortResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsort, err := elasticstack.IngestProcessorSort(ctx, \u0026elasticstack.IngestProcessorSortArgs{\n\t\t\tField: \"array_field_to_sort\",\n\t\t\tOrder: pulumi.StringRef(\"desc\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(sort.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorSortArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sort = ElasticstackFunctions.IngestProcessorSort(IngestProcessorSortArgs.builder()\n            .field(\"array_field_to_sort\")\n            .order(\"desc\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(sort.applyValue(ingestProcessorSortResult -\u003e ingestProcessorSortResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${sort.json}\nvariables:\n  sort:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorSort\n      Arguments:\n        field: array_field_to_sort\n        order: desc\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorSort.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be sorted\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The sort order to use. Accepts `asc` or `desc`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the sorted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorSort.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be sorted\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The sort order to use. Accepts `asc` or `desc`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the sorted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorSplit:IngestProcessorSplit": {
            "description": "Splits a field into an array using a separator character. Only works on string fields.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/split-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst split = elasticstack.IngestProcessorSplit({\n    field: \"my_field\",\n    separator: \"\\\\s+\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [split.then(split =\u003e split.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nsplit = elasticstack.ingest_processor_split(field=\"my_field\",\n    separator=\"\\\\s+\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[split.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var split = Elasticstack.IngestProcessorSplit.Invoke(new()\n    {\n        Field = \"my_field\",\n        Separator = \"\\\\s+\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            split.Apply(ingestProcessorSplitResult =\u003e ingestProcessorSplitResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsplit, err := elasticstack.IngestProcessorSplit(ctx, \u0026elasticstack.IngestProcessorSplitArgs{\n\t\t\tField:     \"my_field\",\n\t\t\tSeparator: \"\\\\s+\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(split.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorSplitArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var split = ElasticstackFunctions.IngestProcessorSplit(IngestProcessorSplitArgs.builder()\n            .field(\"my_field\")\n            .separator(\"\\\\s+\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(split.applyValue(ingestProcessorSplitResult -\u003e ingestProcessorSplitResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${split.json}\nvariables:\n  split:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorSplit\n      Arguments:\n        field: my_field\n        separator: \\s+\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorSplit.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to split\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "preserveTrailing": {
                        "type": "boolean",
                        "description": "Preserves empty trailing fields, if any.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "A regex which matches the separator, eg `,` or `\\s+`\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "separator"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorSplit.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to split\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "preserveTrailing": {
                        "type": "boolean",
                        "description": "Preserves empty trailing fields, if any.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "A regex which matches the separator, eg `,` or `\\s+`\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "separator"
                ]
            }
        },
        "elasticstack:index/ingestProcessorTrim:IngestProcessorTrim": {
            "description": "Trims whitespace from field. If the field is an array of strings, all members of the array will be trimmed.\n\n**NOTE:** This only works on leading and trailing whitespace.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/trim-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst trim = elasticstack.IngestProcessorTrim({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [trim.then(trim =\u003e trim.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ntrim = elasticstack.ingest_processor_trim(field=\"foo\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[trim.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var trim = Elasticstack.IngestProcessorTrim.Invoke(new()\n    {\n        Field = \"foo\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            trim.Apply(ingestProcessorTrimResult =\u003e ingestProcessorTrimResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttrim, err := elasticstack.IngestProcessorTrim(ctx, \u0026elasticstack.IngestProcessorTrimArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(trim.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorTrimArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var trim = ElasticstackFunctions.IngestProcessorTrim(IngestProcessorTrimArgs.builder()\n            .field(\"foo\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(trim.applyValue(ingestProcessorTrimResult -\u003e ingestProcessorTrimResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${trim.json}\nvariables:\n  trim:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorTrim\n      Arguments:\n        field: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorTrim.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the trimmed value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorTrim.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the trimmed value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorUppercase:IngestProcessorUppercase": {
            "description": "Converts a string to its uppercase equivalent. If the field is an array of strings, all members of the array will be converted.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/uppercase-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst uppercase = elasticstack.IngestProcessorUppercase({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [uppercase.then(uppercase =\u003e uppercase.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nuppercase = elasticstack.ingest_processor_uppercase(field=\"foo\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[uppercase.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var uppercase = Elasticstack.IngestProcessorUppercase.Invoke(new()\n    {\n        Field = \"foo\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            uppercase.Apply(ingestProcessorUppercaseResult =\u003e ingestProcessorUppercaseResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuppercase, err := elasticstack.IngestProcessorUppercase(ctx, \u0026elasticstack.IngestProcessorUppercaseArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(uppercase.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorUppercaseArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var uppercase = ElasticstackFunctions.IngestProcessorUppercase(IngestProcessorUppercaseArgs.builder()\n            .field(\"foo\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(uppercase.applyValue(ingestProcessorUppercaseResult -\u003e ingestProcessorUppercaseResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${uppercase.json}\nvariables:\n  uppercase:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorUppercase\n      Arguments:\n        field: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorUppercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make uppercase.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorUppercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make uppercase.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorUriParts:IngestProcessorUriParts": {
            "description": "Parses a Uniform Resource Identifier (URI) string and extracts its components as an object. This URI object includes properties for the URI’s domain, path, fragment, port, query, scheme, user info, username, and password.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/uri-parts-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst parts = elasticstack.IngestProcessorUriParts({\n    field: \"input_field\",\n    targetField: \"url\",\n    keepOriginal: true,\n    removeIfSuccessful: false,\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [parts.then(parts =\u003e parts.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nparts = elasticstack.ingest_processor_uri_parts(field=\"input_field\",\n    target_field=\"url\",\n    keep_original=True,\n    remove_if_successful=False)\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[parts.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var parts = Elasticstack.IngestProcessorUriParts.Invoke(new()\n    {\n        Field = \"input_field\",\n        TargetField = \"url\",\n        KeepOriginal = true,\n        RemoveIfSuccessful = false,\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            parts.Apply(ingestProcessorUriPartsResult =\u003e ingestProcessorUriPartsResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparts, err := elasticstack.IngestProcessorUriParts(ctx, \u0026elasticstack.IngestProcessorUriPartsArgs{\n\t\t\tField:              \"input_field\",\n\t\t\tTargetField:        pulumi.StringRef(\"url\"),\n\t\t\tKeepOriginal:       pulumi.BoolRef(true),\n\t\t\tRemoveIfSuccessful: pulumi.BoolRef(false),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(parts.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorUriPartsArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var parts = ElasticstackFunctions.IngestProcessorUriParts(IngestProcessorUriPartsArgs.builder()\n            .field(\"input_field\")\n            .targetField(\"url\")\n            .keepOriginal(true)\n            .removeIfSuccessful(false)\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(parts.applyValue(ingestProcessorUriPartsResult -\u003e ingestProcessorUriPartsResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${parts.json}\nvariables:\n  parts:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorUriParts\n      Arguments:\n        field: input_field\n        targetField: url\n        keepOriginal: true\n        removeIfSuccessful: false\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorUriParts.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the URI string.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "keepOriginal": {
                        "type": "boolean",
                        "description": "If true, the processor copies the unparsed URI to `\u003ctarget_field\u003e.original.`\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "removeIfSuccessful": {
                        "type": "boolean",
                        "description": "If `true`, the processor removes the `field` after parsing the URI string. If parsing fails, the processor does not remove the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the URI object.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorUriParts.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the URI string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "keepOriginal": {
                        "type": "boolean",
                        "description": "If true, the processor copies the unparsed URI to `\u003ctarget_field\u003e.original.`\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "removeIfSuccessful": {
                        "type": "boolean",
                        "description": "If `true`, the processor removes the `field` after parsing the URI string. If parsing fails, the processor does not remove the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the URI object.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorUrldecode:IngestProcessorUrldecode": {
            "description": "URL-decodes a string. If the field is an array of strings, all members of the array will be decoded.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/urldecode-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst urldecode = elasticstack.IngestProcessorUrldecode({\n    field: \"my_url_to_decode\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [urldecode.then(urldecode =\u003e urldecode.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nurldecode = elasticstack.ingest_processor_urldecode(field=\"my_url_to_decode\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[urldecode.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var urldecode = Elasticstack.IngestProcessorUrldecode.Invoke(new()\n    {\n        Field = \"my_url_to_decode\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            urldecode.Apply(ingestProcessorUrldecodeResult =\u003e ingestProcessorUrldecodeResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\turldecode, err := elasticstack.IngestProcessorUrldecode(ctx, \u0026elasticstack.IngestProcessorUrldecodeArgs{\n\t\t\tField: \"my_url_to_decode\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(urldecode.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorUrldecodeArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var urldecode = ElasticstackFunctions.IngestProcessorUrldecode(IngestProcessorUrldecodeArgs.builder()\n            .field(\"my_url_to_decode\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(urldecode.applyValue(ingestProcessorUrldecodeResult -\u003e ingestProcessorUrldecodeResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${urldecode.json}\nvariables:\n  urldecode:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorUrldecode\n      Arguments:\n        field: my_url_to_decode\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorUrldecode.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to decode\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorUrldecode.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to decode\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/ingestProcessorUserAgent:IngestProcessorUserAgent": {
            "description": "The `user_agent` processor extracts details from the user agent string a browser sends with its web requests. This processor adds this information by default under the `user_agent` field.\n\nThe ingest-user-agent module ships by default with the regexes.yaml made available by uap-java with an Apache 2.0 license. For more details see https://github.com/ua-parser/uap-core.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/user-agent-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\nimport * as elasticstack from \"@tonkean/pulumi-elasticstack\";\n\nconst agent = elasticstack.IngestProcessorUserAgent({\n    field: \"agent\",\n});\nconst myIngestPipeline = new elasticstack.IngestPipeline(\"myIngestPipeline\", {processors: [agent.then(agent =\u003e agent.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nagent = elasticstack.ingest_processor_user_agent(field=\"agent\")\nmy_ingest_pipeline = elasticstack.IngestPipeline(\"myIngestPipeline\", processors=[agent.json])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var agent = Elasticstack.IngestProcessorUserAgent.Invoke(new()\n    {\n        Field = \"agent\",\n    });\n\n    var myIngestPipeline = new Elasticstack.IngestPipeline(\"myIngestPipeline\", new()\n    {\n        Processors = new[]\n        {\n            agent.Apply(ingestProcessorUserAgentResult =\u003e ingestProcessorUserAgentResult.Json),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Tonkean/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tagent, err := elasticstack.IngestProcessorUserAgent(ctx, \u0026elasticstack.IngestProcessorUserAgentArgs{\n\t\t\tField: \"agent\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.IngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t*pulumi.String(agent.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.elasticstack.ElasticstackFunctions;\nimport com.pulumi.elasticstack.inputs.IngestProcessorUserAgentArgs;\nimport com.pulumi.elasticstack.IngestPipeline;\nimport com.pulumi.elasticstack.IngestPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var agent = ElasticstackFunctions.IngestProcessorUserAgent(IngestProcessorUserAgentArgs.builder()\n            .field(\"agent\")\n            .build());\n\n        var myIngestPipeline = new IngestPipeline(\"myIngestPipeline\", IngestPipelineArgs.builder()        \n            .processors(agent.applyValue(ingestProcessorUserAgentResult -\u003e ingestProcessorUserAgentResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myIngestPipeline:\n    type: elasticstack:IngestPipeline\n    properties:\n      processors:\n        - ${agent.json}\nvariables:\n  agent:\n    fn::invoke:\n      Function: elasticstack:IngestProcessorUserAgent\n      Arguments:\n        field: agent\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IngestProcessorUserAgent.\n",
                "properties": {
                    "extractDeviceType": {
                        "type": "boolean",
                        "description": "Extracts device type from the user agent string on a best-effort basis. Supported only starting from Elasticsearch version **8.0**\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field containing the user agent string.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to `target_field`.\n"
                    },
                    "regexFile": {
                        "type": "string",
                        "description": "The name of the file in the `config/ingest-user-agent` directory containing the regular expressions for parsing the user agent string.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will be filled with the user agent details.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IngestProcessorUserAgent.\n",
                "properties": {
                    "extractDeviceType": {
                        "type": "boolean",
                        "description": "Extracts device type from the user agent string on a best-effort basis. Supported only starting from Elasticsearch version **8.0**\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field containing the user agent string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to `target_field`.\n"
                    },
                    "regexFile": {
                        "type": "string",
                        "description": "The name of the file in the `config/ingest-user-agent` directory containing the regular expressions for parsing the user agent string.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will be filled with the user agent details.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        }
    }
}