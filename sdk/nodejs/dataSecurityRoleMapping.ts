// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves role mappings. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const mapping = elasticstack.DataSecurityRoleMapping({
 *     name: "my_mapping",
 * });
 * export const user = mapping.then(mapping => mapping.name);
 * ```
 */
export function dataSecurityRoleMapping(args: DataSecurityRoleMappingArgs, opts?: pulumi.InvokeOptions): Promise<DataSecurityRoleMappingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/dataSecurityRoleMapping:DataSecurityRoleMapping", {
        "elasticsearchConnection": args.elasticsearchConnection,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking DataSecurityRoleMapping.
 */
export interface DataSecurityRoleMappingArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: inputs.DataSecurityRoleMappingElasticsearchConnection;
    /**
     * The distinct name that identifies the role mapping, used solely as an identifier.
     */
    name: string;
}

/**
 * A collection of values returned by DataSecurityRoleMapping.
 */
export interface DataSecurityRoleMappingResult {
    /**
     * Elasticsearch connection configuration block.
     */
    readonly elasticsearchConnection?: outputs.DataSecurityRoleMappingElasticsearchConnection;
    /**
     * Mappings that have `enabled` set to `false` are ignored when role mapping is performed.
     */
    readonly enabled: boolean;
    /**
     * Internal identifier of the resource
     */
    readonly id: string;
    /**
     * Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.
     */
    readonly metadata: string;
    /**
     * The distinct name that identifies the role mapping, used solely as an identifier.
     */
    readonly name: string;
    /**
     * A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.
     */
    readonly roleTemplates: string;
    /**
     * A list of role names that are granted to the users that match the role mapping rules.
     */
    readonly roles: string[];
    /**
     * The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.
     */
    readonly rules: string;
}
/**
 * Retrieves role mappings. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const mapping = elasticstack.DataSecurityRoleMapping({
 *     name: "my_mapping",
 * });
 * export const user = mapping.then(mapping => mapping.name);
 * ```
 */
export function dataSecurityRoleMappingOutput(args: DataSecurityRoleMappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<DataSecurityRoleMappingResult> {
    return pulumi.output(args).apply((a: any) => dataSecurityRoleMapping(a, opts))
}

/**
 * A collection of arguments for invoking DataSecurityRoleMapping.
 */
export interface DataSecurityRoleMappingOutputArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.DataSecurityRoleMappingElasticsearchConnectionArgs>;
    /**
     * The distinct name that identifies the role mapping, used solely as an identifier.
     */
    name: pulumi.Input<string>;
}
