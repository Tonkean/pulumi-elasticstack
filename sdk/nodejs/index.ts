// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterSettingsArgs, ClusterSettingsState } from "./clusterSettings";
export type ClusterSettings = import("./clusterSettings").ClusterSettings;
export const ClusterSettings: typeof import("./clusterSettings").ClusterSettings = null as any;
utilities.lazyLoad(exports, ["ClusterSettings"], () => require("./clusterSettings"));

export { ComponentTemplateArgs, ComponentTemplateState } from "./componentTemplate";
export type ComponentTemplate = import("./componentTemplate").ComponentTemplate;
export const ComponentTemplate: typeof import("./componentTemplate").ComponentTemplate = null as any;
utilities.lazyLoad(exports, ["ComponentTemplate"], () => require("./componentTemplate"));

export { DataSecurityRoleArgs, DataSecurityRoleResult, DataSecurityRoleOutputArgs } from "./dataSecurityRole";
export const dataSecurityRole: typeof import("./dataSecurityRole").dataSecurityRole = null as any;
export const dataSecurityRoleOutput: typeof import("./dataSecurityRole").dataSecurityRoleOutput = null as any;
utilities.lazyLoad(exports, ["dataSecurityRole","dataSecurityRoleOutput"], () => require("./dataSecurityRole"));

export { DataSecurityRoleMappingArgs, DataSecurityRoleMappingResult, DataSecurityRoleMappingOutputArgs } from "./dataSecurityRoleMapping";
export const dataSecurityRoleMapping: typeof import("./dataSecurityRoleMapping").dataSecurityRoleMapping = null as any;
export const dataSecurityRoleMappingOutput: typeof import("./dataSecurityRoleMapping").dataSecurityRoleMappingOutput = null as any;
utilities.lazyLoad(exports, ["dataSecurityRoleMapping","dataSecurityRoleMappingOutput"], () => require("./dataSecurityRoleMapping"));

export { DataSecurityUserArgs, DataSecurityUserResult, DataSecurityUserOutputArgs } from "./dataSecurityUser";
export const dataSecurityUser: typeof import("./dataSecurityUser").dataSecurityUser = null as any;
export const dataSecurityUserOutput: typeof import("./dataSecurityUser").dataSecurityUserOutput = null as any;
utilities.lazyLoad(exports, ["dataSecurityUser","dataSecurityUserOutput"], () => require("./dataSecurityUser"));

export { DataSnapshotRepositoryArgs, DataSnapshotRepositoryResult, DataSnapshotRepositoryOutputArgs } from "./dataSnapshotRepository";
export const dataSnapshotRepository: typeof import("./dataSnapshotRepository").dataSnapshotRepository = null as any;
export const dataSnapshotRepositoryOutput: typeof import("./dataSnapshotRepository").dataSnapshotRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["dataSnapshotRepository","dataSnapshotRepositoryOutput"], () => require("./dataSnapshotRepository"));

export { DataStreamArgs, DataStreamState } from "./dataStream";
export type DataStream = import("./dataStream").DataStream;
export const DataStream: typeof import("./dataStream").DataStream = null as any;
utilities.lazyLoad(exports, ["DataStream"], () => require("./dataStream"));

export { IndexLifecycleArgs, IndexLifecycleState } from "./indexLifecycle";
export type IndexLifecycle = import("./indexLifecycle").IndexLifecycle;
export const IndexLifecycle: typeof import("./indexLifecycle").IndexLifecycle = null as any;
utilities.lazyLoad(exports, ["IndexLifecycle"], () => require("./indexLifecycle"));

export { IndexTemplateArgs, IndexTemplateState } from "./indexTemplate";
export type IndexTemplate = import("./indexTemplate").IndexTemplate;
export const IndexTemplate: typeof import("./indexTemplate").IndexTemplate = null as any;
utilities.lazyLoad(exports, ["IndexTemplate"], () => require("./indexTemplate"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { IngestPipelineArgs, IngestPipelineState } from "./ingestPipeline";
export type IngestPipeline = import("./ingestPipeline").IngestPipeline;
export const IngestPipeline: typeof import("./ingestPipeline").IngestPipeline = null as any;
utilities.lazyLoad(exports, ["IngestPipeline"], () => require("./ingestPipeline"));

export { IngestProcessorAppendArgs, IngestProcessorAppendResult, IngestProcessorAppendOutputArgs } from "./ingestProcessorAppend";
export const ingestProcessorAppend: typeof import("./ingestProcessorAppend").ingestProcessorAppend = null as any;
export const ingestProcessorAppendOutput: typeof import("./ingestProcessorAppend").ingestProcessorAppendOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorAppend","ingestProcessorAppendOutput"], () => require("./ingestProcessorAppend"));

export { IngestProcessorBytesArgs, IngestProcessorBytesResult, IngestProcessorBytesOutputArgs } from "./ingestProcessorBytes";
export const ingestProcessorBytes: typeof import("./ingestProcessorBytes").ingestProcessorBytes = null as any;
export const ingestProcessorBytesOutput: typeof import("./ingestProcessorBytes").ingestProcessorBytesOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorBytes","ingestProcessorBytesOutput"], () => require("./ingestProcessorBytes"));

export { IngestProcessorCircleArgs, IngestProcessorCircleResult, IngestProcessorCircleOutputArgs } from "./ingestProcessorCircle";
export const ingestProcessorCircle: typeof import("./ingestProcessorCircle").ingestProcessorCircle = null as any;
export const ingestProcessorCircleOutput: typeof import("./ingestProcessorCircle").ingestProcessorCircleOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorCircle","ingestProcessorCircleOutput"], () => require("./ingestProcessorCircle"));

export { IngestProcessorCommunityIdArgs, IngestProcessorCommunityIdResult, IngestProcessorCommunityIdOutputArgs } from "./ingestProcessorCommunityId";
export const ingestProcessorCommunityId: typeof import("./ingestProcessorCommunityId").ingestProcessorCommunityId = null as any;
export const ingestProcessorCommunityIdOutput: typeof import("./ingestProcessorCommunityId").ingestProcessorCommunityIdOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorCommunityId","ingestProcessorCommunityIdOutput"], () => require("./ingestProcessorCommunityId"));

export { IngestProcessorConvertArgs, IngestProcessorConvertResult, IngestProcessorConvertOutputArgs } from "./ingestProcessorConvert";
export const ingestProcessorConvert: typeof import("./ingestProcessorConvert").ingestProcessorConvert = null as any;
export const ingestProcessorConvertOutput: typeof import("./ingestProcessorConvert").ingestProcessorConvertOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorConvert","ingestProcessorConvertOutput"], () => require("./ingestProcessorConvert"));

export { IngestProcessorCsvArgs, IngestProcessorCsvResult, IngestProcessorCsvOutputArgs } from "./ingestProcessorCsv";
export const ingestProcessorCsv: typeof import("./ingestProcessorCsv").ingestProcessorCsv = null as any;
export const ingestProcessorCsvOutput: typeof import("./ingestProcessorCsv").ingestProcessorCsvOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorCsv","ingestProcessorCsvOutput"], () => require("./ingestProcessorCsv"));

export { IngestProcessorDateArgs, IngestProcessorDateResult, IngestProcessorDateOutputArgs } from "./ingestProcessorDate";
export const ingestProcessorDate: typeof import("./ingestProcessorDate").ingestProcessorDate = null as any;
export const ingestProcessorDateOutput: typeof import("./ingestProcessorDate").ingestProcessorDateOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorDate","ingestProcessorDateOutput"], () => require("./ingestProcessorDate"));

export { IngestProcessorDateIndexNameArgs, IngestProcessorDateIndexNameResult, IngestProcessorDateIndexNameOutputArgs } from "./ingestProcessorDateIndexName";
export const ingestProcessorDateIndexName: typeof import("./ingestProcessorDateIndexName").ingestProcessorDateIndexName = null as any;
export const ingestProcessorDateIndexNameOutput: typeof import("./ingestProcessorDateIndexName").ingestProcessorDateIndexNameOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorDateIndexName","ingestProcessorDateIndexNameOutput"], () => require("./ingestProcessorDateIndexName"));

export { IngestProcessorDissectArgs, IngestProcessorDissectResult, IngestProcessorDissectOutputArgs } from "./ingestProcessorDissect";
export const ingestProcessorDissect: typeof import("./ingestProcessorDissect").ingestProcessorDissect = null as any;
export const ingestProcessorDissectOutput: typeof import("./ingestProcessorDissect").ingestProcessorDissectOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorDissect","ingestProcessorDissectOutput"], () => require("./ingestProcessorDissect"));

export { IngestProcessorDotExpanderArgs, IngestProcessorDotExpanderResult, IngestProcessorDotExpanderOutputArgs } from "./ingestProcessorDotExpander";
export const ingestProcessorDotExpander: typeof import("./ingestProcessorDotExpander").ingestProcessorDotExpander = null as any;
export const ingestProcessorDotExpanderOutput: typeof import("./ingestProcessorDotExpander").ingestProcessorDotExpanderOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorDotExpander","ingestProcessorDotExpanderOutput"], () => require("./ingestProcessorDotExpander"));

export { IngestProcessorDropArgs, IngestProcessorDropResult, IngestProcessorDropOutputArgs } from "./ingestProcessorDrop";
export const ingestProcessorDrop: typeof import("./ingestProcessorDrop").ingestProcessorDrop = null as any;
export const ingestProcessorDropOutput: typeof import("./ingestProcessorDrop").ingestProcessorDropOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorDrop","ingestProcessorDropOutput"], () => require("./ingestProcessorDrop"));

export { IngestProcessorEnrichArgs, IngestProcessorEnrichResult, IngestProcessorEnrichOutputArgs } from "./ingestProcessorEnrich";
export const ingestProcessorEnrich: typeof import("./ingestProcessorEnrich").ingestProcessorEnrich = null as any;
export const ingestProcessorEnrichOutput: typeof import("./ingestProcessorEnrich").ingestProcessorEnrichOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorEnrich","ingestProcessorEnrichOutput"], () => require("./ingestProcessorEnrich"));

export { IngestProcessorFailArgs, IngestProcessorFailResult, IngestProcessorFailOutputArgs } from "./ingestProcessorFail";
export const ingestProcessorFail: typeof import("./ingestProcessorFail").ingestProcessorFail = null as any;
export const ingestProcessorFailOutput: typeof import("./ingestProcessorFail").ingestProcessorFailOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorFail","ingestProcessorFailOutput"], () => require("./ingestProcessorFail"));

export { IngestProcessorFingerprintArgs, IngestProcessorFingerprintResult, IngestProcessorFingerprintOutputArgs } from "./ingestProcessorFingerprint";
export const ingestProcessorFingerprint: typeof import("./ingestProcessorFingerprint").ingestProcessorFingerprint = null as any;
export const ingestProcessorFingerprintOutput: typeof import("./ingestProcessorFingerprint").ingestProcessorFingerprintOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorFingerprint","ingestProcessorFingerprintOutput"], () => require("./ingestProcessorFingerprint"));

export { IngestProcessorForeachArgs, IngestProcessorForeachResult, IngestProcessorForeachOutputArgs } from "./ingestProcessorForeach";
export const ingestProcessorForeach: typeof import("./ingestProcessorForeach").ingestProcessorForeach = null as any;
export const ingestProcessorForeachOutput: typeof import("./ingestProcessorForeach").ingestProcessorForeachOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorForeach","ingestProcessorForeachOutput"], () => require("./ingestProcessorForeach"));

export { IngestProcessorGeoipArgs, IngestProcessorGeoipResult, IngestProcessorGeoipOutputArgs } from "./ingestProcessorGeoip";
export const ingestProcessorGeoip: typeof import("./ingestProcessorGeoip").ingestProcessorGeoip = null as any;
export const ingestProcessorGeoipOutput: typeof import("./ingestProcessorGeoip").ingestProcessorGeoipOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorGeoip","ingestProcessorGeoipOutput"], () => require("./ingestProcessorGeoip"));

export { IngestProcessorGrokArgs, IngestProcessorGrokResult, IngestProcessorGrokOutputArgs } from "./ingestProcessorGrok";
export const ingestProcessorGrok: typeof import("./ingestProcessorGrok").ingestProcessorGrok = null as any;
export const ingestProcessorGrokOutput: typeof import("./ingestProcessorGrok").ingestProcessorGrokOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorGrok","ingestProcessorGrokOutput"], () => require("./ingestProcessorGrok"));

export { IngestProcessorGsubArgs, IngestProcessorGsubResult, IngestProcessorGsubOutputArgs } from "./ingestProcessorGsub";
export const ingestProcessorGsub: typeof import("./ingestProcessorGsub").ingestProcessorGsub = null as any;
export const ingestProcessorGsubOutput: typeof import("./ingestProcessorGsub").ingestProcessorGsubOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorGsub","ingestProcessorGsubOutput"], () => require("./ingestProcessorGsub"));

export { IngestProcessorHtmlStripArgs, IngestProcessorHtmlStripResult, IngestProcessorHtmlStripOutputArgs } from "./ingestProcessorHtmlStrip";
export const ingestProcessorHtmlStrip: typeof import("./ingestProcessorHtmlStrip").ingestProcessorHtmlStrip = null as any;
export const ingestProcessorHtmlStripOutput: typeof import("./ingestProcessorHtmlStrip").ingestProcessorHtmlStripOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorHtmlStrip","ingestProcessorHtmlStripOutput"], () => require("./ingestProcessorHtmlStrip"));

export { IngestProcessorJoinArgs, IngestProcessorJoinResult, IngestProcessorJoinOutputArgs } from "./ingestProcessorJoin";
export const ingestProcessorJoin: typeof import("./ingestProcessorJoin").ingestProcessorJoin = null as any;
export const ingestProcessorJoinOutput: typeof import("./ingestProcessorJoin").ingestProcessorJoinOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorJoin","ingestProcessorJoinOutput"], () => require("./ingestProcessorJoin"));

export { IngestProcessorJsonArgs, IngestProcessorJsonResult, IngestProcessorJsonOutputArgs } from "./ingestProcessorJson";
export const ingestProcessorJson: typeof import("./ingestProcessorJson").ingestProcessorJson = null as any;
export const ingestProcessorJsonOutput: typeof import("./ingestProcessorJson").ingestProcessorJsonOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorJson","ingestProcessorJsonOutput"], () => require("./ingestProcessorJson"));

export { IngestProcessorKvArgs, IngestProcessorKvResult, IngestProcessorKvOutputArgs } from "./ingestProcessorKv";
export const ingestProcessorKv: typeof import("./ingestProcessorKv").ingestProcessorKv = null as any;
export const ingestProcessorKvOutput: typeof import("./ingestProcessorKv").ingestProcessorKvOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorKv","ingestProcessorKvOutput"], () => require("./ingestProcessorKv"));

export { IngestProcessorLowercaseArgs, IngestProcessorLowercaseResult, IngestProcessorLowercaseOutputArgs } from "./ingestProcessorLowercase";
export const ingestProcessorLowercase: typeof import("./ingestProcessorLowercase").ingestProcessorLowercase = null as any;
export const ingestProcessorLowercaseOutput: typeof import("./ingestProcessorLowercase").ingestProcessorLowercaseOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorLowercase","ingestProcessorLowercaseOutput"], () => require("./ingestProcessorLowercase"));

export { IngestProcessorNetworkDirectionArgs, IngestProcessorNetworkDirectionResult, IngestProcessorNetworkDirectionOutputArgs } from "./ingestProcessorNetworkDirection";
export const ingestProcessorNetworkDirection: typeof import("./ingestProcessorNetworkDirection").ingestProcessorNetworkDirection = null as any;
export const ingestProcessorNetworkDirectionOutput: typeof import("./ingestProcessorNetworkDirection").ingestProcessorNetworkDirectionOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorNetworkDirection","ingestProcessorNetworkDirectionOutput"], () => require("./ingestProcessorNetworkDirection"));

export { IngestProcessorPipelineArgs, IngestProcessorPipelineResult, IngestProcessorPipelineOutputArgs } from "./ingestProcessorPipeline";
export const ingestProcessorPipeline: typeof import("./ingestProcessorPipeline").ingestProcessorPipeline = null as any;
export const ingestProcessorPipelineOutput: typeof import("./ingestProcessorPipeline").ingestProcessorPipelineOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorPipeline","ingestProcessorPipelineOutput"], () => require("./ingestProcessorPipeline"));

export { IngestProcessorRegisteredDomainArgs, IngestProcessorRegisteredDomainResult, IngestProcessorRegisteredDomainOutputArgs } from "./ingestProcessorRegisteredDomain";
export const ingestProcessorRegisteredDomain: typeof import("./ingestProcessorRegisteredDomain").ingestProcessorRegisteredDomain = null as any;
export const ingestProcessorRegisteredDomainOutput: typeof import("./ingestProcessorRegisteredDomain").ingestProcessorRegisteredDomainOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorRegisteredDomain","ingestProcessorRegisteredDomainOutput"], () => require("./ingestProcessorRegisteredDomain"));

export { IngestProcessorRemoveArgs, IngestProcessorRemoveResult, IngestProcessorRemoveOutputArgs } from "./ingestProcessorRemove";
export const ingestProcessorRemove: typeof import("./ingestProcessorRemove").ingestProcessorRemove = null as any;
export const ingestProcessorRemoveOutput: typeof import("./ingestProcessorRemove").ingestProcessorRemoveOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorRemove","ingestProcessorRemoveOutput"], () => require("./ingestProcessorRemove"));

export { IngestProcessorRenameArgs, IngestProcessorRenameResult, IngestProcessorRenameOutputArgs } from "./ingestProcessorRename";
export const ingestProcessorRename: typeof import("./ingestProcessorRename").ingestProcessorRename = null as any;
export const ingestProcessorRenameOutput: typeof import("./ingestProcessorRename").ingestProcessorRenameOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorRename","ingestProcessorRenameOutput"], () => require("./ingestProcessorRename"));

export { IngestProcessorScriptArgs, IngestProcessorScriptResult, IngestProcessorScriptOutputArgs } from "./ingestProcessorScript";
export const ingestProcessorScript: typeof import("./ingestProcessorScript").ingestProcessorScript = null as any;
export const ingestProcessorScriptOutput: typeof import("./ingestProcessorScript").ingestProcessorScriptOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorScript","ingestProcessorScriptOutput"], () => require("./ingestProcessorScript"));

export { IngestProcessorSetArgs, IngestProcessorSetResult, IngestProcessorSetOutputArgs } from "./ingestProcessorSet";
export const ingestProcessorSet: typeof import("./ingestProcessorSet").ingestProcessorSet = null as any;
export const ingestProcessorSetOutput: typeof import("./ingestProcessorSet").ingestProcessorSetOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorSet","ingestProcessorSetOutput"], () => require("./ingestProcessorSet"));

export { IngestProcessorSetSecurityUserArgs, IngestProcessorSetSecurityUserResult, IngestProcessorSetSecurityUserOutputArgs } from "./ingestProcessorSetSecurityUser";
export const ingestProcessorSetSecurityUser: typeof import("./ingestProcessorSetSecurityUser").ingestProcessorSetSecurityUser = null as any;
export const ingestProcessorSetSecurityUserOutput: typeof import("./ingestProcessorSetSecurityUser").ingestProcessorSetSecurityUserOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorSetSecurityUser","ingestProcessorSetSecurityUserOutput"], () => require("./ingestProcessorSetSecurityUser"));

export { IngestProcessorSortArgs, IngestProcessorSortResult, IngestProcessorSortOutputArgs } from "./ingestProcessorSort";
export const ingestProcessorSort: typeof import("./ingestProcessorSort").ingestProcessorSort = null as any;
export const ingestProcessorSortOutput: typeof import("./ingestProcessorSort").ingestProcessorSortOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorSort","ingestProcessorSortOutput"], () => require("./ingestProcessorSort"));

export { IngestProcessorSplitArgs, IngestProcessorSplitResult, IngestProcessorSplitOutputArgs } from "./ingestProcessorSplit";
export const ingestProcessorSplit: typeof import("./ingestProcessorSplit").ingestProcessorSplit = null as any;
export const ingestProcessorSplitOutput: typeof import("./ingestProcessorSplit").ingestProcessorSplitOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorSplit","ingestProcessorSplitOutput"], () => require("./ingestProcessorSplit"));

export { IngestProcessorTrimArgs, IngestProcessorTrimResult, IngestProcessorTrimOutputArgs } from "./ingestProcessorTrim";
export const ingestProcessorTrim: typeof import("./ingestProcessorTrim").ingestProcessorTrim = null as any;
export const ingestProcessorTrimOutput: typeof import("./ingestProcessorTrim").ingestProcessorTrimOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorTrim","ingestProcessorTrimOutput"], () => require("./ingestProcessorTrim"));

export { IngestProcessorUppercaseArgs, IngestProcessorUppercaseResult, IngestProcessorUppercaseOutputArgs } from "./ingestProcessorUppercase";
export const ingestProcessorUppercase: typeof import("./ingestProcessorUppercase").ingestProcessorUppercase = null as any;
export const ingestProcessorUppercaseOutput: typeof import("./ingestProcessorUppercase").ingestProcessorUppercaseOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorUppercase","ingestProcessorUppercaseOutput"], () => require("./ingestProcessorUppercase"));

export { IngestProcessorUriPartsArgs, IngestProcessorUriPartsResult, IngestProcessorUriPartsOutputArgs } from "./ingestProcessorUriParts";
export const ingestProcessorUriParts: typeof import("./ingestProcessorUriParts").ingestProcessorUriParts = null as any;
export const ingestProcessorUriPartsOutput: typeof import("./ingestProcessorUriParts").ingestProcessorUriPartsOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorUriParts","ingestProcessorUriPartsOutput"], () => require("./ingestProcessorUriParts"));

export { IngestProcessorUrldecodeArgs, IngestProcessorUrldecodeResult, IngestProcessorUrldecodeOutputArgs } from "./ingestProcessorUrldecode";
export const ingestProcessorUrldecode: typeof import("./ingestProcessorUrldecode").ingestProcessorUrldecode = null as any;
export const ingestProcessorUrldecodeOutput: typeof import("./ingestProcessorUrldecode").ingestProcessorUrldecodeOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorUrldecode","ingestProcessorUrldecodeOutput"], () => require("./ingestProcessorUrldecode"));

export { IngestProcessorUserAgentArgs, IngestProcessorUserAgentResult, IngestProcessorUserAgentOutputArgs } from "./ingestProcessorUserAgent";
export const ingestProcessorUserAgent: typeof import("./ingestProcessorUserAgent").ingestProcessorUserAgent = null as any;
export const ingestProcessorUserAgentOutput: typeof import("./ingestProcessorUserAgent").ingestProcessorUserAgentOutput = null as any;
utilities.lazyLoad(exports, ["ingestProcessorUserAgent","ingestProcessorUserAgentOutput"], () => require("./ingestProcessorUserAgent"));

export { LogstashPipelineArgs, LogstashPipelineState } from "./logstashPipeline";
export type LogstashPipeline = import("./logstashPipeline").LogstashPipeline;
export const LogstashPipeline: typeof import("./logstashPipeline").LogstashPipeline = null as any;
utilities.lazyLoad(exports, ["LogstashPipeline"], () => require("./logstashPipeline"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { SecurityApiKeyArgs, SecurityApiKeyState } from "./securityApiKey";
export type SecurityApiKey = import("./securityApiKey").SecurityApiKey;
export const SecurityApiKey: typeof import("./securityApiKey").SecurityApiKey = null as any;
utilities.lazyLoad(exports, ["SecurityApiKey"], () => require("./securityApiKey"));

export { SecurityRoleArgs, SecurityRoleState } from "./securityRole";
export type SecurityRole = import("./securityRole").SecurityRole;
export const SecurityRole: typeof import("./securityRole").SecurityRole = null as any;
utilities.lazyLoad(exports, ["SecurityRole"], () => require("./securityRole"));

export { SecurityRoleMappingArgs, SecurityRoleMappingState } from "./securityRoleMapping";
export type SecurityRoleMapping = import("./securityRoleMapping").SecurityRoleMapping;
export const SecurityRoleMapping: typeof import("./securityRoleMapping").SecurityRoleMapping = null as any;
utilities.lazyLoad(exports, ["SecurityRoleMapping"], () => require("./securityRoleMapping"));

export { SecuritySystemUserArgs, SecuritySystemUserState } from "./securitySystemUser";
export type SecuritySystemUser = import("./securitySystemUser").SecuritySystemUser;
export const SecuritySystemUser: typeof import("./securitySystemUser").SecuritySystemUser = null as any;
utilities.lazyLoad(exports, ["SecuritySystemUser"], () => require("./securitySystemUser"));

export { SecurityUserArgs, SecurityUserState } from "./securityUser";
export type SecurityUser = import("./securityUser").SecurityUser;
export const SecurityUser: typeof import("./securityUser").SecurityUser = null as any;
utilities.lazyLoad(exports, ["SecurityUser"], () => require("./securityUser"));

export { SnapshotLifecycleArgs, SnapshotLifecycleState } from "./snapshotLifecycle";
export type SnapshotLifecycle = import("./snapshotLifecycle").SnapshotLifecycle;
export const SnapshotLifecycle: typeof import("./snapshotLifecycle").SnapshotLifecycle = null as any;
utilities.lazyLoad(exports, ["SnapshotLifecycle"], () => require("./snapshotLifecycle"));

export { SnapshotRepositoryArgs, SnapshotRepositoryState } from "./snapshotRepository";
export type SnapshotRepository = import("./snapshotRepository").SnapshotRepository;
export const SnapshotRepository: typeof import("./snapshotRepository").SnapshotRepository = null as any;
utilities.lazyLoad(exports, ["SnapshotRepository"], () => require("./snapshotRepository"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "elasticstack:index/clusterSettings:ClusterSettings":
                return new ClusterSettings(name, <any>undefined, { urn })
            case "elasticstack:index/componentTemplate:ComponentTemplate":
                return new ComponentTemplate(name, <any>undefined, { urn })
            case "elasticstack:index/dataStream:DataStream":
                return new DataStream(name, <any>undefined, { urn })
            case "elasticstack:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "elasticstack:index/indexLifecycle:IndexLifecycle":
                return new IndexLifecycle(name, <any>undefined, { urn })
            case "elasticstack:index/indexTemplate:IndexTemplate":
                return new IndexTemplate(name, <any>undefined, { urn })
            case "elasticstack:index/ingestPipeline:IngestPipeline":
                return new IngestPipeline(name, <any>undefined, { urn })
            case "elasticstack:index/logstashPipeline:LogstashPipeline":
                return new LogstashPipeline(name, <any>undefined, { urn })
            case "elasticstack:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "elasticstack:index/securityApiKey:SecurityApiKey":
                return new SecurityApiKey(name, <any>undefined, { urn })
            case "elasticstack:index/securityRole:SecurityRole":
                return new SecurityRole(name, <any>undefined, { urn })
            case "elasticstack:index/securityRoleMapping:SecurityRoleMapping":
                return new SecurityRoleMapping(name, <any>undefined, { urn })
            case "elasticstack:index/securitySystemUser:SecuritySystemUser":
                return new SecuritySystemUser(name, <any>undefined, { urn })
            case "elasticstack:index/securityUser:SecurityUser":
                return new SecurityUser(name, <any>undefined, { urn })
            case "elasticstack:index/snapshotLifecycle:SnapshotLifecycle":
                return new SnapshotLifecycle(name, <any>undefined, { urn })
            case "elasticstack:index/snapshotRepository:SnapshotRepository":
                return new SnapshotRepository(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("elasticstack", "index/clusterSettings", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/componentTemplate", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/dataStream", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/index", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/indexLifecycle", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/indexTemplate", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/ingestPipeline", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/logstashPipeline", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/script", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityApiKey", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityRole", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityRoleMapping", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securitySystemUser", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityUser", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/snapshotLifecycle", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/snapshotRepository", _module)
pulumi.runtime.registerResourcePackage("elasticstack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:elasticstack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
