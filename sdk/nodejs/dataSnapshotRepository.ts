// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source provides the information about the registered snaphosts repositories
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 * import * as elasticstack from "@tonkean/pulumi-elasticstack";
 *
 * const myUrlRepoSnapshotRepository = new elasticstack.SnapshotRepository("myUrlRepoSnapshotRepository", {url: {
 *     url: "https://example.com/repo",
 * }});
 * const myFsRepoSnapshotRepository = new elasticstack.SnapshotRepository("myFsRepoSnapshotRepository", {fs: {
 *     location: "/tmp",
 *     compress: true,
 *     maxRestoreBytesPerSec: "10mb",
 * }});
 * const myFsRepoDataSnapshotRepository = elasticstack.DataSnapshotRepositoryOutput({
 *     name: myFsRepoSnapshotRepository.name,
 * });
 * const myUrlRepoDataSnapshotRepository = elasticstack.DataSnapshotRepositoryOutput({
 *     name: myUrlRepoSnapshotRepository.name,
 * });
 * export const repoFsLocation = myFsRepoSnapshotRepository.fs.apply(fs => fs?.location);
 * export const repoUrl = myUrlRepoSnapshotRepository.url.apply(url => url?.url);
 * ```
 */
export function dataSnapshotRepository(args: DataSnapshotRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<DataSnapshotRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/dataSnapshotRepository:DataSnapshotRepository", {
        "elasticsearchConnection": args.elasticsearchConnection,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking DataSnapshotRepository.
 */
export interface DataSnapshotRepositoryArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: inputs.DataSnapshotRepositoryElasticsearchConnection;
    /**
     * Name of the snapshot repository.
     */
    name: string;
}

/**
 * A collection of values returned by DataSnapshotRepository.
 */
export interface DataSnapshotRepositoryResult {
    /**
     * Azure Blob storage as a repository. Set only if the type of the fetched repo is `azure`.
     */
    readonly azures: outputs.DataSnapshotRepositoryAzure[];
    /**
     * Elasticsearch connection configuration block.
     */
    readonly elasticsearchConnection?: outputs.DataSnapshotRepositoryElasticsearchConnection;
    /**
     * Shared filesystem repository. Set only if the type of the fetched repo is `fs`.
     */
    readonly fs: outputs.DataSnapshotRepositoryF[];
    /**
     * Google Cloud Storage service as a repository. Set only if the type of the fetched repo is `gcs`.
     */
    readonly gcs: outputs.DataSnapshotRepositoryGc[];
    /**
     * HDFS File System as a repository. Set only if the type of the fetched repo is `hdfs`.
     */
    readonly hdfs: outputs.DataSnapshotRepositoryHdf[];
    /**
     * Internal identifier of the resource
     */
    readonly id: string;
    /**
     * Name of the snapshot repository.
     */
    readonly name: string;
    /**
     * AWS S3 as a repository. Set only if the type of the fetched repo is `s3`.
     */
    readonly s3s: outputs.DataSnapshotRepositoryS3[];
    /**
     * Repository type.
     */
    readonly type: string;
    /**
     * URL repository. Set only if the type of the fetched repo is `url`.
     */
    readonly urls: outputs.DataSnapshotRepositoryUrl[];
}
/**
 * This data source provides the information about the registered snaphosts repositories
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 * import * as elasticstack from "@tonkean/pulumi-elasticstack";
 *
 * const myUrlRepoSnapshotRepository = new elasticstack.SnapshotRepository("myUrlRepoSnapshotRepository", {url: {
 *     url: "https://example.com/repo",
 * }});
 * const myFsRepoSnapshotRepository = new elasticstack.SnapshotRepository("myFsRepoSnapshotRepository", {fs: {
 *     location: "/tmp",
 *     compress: true,
 *     maxRestoreBytesPerSec: "10mb",
 * }});
 * const myFsRepoDataSnapshotRepository = elasticstack.DataSnapshotRepositoryOutput({
 *     name: myFsRepoSnapshotRepository.name,
 * });
 * const myUrlRepoDataSnapshotRepository = elasticstack.DataSnapshotRepositoryOutput({
 *     name: myUrlRepoSnapshotRepository.name,
 * });
 * export const repoFsLocation = myFsRepoSnapshotRepository.fs.apply(fs => fs?.location);
 * export const repoUrl = myUrlRepoSnapshotRepository.url.apply(url => url?.url);
 * ```
 */
export function dataSnapshotRepositoryOutput(args: DataSnapshotRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<DataSnapshotRepositoryResult> {
    return pulumi.output(args).apply((a: any) => dataSnapshotRepository(a, opts))
}

/**
 * A collection of arguments for invoking DataSnapshotRepository.
 */
export interface DataSnapshotRepositoryOutputArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.DataSnapshotRepositoryElasticsearchConnectionArgs>;
    /**
     * Name of the snapshot repository.
     */
    name: pulumi.Input<string>;
}
