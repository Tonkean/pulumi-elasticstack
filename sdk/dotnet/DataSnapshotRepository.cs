// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    public static class DataSnapshotRepository
    {
        /// <summary>
        /// This data source provides the information about the registered snaphosts repositories
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myUrlRepoSnapshotRepository = new Elasticstack.SnapshotRepository("myUrlRepoSnapshotRepository", new()
        ///     {
        ///         Url = new Elasticstack.Inputs.SnapshotRepositoryUrlArgs
        ///         {
        ///             Url = "https://example.com/repo",
        ///         },
        ///     });
        /// 
        ///     var myFsRepoSnapshotRepository = new Elasticstack.SnapshotRepository("myFsRepoSnapshotRepository", new()
        ///     {
        ///         Fs = new Elasticstack.Inputs.SnapshotRepositoryFsArgs
        ///         {
        ///             Location = "/tmp",
        ///             Compress = true,
        ///             MaxRestoreBytesPerSec = "10mb",
        ///         },
        ///     });
        /// 
        ///     var myFsRepoDataSnapshotRepository = Elasticstack.DataSnapshotRepository.Invoke(new()
        ///     {
        ///         Name = myFsRepoSnapshotRepository.Name,
        ///     });
        /// 
        ///     var myUrlRepoDataSnapshotRepository = Elasticstack.DataSnapshotRepository.Invoke(new()
        ///     {
        ///         Name = myUrlRepoSnapshotRepository.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["repoFsLocation"] = myFsRepoSnapshotRepository.Fs.Apply(fs =&gt; fs?.Location),
        ///         ["repoUrl"] = myUrlRepoSnapshotRepository.Url.Apply(url =&gt; url?.Url),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<DataSnapshotRepositoryResult> InvokeAsync(DataSnapshotRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<DataSnapshotRepositoryResult>("elasticstack:index/dataSnapshotRepository:DataSnapshotRepository", args ?? new DataSnapshotRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the information about the registered snaphosts repositories
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myUrlRepoSnapshotRepository = new Elasticstack.SnapshotRepository("myUrlRepoSnapshotRepository", new()
        ///     {
        ///         Url = new Elasticstack.Inputs.SnapshotRepositoryUrlArgs
        ///         {
        ///             Url = "https://example.com/repo",
        ///         },
        ///     });
        /// 
        ///     var myFsRepoSnapshotRepository = new Elasticstack.SnapshotRepository("myFsRepoSnapshotRepository", new()
        ///     {
        ///         Fs = new Elasticstack.Inputs.SnapshotRepositoryFsArgs
        ///         {
        ///             Location = "/tmp",
        ///             Compress = true,
        ///             MaxRestoreBytesPerSec = "10mb",
        ///         },
        ///     });
        /// 
        ///     var myFsRepoDataSnapshotRepository = Elasticstack.DataSnapshotRepository.Invoke(new()
        ///     {
        ///         Name = myFsRepoSnapshotRepository.Name,
        ///     });
        /// 
        ///     var myUrlRepoDataSnapshotRepository = Elasticstack.DataSnapshotRepository.Invoke(new()
        ///     {
        ///         Name = myUrlRepoSnapshotRepository.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["repoFsLocation"] = myFsRepoSnapshotRepository.Fs.Apply(fs =&gt; fs?.Location),
        ///         ["repoUrl"] = myUrlRepoSnapshotRepository.Url.Apply(url =&gt; url?.Url),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<DataSnapshotRepositoryResult> Invoke(DataSnapshotRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<DataSnapshotRepositoryResult>("elasticstack:index/dataSnapshotRepository:DataSnapshotRepository", args ?? new DataSnapshotRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class DataSnapshotRepositoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Elasticsearch connection configuration block.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Inputs.DataSnapshotRepositoryElasticsearchConnectionArgs? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Name of the snapshot repository.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public DataSnapshotRepositoryArgs()
        {
        }
        public static new DataSnapshotRepositoryArgs Empty => new DataSnapshotRepositoryArgs();
    }

    public sealed class DataSnapshotRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Elasticsearch connection configuration block.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.DataSnapshotRepositoryElasticsearchConnectionInputArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Name of the snapshot repository.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public DataSnapshotRepositoryInvokeArgs()
        {
        }
        public static new DataSnapshotRepositoryInvokeArgs Empty => new DataSnapshotRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class DataSnapshotRepositoryResult
    {
        /// <summary>
        /// Azure Blob storage as a repository. Set only if the type of the fetched repo is `azure`.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSnapshotRepositoryAzureResult> Azures;
        /// <summary>
        /// Elasticsearch connection configuration block.
        /// </summary>
        public readonly Outputs.DataSnapshotRepositoryElasticsearchConnectionResult? ElasticsearchConnection;
        /// <summary>
        /// Shared filesystem repository. Set only if the type of the fetched repo is `fs`.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSnapshotRepositoryFResult> Fs;
        /// <summary>
        /// Google Cloud Storage service as a repository. Set only if the type of the fetched repo is `gcs`.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSnapshotRepositoryGcResult> Gcs;
        /// <summary>
        /// HDFS File System as a repository. Set only if the type of the fetched repo is `hdfs`.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSnapshotRepositoryHdfResult> Hdfs;
        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the snapshot repository.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// AWS S3 as a repository. Set only if the type of the fetched repo is `s3`.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSnapshotRepositoryS3Result> S3s;
        /// <summary>
        /// Repository type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// URL repository. Set only if the type of the fetched repo is `url`.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSnapshotRepositoryUrlResult> Urls;

        [OutputConstructor]
        private DataSnapshotRepositoryResult(
            ImmutableArray<Outputs.DataSnapshotRepositoryAzureResult> azures,

            Outputs.DataSnapshotRepositoryElasticsearchConnectionResult? elasticsearchConnection,

            ImmutableArray<Outputs.DataSnapshotRepositoryFResult> fs,

            ImmutableArray<Outputs.DataSnapshotRepositoryGcResult> gcs,

            ImmutableArray<Outputs.DataSnapshotRepositoryHdfResult> hdfs,

            string id,

            string name,

            ImmutableArray<Outputs.DataSnapshotRepositoryS3Result> s3s,

            string type,

            ImmutableArray<Outputs.DataSnapshotRepositoryUrlResult> urls)
        {
            Azures = azures;
            ElasticsearchConnection = elasticsearchConnection;
            Fs = fs;
            Gcs = gcs;
            Hdfs = hdfs;
            Id = id;
            Name = name;
            S3s = s3s;
            Type = type;
            Urls = urls;
        }
    }
}
