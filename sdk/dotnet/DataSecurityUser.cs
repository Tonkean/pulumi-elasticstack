// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    public static class DataSecurityUser
    {
        /// <summary>
        /// Use this data source to get information about existing Elasticsearch user. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user.html".
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userDataSecurityUser = Elasticstack.DataSecurityUser.Invoke(new()
        ///     {
        ///         Username = "elastic",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["user"] = userDataSecurityUser.Apply(dataSecurityUserResult =&gt; dataSecurityUserResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<DataSecurityUserResult> InvokeAsync(DataSecurityUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<DataSecurityUserResult>("elasticstack:index/dataSecurityUser:DataSecurityUser", args ?? new DataSecurityUserArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about existing Elasticsearch user. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user.html".
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userDataSecurityUser = Elasticstack.DataSecurityUser.Invoke(new()
        ///     {
        ///         Username = "elastic",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["user"] = userDataSecurityUser.Apply(dataSecurityUserResult =&gt; dataSecurityUserResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<DataSecurityUserResult> Invoke(DataSecurityUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<DataSecurityUserResult>("elasticstack:index/dataSecurityUser:DataSecurityUser", args ?? new DataSecurityUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class DataSecurityUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Elasticsearch connection configuration block.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Inputs.DataSecurityUserElasticsearchConnectionArgs? ElasticsearchConnection { get; set; }

        /// <summary>
        /// An identifier for the user
        /// </summary>
        [Input("username", required: true)]
        public string Username { get; set; } = null!;

        public DataSecurityUserArgs()
        {
        }
        public static new DataSecurityUserArgs Empty => new DataSecurityUserArgs();
    }

    public sealed class DataSecurityUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Elasticsearch connection configuration block.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.DataSecurityUserElasticsearchConnectionInputArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// An identifier for the user
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public DataSecurityUserInvokeArgs()
        {
        }
        public static new DataSecurityUserInvokeArgs Empty => new DataSecurityUserInvokeArgs();
    }


    [OutputType]
    public sealed class DataSecurityUserResult
    {
        /// <summary>
        /// Elasticsearch connection configuration block.
        /// </summary>
        public readonly Outputs.DataSecurityUserElasticsearchConnectionResult? ElasticsearchConnection;
        /// <summary>
        /// The email of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Specifies whether the user is enabled. The default value is true.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The full name of the user.
        /// </summary>
        public readonly string FullName;
        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Arbitrary metadata that you want to associate with the user.
        /// </summary>
        public readonly string Metadata;
        /// <summary>
        /// A set of roles the user has. The roles determine the userâ€™s access permissions. Default is [].
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// An identifier for the user
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private DataSecurityUserResult(
            Outputs.DataSecurityUserElasticsearchConnectionResult? elasticsearchConnection,

            string email,

            bool enabled,

            string fullName,

            string id,

            string metadata,

            ImmutableArray<string> roles,

            string username)
        {
            ElasticsearchConnection = elasticsearchConnection;
            Email = email;
            Enabled = enabled;
            FullName = fullName;
            Id = id;
            Metadata = metadata;
            Roles = roles;
            Username = username;
        }
    }
}
