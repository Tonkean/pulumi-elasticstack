// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates a stored script or search template. See https://www.elastic.co/guide/en/elasticsearch/reference/current/create-stored-script-api.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elasticstack.NewElasticstackElasticsearchScript(ctx, "myScript", &elasticstack.ElasticstackElasticsearchScriptArgs{
//				ScriptId: pulumi.String("my_script"),
//				Lang:     pulumi.String("painless"),
//				Source:   pulumi.String("Math.log(_score * 2) + params['my_modifier']"),
//				Context:  pulumi.String("score"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"query": map[string]interface{}{
//					"match": map[string]interface{}{
//						"message": "{{query_string}}",
//					},
//				},
//				"from": "{{from}}",
//				"size": "{{size}}",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"query_string": "My query string",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = elasticstack.NewElasticstackElasticsearchScript(ctx, "mySearchTemplate", &elasticstack.ElasticstackElasticsearchScriptArgs{
//				ScriptId: pulumi.String("my_search_template"),
//				Lang:     pulumi.String("mustache"),
//				Source:   pulumi.String(json0),
//				Params:   pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import elasticstack:index/elasticstackElasticsearchScript:ElasticstackElasticsearchScript my_script <cluster_uuid>/<script id>
//
// ```
type ElasticstackElasticsearchScript struct {
	pulumi.CustomResourceState

	// Context in which the script or search template should run.
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchScriptElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Script language. For search templates, use `mustache`.
	Lang pulumi.StringOutput `pulumi:"lang"`
	// Parameters for the script or search template.
	Params pulumi.StringPtrOutput `pulumi:"params"`
	// Identifier for the stored script. Must be unique within the cluster.
	ScriptId pulumi.StringOutput `pulumi:"scriptId"`
	// For scripts, a string containing the script. For search templates, an object containing the search template.
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewElasticstackElasticsearchScript registers a new resource with the given unique name, arguments, and options.
func NewElasticstackElasticsearchScript(ctx *pulumi.Context,
	name string, args *ElasticstackElasticsearchScriptArgs, opts ...pulumi.ResourceOption) (*ElasticstackElasticsearchScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lang == nil {
		return nil, errors.New("invalid value for required argument 'Lang'")
	}
	if args.ScriptId == nil {
		return nil, errors.New("invalid value for required argument 'ScriptId'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	var resource ElasticstackElasticsearchScript
	err := ctx.RegisterResource("elasticstack:index/elasticstackElasticsearchScript:ElasticstackElasticsearchScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticstackElasticsearchScript gets an existing ElasticstackElasticsearchScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticstackElasticsearchScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticstackElasticsearchScriptState, opts ...pulumi.ResourceOption) (*ElasticstackElasticsearchScript, error) {
	var resource ElasticstackElasticsearchScript
	err := ctx.ReadResource("elasticstack:index/elasticstackElasticsearchScript:ElasticstackElasticsearchScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticstackElasticsearchScript resources.
type elasticstackElasticsearchScriptState struct {
	// Context in which the script or search template should run.
	Context *string `pulumi:"context"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchScriptElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Script language. For search templates, use `mustache`.
	Lang *string `pulumi:"lang"`
	// Parameters for the script or search template.
	Params *string `pulumi:"params"`
	// Identifier for the stored script. Must be unique within the cluster.
	ScriptId *string `pulumi:"scriptId"`
	// For scripts, a string containing the script. For search templates, an object containing the search template.
	Source *string `pulumi:"source"`
}

type ElasticstackElasticsearchScriptState struct {
	// Context in which the script or search template should run.
	Context pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchScriptElasticsearchConnectionPtrInput
	// Script language. For search templates, use `mustache`.
	Lang pulumi.StringPtrInput
	// Parameters for the script or search template.
	Params pulumi.StringPtrInput
	// Identifier for the stored script. Must be unique within the cluster.
	ScriptId pulumi.StringPtrInput
	// For scripts, a string containing the script. For search templates, an object containing the search template.
	Source pulumi.StringPtrInput
}

func (ElasticstackElasticsearchScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticstackElasticsearchScriptState)(nil)).Elem()
}

type elasticstackElasticsearchScriptArgs struct {
	// Context in which the script or search template should run.
	Context *string `pulumi:"context"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchScriptElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Script language. For search templates, use `mustache`.
	Lang string `pulumi:"lang"`
	// Parameters for the script or search template.
	Params *string `pulumi:"params"`
	// Identifier for the stored script. Must be unique within the cluster.
	ScriptId string `pulumi:"scriptId"`
	// For scripts, a string containing the script. For search templates, an object containing the search template.
	Source string `pulumi:"source"`
}

// The set of arguments for constructing a ElasticstackElasticsearchScript resource.
type ElasticstackElasticsearchScriptArgs struct {
	// Context in which the script or search template should run.
	Context pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchScriptElasticsearchConnectionPtrInput
	// Script language. For search templates, use `mustache`.
	Lang pulumi.StringInput
	// Parameters for the script or search template.
	Params pulumi.StringPtrInput
	// Identifier for the stored script. Must be unique within the cluster.
	ScriptId pulumi.StringInput
	// For scripts, a string containing the script. For search templates, an object containing the search template.
	Source pulumi.StringInput
}

func (ElasticstackElasticsearchScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticstackElasticsearchScriptArgs)(nil)).Elem()
}

type ElasticstackElasticsearchScriptInput interface {
	pulumi.Input

	ToElasticstackElasticsearchScriptOutput() ElasticstackElasticsearchScriptOutput
	ToElasticstackElasticsearchScriptOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptOutput
}

func (*ElasticstackElasticsearchScript) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticstackElasticsearchScript)(nil)).Elem()
}

func (i *ElasticstackElasticsearchScript) ToElasticstackElasticsearchScriptOutput() ElasticstackElasticsearchScriptOutput {
	return i.ToElasticstackElasticsearchScriptOutputWithContext(context.Background())
}

func (i *ElasticstackElasticsearchScript) ToElasticstackElasticsearchScriptOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchScriptOutput)
}

// ElasticstackElasticsearchScriptArrayInput is an input type that accepts ElasticstackElasticsearchScriptArray and ElasticstackElasticsearchScriptArrayOutput values.
// You can construct a concrete instance of `ElasticstackElasticsearchScriptArrayInput` via:
//
//	ElasticstackElasticsearchScriptArray{ ElasticstackElasticsearchScriptArgs{...} }
type ElasticstackElasticsearchScriptArrayInput interface {
	pulumi.Input

	ToElasticstackElasticsearchScriptArrayOutput() ElasticstackElasticsearchScriptArrayOutput
	ToElasticstackElasticsearchScriptArrayOutputWithContext(context.Context) ElasticstackElasticsearchScriptArrayOutput
}

type ElasticstackElasticsearchScriptArray []ElasticstackElasticsearchScriptInput

func (ElasticstackElasticsearchScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticstackElasticsearchScript)(nil)).Elem()
}

func (i ElasticstackElasticsearchScriptArray) ToElasticstackElasticsearchScriptArrayOutput() ElasticstackElasticsearchScriptArrayOutput {
	return i.ToElasticstackElasticsearchScriptArrayOutputWithContext(context.Background())
}

func (i ElasticstackElasticsearchScriptArray) ToElasticstackElasticsearchScriptArrayOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchScriptArrayOutput)
}

// ElasticstackElasticsearchScriptMapInput is an input type that accepts ElasticstackElasticsearchScriptMap and ElasticstackElasticsearchScriptMapOutput values.
// You can construct a concrete instance of `ElasticstackElasticsearchScriptMapInput` via:
//
//	ElasticstackElasticsearchScriptMap{ "key": ElasticstackElasticsearchScriptArgs{...} }
type ElasticstackElasticsearchScriptMapInput interface {
	pulumi.Input

	ToElasticstackElasticsearchScriptMapOutput() ElasticstackElasticsearchScriptMapOutput
	ToElasticstackElasticsearchScriptMapOutputWithContext(context.Context) ElasticstackElasticsearchScriptMapOutput
}

type ElasticstackElasticsearchScriptMap map[string]ElasticstackElasticsearchScriptInput

func (ElasticstackElasticsearchScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticstackElasticsearchScript)(nil)).Elem()
}

func (i ElasticstackElasticsearchScriptMap) ToElasticstackElasticsearchScriptMapOutput() ElasticstackElasticsearchScriptMapOutput {
	return i.ToElasticstackElasticsearchScriptMapOutputWithContext(context.Background())
}

func (i ElasticstackElasticsearchScriptMap) ToElasticstackElasticsearchScriptMapOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchScriptMapOutput)
}

type ElasticstackElasticsearchScriptOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticstackElasticsearchScript)(nil)).Elem()
}

func (o ElasticstackElasticsearchScriptOutput) ToElasticstackElasticsearchScriptOutput() ElasticstackElasticsearchScriptOutput {
	return o
}

func (o ElasticstackElasticsearchScriptOutput) ToElasticstackElasticsearchScriptOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptOutput {
	return o
}

// Context in which the script or search template should run.
func (o ElasticstackElasticsearchScriptOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchScript) pulumi.StringPtrOutput { return v.Context }).(pulumi.StringPtrOutput)
}

// Elasticsearch connection configuration block.
func (o ElasticstackElasticsearchScriptOutput) ElasticsearchConnection() ElasticstackElasticsearchScriptElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchScript) ElasticstackElasticsearchScriptElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(ElasticstackElasticsearchScriptElasticsearchConnectionPtrOutput)
}

// Script language. For search templates, use `mustache`.
func (o ElasticstackElasticsearchScriptOutput) Lang() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchScript) pulumi.StringOutput { return v.Lang }).(pulumi.StringOutput)
}

// Parameters for the script or search template.
func (o ElasticstackElasticsearchScriptOutput) Params() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchScript) pulumi.StringPtrOutput { return v.Params }).(pulumi.StringPtrOutput)
}

// Identifier for the stored script. Must be unique within the cluster.
func (o ElasticstackElasticsearchScriptOutput) ScriptId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchScript) pulumi.StringOutput { return v.ScriptId }).(pulumi.StringOutput)
}

// For scripts, a string containing the script. For search templates, an object containing the search template.
func (o ElasticstackElasticsearchScriptOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchScript) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type ElasticstackElasticsearchScriptArrayOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticstackElasticsearchScript)(nil)).Elem()
}

func (o ElasticstackElasticsearchScriptArrayOutput) ToElasticstackElasticsearchScriptArrayOutput() ElasticstackElasticsearchScriptArrayOutput {
	return o
}

func (o ElasticstackElasticsearchScriptArrayOutput) ToElasticstackElasticsearchScriptArrayOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptArrayOutput {
	return o
}

func (o ElasticstackElasticsearchScriptArrayOutput) Index(i pulumi.IntInput) ElasticstackElasticsearchScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticstackElasticsearchScript {
		return vs[0].([]*ElasticstackElasticsearchScript)[vs[1].(int)]
	}).(ElasticstackElasticsearchScriptOutput)
}

type ElasticstackElasticsearchScriptMapOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticstackElasticsearchScript)(nil)).Elem()
}

func (o ElasticstackElasticsearchScriptMapOutput) ToElasticstackElasticsearchScriptMapOutput() ElasticstackElasticsearchScriptMapOutput {
	return o
}

func (o ElasticstackElasticsearchScriptMapOutput) ToElasticstackElasticsearchScriptMapOutputWithContext(ctx context.Context) ElasticstackElasticsearchScriptMapOutput {
	return o
}

func (o ElasticstackElasticsearchScriptMapOutput) MapIndex(k pulumi.StringInput) ElasticstackElasticsearchScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticstackElasticsearchScript {
		return vs[0].(map[string]*ElasticstackElasticsearchScript)[vs[1].(string)]
	}).(ElasticstackElasticsearchScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchScriptInput)(nil)).Elem(), &ElasticstackElasticsearchScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchScriptArrayInput)(nil)).Elem(), ElasticstackElasticsearchScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchScriptMapInput)(nil)).Elem(), ElasticstackElasticsearchScriptMap{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchScriptOutput{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchScriptArrayOutput{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchScriptMapOutput{})
}
