// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates lifecycle policy. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-index-lifecycle.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"box_type": "hot",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = elasticstack.NewElasticstackElasticsearchIndexLifecycle(ctx, "myIlm", &elasticstack.ElasticstackElasticsearchIndexLifecycleArgs{
//				Hot: &elasticstack.ElasticstackElasticsearchIndexLifecycleHotArgs{
//					MinAge: pulumi.String("1h"),
//					SetPriority: &elasticstack.ElasticstackElasticsearchIndexLifecycleHotSetPriorityArgs{
//						Priority: pulumi.Int(0),
//					},
//					Rollover: &elasticstack.ElasticstackElasticsearchIndexLifecycleHotRolloverArgs{
//						MaxAge: pulumi.String("1d"),
//					},
//					Readonly: nil,
//				},
//				Warm: &elasticstack.ElasticstackElasticsearchIndexLifecycleWarmArgs{
//					MinAge: pulumi.String("0ms"),
//					SetPriority: &elasticstack.ElasticstackElasticsearchIndexLifecycleWarmSetPriorityArgs{
//						Priority: pulumi.Int(10),
//					},
//					Readonly: nil,
//					Allocate: &elasticstack.ElasticstackElasticsearchIndexLifecycleWarmAllocateArgs{
//						Exclude:            pulumi.String(json0),
//						NumberOfReplicas:   pulumi.Int(1),
//						TotalShardsPerNode: pulumi.Int(200),
//					},
//				},
//				Delete: &elasticstack.ElasticstackElasticsearchIndexLifecycleDeleteArgs{
//					MinAge: pulumi.String("2d"),
//					Delete: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import elasticstack:index/elasticstackElasticsearchIndexLifecycle:ElasticstackElasticsearchIndexLifecycle my_ilm <cluster_uuid>/<ilm_name>
//
// ```
type ElasticstackElasticsearchIndexLifecycle struct {
	pulumi.CustomResourceState

	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold ElasticstackElasticsearchIndexLifecycleColdPtrOutput `pulumi:"cold"`
	// The index is no longer needed and can safely be removed.
	Delete ElasticstackElasticsearchIndexLifecycleDeletePtrOutput `pulumi:"delete"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchIndexLifecycleElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen ElasticstackElasticsearchIndexLifecycleFrozenPtrOutput `pulumi:"frozen"`
	// The index is actively being updated and queried.
	Hot ElasticstackElasticsearchIndexLifecycleHotPtrOutput `pulumi:"hot"`
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// The DateTime of the last modification.
	ModifiedDate pulumi.StringOutput `pulumi:"modifiedDate"`
	// Identifier for the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The index is no longer being updated but is still being queried.
	Warm ElasticstackElasticsearchIndexLifecycleWarmPtrOutput `pulumi:"warm"`
}

// NewElasticstackElasticsearchIndexLifecycle registers a new resource with the given unique name, arguments, and options.
func NewElasticstackElasticsearchIndexLifecycle(ctx *pulumi.Context,
	name string, args *ElasticstackElasticsearchIndexLifecycleArgs, opts ...pulumi.ResourceOption) (*ElasticstackElasticsearchIndexLifecycle, error) {
	if args == nil {
		args = &ElasticstackElasticsearchIndexLifecycleArgs{}
	}

	var resource ElasticstackElasticsearchIndexLifecycle
	err := ctx.RegisterResource("elasticstack:index/elasticstackElasticsearchIndexLifecycle:ElasticstackElasticsearchIndexLifecycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticstackElasticsearchIndexLifecycle gets an existing ElasticstackElasticsearchIndexLifecycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticstackElasticsearchIndexLifecycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticstackElasticsearchIndexLifecycleState, opts ...pulumi.ResourceOption) (*ElasticstackElasticsearchIndexLifecycle, error) {
	var resource ElasticstackElasticsearchIndexLifecycle
	err := ctx.ReadResource("elasticstack:index/elasticstackElasticsearchIndexLifecycle:ElasticstackElasticsearchIndexLifecycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticstackElasticsearchIndexLifecycle resources.
type elasticstackElasticsearchIndexLifecycleState struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold *ElasticstackElasticsearchIndexLifecycleCold `pulumi:"cold"`
	// The index is no longer needed and can safely be removed.
	Delete *ElasticstackElasticsearchIndexLifecycleDelete `pulumi:"delete"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchIndexLifecycleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen *ElasticstackElasticsearchIndexLifecycleFrozen `pulumi:"frozen"`
	// The index is actively being updated and queried.
	Hot *ElasticstackElasticsearchIndexLifecycleHot `pulumi:"hot"`
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata *string `pulumi:"metadata"`
	// The DateTime of the last modification.
	ModifiedDate *string `pulumi:"modifiedDate"`
	// Identifier for the policy.
	Name *string `pulumi:"name"`
	// The index is no longer being updated but is still being queried.
	Warm *ElasticstackElasticsearchIndexLifecycleWarm `pulumi:"warm"`
}

type ElasticstackElasticsearchIndexLifecycleState struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold ElasticstackElasticsearchIndexLifecycleColdPtrInput
	// The index is no longer needed and can safely be removed.
	Delete ElasticstackElasticsearchIndexLifecycleDeletePtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchIndexLifecycleElasticsearchConnectionPtrInput
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen ElasticstackElasticsearchIndexLifecycleFrozenPtrInput
	// The index is actively being updated and queried.
	Hot ElasticstackElasticsearchIndexLifecycleHotPtrInput
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata pulumi.StringPtrInput
	// The DateTime of the last modification.
	ModifiedDate pulumi.StringPtrInput
	// Identifier for the policy.
	Name pulumi.StringPtrInput
	// The index is no longer being updated but is still being queried.
	Warm ElasticstackElasticsearchIndexLifecycleWarmPtrInput
}

func (ElasticstackElasticsearchIndexLifecycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticstackElasticsearchIndexLifecycleState)(nil)).Elem()
}

type elasticstackElasticsearchIndexLifecycleArgs struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold *ElasticstackElasticsearchIndexLifecycleCold `pulumi:"cold"`
	// The index is no longer needed and can safely be removed.
	Delete *ElasticstackElasticsearchIndexLifecycleDelete `pulumi:"delete"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchIndexLifecycleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen *ElasticstackElasticsearchIndexLifecycleFrozen `pulumi:"frozen"`
	// The index is actively being updated and queried.
	Hot *ElasticstackElasticsearchIndexLifecycleHot `pulumi:"hot"`
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata *string `pulumi:"metadata"`
	// Identifier for the policy.
	Name *string `pulumi:"name"`
	// The index is no longer being updated but is still being queried.
	Warm *ElasticstackElasticsearchIndexLifecycleWarm `pulumi:"warm"`
}

// The set of arguments for constructing a ElasticstackElasticsearchIndexLifecycle resource.
type ElasticstackElasticsearchIndexLifecycleArgs struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold ElasticstackElasticsearchIndexLifecycleColdPtrInput
	// The index is no longer needed and can safely be removed.
	Delete ElasticstackElasticsearchIndexLifecycleDeletePtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchIndexLifecycleElasticsearchConnectionPtrInput
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen ElasticstackElasticsearchIndexLifecycleFrozenPtrInput
	// The index is actively being updated and queried.
	Hot ElasticstackElasticsearchIndexLifecycleHotPtrInput
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata pulumi.StringPtrInput
	// Identifier for the policy.
	Name pulumi.StringPtrInput
	// The index is no longer being updated but is still being queried.
	Warm ElasticstackElasticsearchIndexLifecycleWarmPtrInput
}

func (ElasticstackElasticsearchIndexLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticstackElasticsearchIndexLifecycleArgs)(nil)).Elem()
}

type ElasticstackElasticsearchIndexLifecycleInput interface {
	pulumi.Input

	ToElasticstackElasticsearchIndexLifecycleOutput() ElasticstackElasticsearchIndexLifecycleOutput
	ToElasticstackElasticsearchIndexLifecycleOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleOutput
}

func (*ElasticstackElasticsearchIndexLifecycle) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticstackElasticsearchIndexLifecycle)(nil)).Elem()
}

func (i *ElasticstackElasticsearchIndexLifecycle) ToElasticstackElasticsearchIndexLifecycleOutput() ElasticstackElasticsearchIndexLifecycleOutput {
	return i.ToElasticstackElasticsearchIndexLifecycleOutputWithContext(context.Background())
}

func (i *ElasticstackElasticsearchIndexLifecycle) ToElasticstackElasticsearchIndexLifecycleOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchIndexLifecycleOutput)
}

// ElasticstackElasticsearchIndexLifecycleArrayInput is an input type that accepts ElasticstackElasticsearchIndexLifecycleArray and ElasticstackElasticsearchIndexLifecycleArrayOutput values.
// You can construct a concrete instance of `ElasticstackElasticsearchIndexLifecycleArrayInput` via:
//
//	ElasticstackElasticsearchIndexLifecycleArray{ ElasticstackElasticsearchIndexLifecycleArgs{...} }
type ElasticstackElasticsearchIndexLifecycleArrayInput interface {
	pulumi.Input

	ToElasticstackElasticsearchIndexLifecycleArrayOutput() ElasticstackElasticsearchIndexLifecycleArrayOutput
	ToElasticstackElasticsearchIndexLifecycleArrayOutputWithContext(context.Context) ElasticstackElasticsearchIndexLifecycleArrayOutput
}

type ElasticstackElasticsearchIndexLifecycleArray []ElasticstackElasticsearchIndexLifecycleInput

func (ElasticstackElasticsearchIndexLifecycleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticstackElasticsearchIndexLifecycle)(nil)).Elem()
}

func (i ElasticstackElasticsearchIndexLifecycleArray) ToElasticstackElasticsearchIndexLifecycleArrayOutput() ElasticstackElasticsearchIndexLifecycleArrayOutput {
	return i.ToElasticstackElasticsearchIndexLifecycleArrayOutputWithContext(context.Background())
}

func (i ElasticstackElasticsearchIndexLifecycleArray) ToElasticstackElasticsearchIndexLifecycleArrayOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchIndexLifecycleArrayOutput)
}

// ElasticstackElasticsearchIndexLifecycleMapInput is an input type that accepts ElasticstackElasticsearchIndexLifecycleMap and ElasticstackElasticsearchIndexLifecycleMapOutput values.
// You can construct a concrete instance of `ElasticstackElasticsearchIndexLifecycleMapInput` via:
//
//	ElasticstackElasticsearchIndexLifecycleMap{ "key": ElasticstackElasticsearchIndexLifecycleArgs{...} }
type ElasticstackElasticsearchIndexLifecycleMapInput interface {
	pulumi.Input

	ToElasticstackElasticsearchIndexLifecycleMapOutput() ElasticstackElasticsearchIndexLifecycleMapOutput
	ToElasticstackElasticsearchIndexLifecycleMapOutputWithContext(context.Context) ElasticstackElasticsearchIndexLifecycleMapOutput
}

type ElasticstackElasticsearchIndexLifecycleMap map[string]ElasticstackElasticsearchIndexLifecycleInput

func (ElasticstackElasticsearchIndexLifecycleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticstackElasticsearchIndexLifecycle)(nil)).Elem()
}

func (i ElasticstackElasticsearchIndexLifecycleMap) ToElasticstackElasticsearchIndexLifecycleMapOutput() ElasticstackElasticsearchIndexLifecycleMapOutput {
	return i.ToElasticstackElasticsearchIndexLifecycleMapOutputWithContext(context.Background())
}

func (i ElasticstackElasticsearchIndexLifecycleMap) ToElasticstackElasticsearchIndexLifecycleMapOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchIndexLifecycleMapOutput)
}

type ElasticstackElasticsearchIndexLifecycleOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchIndexLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticstackElasticsearchIndexLifecycle)(nil)).Elem()
}

func (o ElasticstackElasticsearchIndexLifecycleOutput) ToElasticstackElasticsearchIndexLifecycleOutput() ElasticstackElasticsearchIndexLifecycleOutput {
	return o
}

func (o ElasticstackElasticsearchIndexLifecycleOutput) ToElasticstackElasticsearchIndexLifecycleOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleOutput {
	return o
}

// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Cold() ElasticstackElasticsearchIndexLifecycleColdPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) ElasticstackElasticsearchIndexLifecycleColdPtrOutput {
		return v.Cold
	}).(ElasticstackElasticsearchIndexLifecycleColdPtrOutput)
}

// The index is no longer needed and can safely be removed.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Delete() ElasticstackElasticsearchIndexLifecycleDeletePtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) ElasticstackElasticsearchIndexLifecycleDeletePtrOutput {
		return v.Delete
	}).(ElasticstackElasticsearchIndexLifecycleDeletePtrOutput)
}

// Elasticsearch connection configuration block.
func (o ElasticstackElasticsearchIndexLifecycleOutput) ElasticsearchConnection() ElasticstackElasticsearchIndexLifecycleElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) ElasticstackElasticsearchIndexLifecycleElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(ElasticstackElasticsearchIndexLifecycleElasticsearchConnectionPtrOutput)
}

// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Frozen() ElasticstackElasticsearchIndexLifecycleFrozenPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) ElasticstackElasticsearchIndexLifecycleFrozenPtrOutput {
		return v.Frozen
	}).(ElasticstackElasticsearchIndexLifecycleFrozenPtrOutput)
}

// The index is actively being updated and queried.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Hot() ElasticstackElasticsearchIndexLifecycleHotPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) ElasticstackElasticsearchIndexLifecycleHotPtrOutput {
		return v.Hot
	}).(ElasticstackElasticsearchIndexLifecycleHotPtrOutput)
}

// Optional user metadata about the ilm policy. Must be valid JSON document.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// The DateTime of the last modification.
func (o ElasticstackElasticsearchIndexLifecycleOutput) ModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) pulumi.StringOutput { return v.ModifiedDate }).(pulumi.StringOutput)
}

// Identifier for the policy.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The index is no longer being updated but is still being queried.
func (o ElasticstackElasticsearchIndexLifecycleOutput) Warm() ElasticstackElasticsearchIndexLifecycleWarmPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchIndexLifecycle) ElasticstackElasticsearchIndexLifecycleWarmPtrOutput {
		return v.Warm
	}).(ElasticstackElasticsearchIndexLifecycleWarmPtrOutput)
}

type ElasticstackElasticsearchIndexLifecycleArrayOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchIndexLifecycleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticstackElasticsearchIndexLifecycle)(nil)).Elem()
}

func (o ElasticstackElasticsearchIndexLifecycleArrayOutput) ToElasticstackElasticsearchIndexLifecycleArrayOutput() ElasticstackElasticsearchIndexLifecycleArrayOutput {
	return o
}

func (o ElasticstackElasticsearchIndexLifecycleArrayOutput) ToElasticstackElasticsearchIndexLifecycleArrayOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleArrayOutput {
	return o
}

func (o ElasticstackElasticsearchIndexLifecycleArrayOutput) Index(i pulumi.IntInput) ElasticstackElasticsearchIndexLifecycleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticstackElasticsearchIndexLifecycle {
		return vs[0].([]*ElasticstackElasticsearchIndexLifecycle)[vs[1].(int)]
	}).(ElasticstackElasticsearchIndexLifecycleOutput)
}

type ElasticstackElasticsearchIndexLifecycleMapOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchIndexLifecycleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticstackElasticsearchIndexLifecycle)(nil)).Elem()
}

func (o ElasticstackElasticsearchIndexLifecycleMapOutput) ToElasticstackElasticsearchIndexLifecycleMapOutput() ElasticstackElasticsearchIndexLifecycleMapOutput {
	return o
}

func (o ElasticstackElasticsearchIndexLifecycleMapOutput) ToElasticstackElasticsearchIndexLifecycleMapOutputWithContext(ctx context.Context) ElasticstackElasticsearchIndexLifecycleMapOutput {
	return o
}

func (o ElasticstackElasticsearchIndexLifecycleMapOutput) MapIndex(k pulumi.StringInput) ElasticstackElasticsearchIndexLifecycleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticstackElasticsearchIndexLifecycle {
		return vs[0].(map[string]*ElasticstackElasticsearchIndexLifecycle)[vs[1].(string)]
	}).(ElasticstackElasticsearchIndexLifecycleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchIndexLifecycleInput)(nil)).Elem(), &ElasticstackElasticsearchIndexLifecycle{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchIndexLifecycleArrayInput)(nil)).Elem(), ElasticstackElasticsearchIndexLifecycleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchIndexLifecycleMapInput)(nil)).Elem(), ElasticstackElasticsearchIndexLifecycleMap{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchIndexLifecycleOutput{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchIndexLifecycleArrayOutput{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchIndexLifecycleMapOutput{})
}
