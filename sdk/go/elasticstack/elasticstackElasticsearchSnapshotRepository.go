// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers or updates a snapshot repository. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/put-snapshot-repo-api.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elasticstack.NewElasticstackElasticsearchSnapshotRepository(ctx, "myUrlRepo", &elasticstack.ElasticstackElasticsearchSnapshotRepositoryArgs{
//				Url: &elasticstack.ElasticstackElasticsearchSnapshotRepositoryUrlArgs{
//					Url: pulumi.String("https://example.com/repo"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elasticstack.NewElasticstackElasticsearchSnapshotRepository(ctx, "myFsRepo", &elasticstack.ElasticstackElasticsearchSnapshotRepositoryArgs{
//				Fs: &elasticstack.ElasticstackElasticsearchSnapshotRepositoryFsArgs{
//					Compress:              pulumi.Bool(true),
//					Location:              pulumi.String("/tmp"),
//					MaxRestoreBytesPerSec: pulumi.String("10mb"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import elasticstack:index/elasticstackElasticsearchSnapshotRepository:ElasticstackElasticsearchSnapshotRepository my_repository <cluster_uuid>/<repository name>
//
// ```
type ElasticstackElasticsearchSnapshotRepository struct {
	pulumi.CustomResourceState

	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure ElasticstackElasticsearchSnapshotRepositoryAzurePtrOutput `pulumi:"azure"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs ElasticstackElasticsearchSnapshotRepositoryFsPtrOutput `pulumi:"fs"`
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs ElasticstackElasticsearchSnapshotRepositoryGcsPtrOutput `pulumi:"gcs"`
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs ElasticstackElasticsearchSnapshotRepositoryHdfsPtrOutput `pulumi:"hdfs"`
	// Name of the snapshot repository to register or update.
	Name pulumi.StringOutput `pulumi:"name"`
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 ElasticstackElasticsearchSnapshotRepositoryS3PtrOutput `pulumi:"s3"`
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url ElasticstackElasticsearchSnapshotRepositoryUrlPtrOutput `pulumi:"url"`
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify pulumi.BoolPtrOutput `pulumi:"verify"`
}

// NewElasticstackElasticsearchSnapshotRepository registers a new resource with the given unique name, arguments, and options.
func NewElasticstackElasticsearchSnapshotRepository(ctx *pulumi.Context,
	name string, args *ElasticstackElasticsearchSnapshotRepositoryArgs, opts ...pulumi.ResourceOption) (*ElasticstackElasticsearchSnapshotRepository, error) {
	if args == nil {
		args = &ElasticstackElasticsearchSnapshotRepositoryArgs{}
	}

	var resource ElasticstackElasticsearchSnapshotRepository
	err := ctx.RegisterResource("elasticstack:index/elasticstackElasticsearchSnapshotRepository:ElasticstackElasticsearchSnapshotRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticstackElasticsearchSnapshotRepository gets an existing ElasticstackElasticsearchSnapshotRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticstackElasticsearchSnapshotRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticstackElasticsearchSnapshotRepositoryState, opts ...pulumi.ResourceOption) (*ElasticstackElasticsearchSnapshotRepository, error) {
	var resource ElasticstackElasticsearchSnapshotRepository
	err := ctx.ReadResource("elasticstack:index/elasticstackElasticsearchSnapshotRepository:ElasticstackElasticsearchSnapshotRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticstackElasticsearchSnapshotRepository resources.
type elasticstackElasticsearchSnapshotRepositoryState struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure *ElasticstackElasticsearchSnapshotRepositoryAzure `pulumi:"azure"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs *ElasticstackElasticsearchSnapshotRepositoryFs `pulumi:"fs"`
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs *ElasticstackElasticsearchSnapshotRepositoryGcs `pulumi:"gcs"`
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs *ElasticstackElasticsearchSnapshotRepositoryHdfs `pulumi:"hdfs"`
	// Name of the snapshot repository to register or update.
	Name *string `pulumi:"name"`
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 *ElasticstackElasticsearchSnapshotRepositoryS3 `pulumi:"s3"`
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url *ElasticstackElasticsearchSnapshotRepositoryUrl `pulumi:"url"`
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify *bool `pulumi:"verify"`
}

type ElasticstackElasticsearchSnapshotRepositoryState struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure ElasticstackElasticsearchSnapshotRepositoryAzurePtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnectionPtrInput
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs ElasticstackElasticsearchSnapshotRepositoryFsPtrInput
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs ElasticstackElasticsearchSnapshotRepositoryGcsPtrInput
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs ElasticstackElasticsearchSnapshotRepositoryHdfsPtrInput
	// Name of the snapshot repository to register or update.
	Name pulumi.StringPtrInput
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 ElasticstackElasticsearchSnapshotRepositoryS3PtrInput
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url ElasticstackElasticsearchSnapshotRepositoryUrlPtrInput
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify pulumi.BoolPtrInput
}

func (ElasticstackElasticsearchSnapshotRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticstackElasticsearchSnapshotRepositoryState)(nil)).Elem()
}

type elasticstackElasticsearchSnapshotRepositoryArgs struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure *ElasticstackElasticsearchSnapshotRepositoryAzure `pulumi:"azure"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs *ElasticstackElasticsearchSnapshotRepositoryFs `pulumi:"fs"`
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs *ElasticstackElasticsearchSnapshotRepositoryGcs `pulumi:"gcs"`
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs *ElasticstackElasticsearchSnapshotRepositoryHdfs `pulumi:"hdfs"`
	// Name of the snapshot repository to register or update.
	Name *string `pulumi:"name"`
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 *ElasticstackElasticsearchSnapshotRepositoryS3 `pulumi:"s3"`
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url *ElasticstackElasticsearchSnapshotRepositoryUrl `pulumi:"url"`
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify *bool `pulumi:"verify"`
}

// The set of arguments for constructing a ElasticstackElasticsearchSnapshotRepository resource.
type ElasticstackElasticsearchSnapshotRepositoryArgs struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure ElasticstackElasticsearchSnapshotRepositoryAzurePtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnectionPtrInput
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs ElasticstackElasticsearchSnapshotRepositoryFsPtrInput
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs ElasticstackElasticsearchSnapshotRepositoryGcsPtrInput
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs ElasticstackElasticsearchSnapshotRepositoryHdfsPtrInput
	// Name of the snapshot repository to register or update.
	Name pulumi.StringPtrInput
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 ElasticstackElasticsearchSnapshotRepositoryS3PtrInput
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url ElasticstackElasticsearchSnapshotRepositoryUrlPtrInput
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify pulumi.BoolPtrInput
}

func (ElasticstackElasticsearchSnapshotRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticstackElasticsearchSnapshotRepositoryArgs)(nil)).Elem()
}

type ElasticstackElasticsearchSnapshotRepositoryInput interface {
	pulumi.Input

	ToElasticstackElasticsearchSnapshotRepositoryOutput() ElasticstackElasticsearchSnapshotRepositoryOutput
	ToElasticstackElasticsearchSnapshotRepositoryOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryOutput
}

func (*ElasticstackElasticsearchSnapshotRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticstackElasticsearchSnapshotRepository)(nil)).Elem()
}

func (i *ElasticstackElasticsearchSnapshotRepository) ToElasticstackElasticsearchSnapshotRepositoryOutput() ElasticstackElasticsearchSnapshotRepositoryOutput {
	return i.ToElasticstackElasticsearchSnapshotRepositoryOutputWithContext(context.Background())
}

func (i *ElasticstackElasticsearchSnapshotRepository) ToElasticstackElasticsearchSnapshotRepositoryOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchSnapshotRepositoryOutput)
}

// ElasticstackElasticsearchSnapshotRepositoryArrayInput is an input type that accepts ElasticstackElasticsearchSnapshotRepositoryArray and ElasticstackElasticsearchSnapshotRepositoryArrayOutput values.
// You can construct a concrete instance of `ElasticstackElasticsearchSnapshotRepositoryArrayInput` via:
//
//	ElasticstackElasticsearchSnapshotRepositoryArray{ ElasticstackElasticsearchSnapshotRepositoryArgs{...} }
type ElasticstackElasticsearchSnapshotRepositoryArrayInput interface {
	pulumi.Input

	ToElasticstackElasticsearchSnapshotRepositoryArrayOutput() ElasticstackElasticsearchSnapshotRepositoryArrayOutput
	ToElasticstackElasticsearchSnapshotRepositoryArrayOutputWithContext(context.Context) ElasticstackElasticsearchSnapshotRepositoryArrayOutput
}

type ElasticstackElasticsearchSnapshotRepositoryArray []ElasticstackElasticsearchSnapshotRepositoryInput

func (ElasticstackElasticsearchSnapshotRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticstackElasticsearchSnapshotRepository)(nil)).Elem()
}

func (i ElasticstackElasticsearchSnapshotRepositoryArray) ToElasticstackElasticsearchSnapshotRepositoryArrayOutput() ElasticstackElasticsearchSnapshotRepositoryArrayOutput {
	return i.ToElasticstackElasticsearchSnapshotRepositoryArrayOutputWithContext(context.Background())
}

func (i ElasticstackElasticsearchSnapshotRepositoryArray) ToElasticstackElasticsearchSnapshotRepositoryArrayOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchSnapshotRepositoryArrayOutput)
}

// ElasticstackElasticsearchSnapshotRepositoryMapInput is an input type that accepts ElasticstackElasticsearchSnapshotRepositoryMap and ElasticstackElasticsearchSnapshotRepositoryMapOutput values.
// You can construct a concrete instance of `ElasticstackElasticsearchSnapshotRepositoryMapInput` via:
//
//	ElasticstackElasticsearchSnapshotRepositoryMap{ "key": ElasticstackElasticsearchSnapshotRepositoryArgs{...} }
type ElasticstackElasticsearchSnapshotRepositoryMapInput interface {
	pulumi.Input

	ToElasticstackElasticsearchSnapshotRepositoryMapOutput() ElasticstackElasticsearchSnapshotRepositoryMapOutput
	ToElasticstackElasticsearchSnapshotRepositoryMapOutputWithContext(context.Context) ElasticstackElasticsearchSnapshotRepositoryMapOutput
}

type ElasticstackElasticsearchSnapshotRepositoryMap map[string]ElasticstackElasticsearchSnapshotRepositoryInput

func (ElasticstackElasticsearchSnapshotRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticstackElasticsearchSnapshotRepository)(nil)).Elem()
}

func (i ElasticstackElasticsearchSnapshotRepositoryMap) ToElasticstackElasticsearchSnapshotRepositoryMapOutput() ElasticstackElasticsearchSnapshotRepositoryMapOutput {
	return i.ToElasticstackElasticsearchSnapshotRepositoryMapOutputWithContext(context.Background())
}

func (i ElasticstackElasticsearchSnapshotRepositoryMap) ToElasticstackElasticsearchSnapshotRepositoryMapOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticstackElasticsearchSnapshotRepositoryMapOutput)
}

type ElasticstackElasticsearchSnapshotRepositoryOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchSnapshotRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticstackElasticsearchSnapshotRepository)(nil)).Elem()
}

func (o ElasticstackElasticsearchSnapshotRepositoryOutput) ToElasticstackElasticsearchSnapshotRepositoryOutput() ElasticstackElasticsearchSnapshotRepositoryOutput {
	return o
}

func (o ElasticstackElasticsearchSnapshotRepositoryOutput) ToElasticstackElasticsearchSnapshotRepositoryOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryOutput {
	return o
}

// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Azure() ElasticstackElasticsearchSnapshotRepositoryAzurePtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryAzurePtrOutput {
		return v.Azure
	}).(ElasticstackElasticsearchSnapshotRepositoryAzurePtrOutput)
}

// Elasticsearch connection configuration block.
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) ElasticsearchConnection() ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(ElasticstackElasticsearchSnapshotRepositoryElasticsearchConnectionPtrOutput)
}

// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Fs() ElasticstackElasticsearchSnapshotRepositoryFsPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryFsPtrOutput {
		return v.Fs
	}).(ElasticstackElasticsearchSnapshotRepositoryFsPtrOutput)
}

// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Gcs() ElasticstackElasticsearchSnapshotRepositoryGcsPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryGcsPtrOutput {
		return v.Gcs
	}).(ElasticstackElasticsearchSnapshotRepositoryGcsPtrOutput)
}

// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Hdfs() ElasticstackElasticsearchSnapshotRepositoryHdfsPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryHdfsPtrOutput {
		return v.Hdfs
	}).(ElasticstackElasticsearchSnapshotRepositoryHdfsPtrOutput)
}

// Name of the snapshot repository to register or update.
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) S3() ElasticstackElasticsearchSnapshotRepositoryS3PtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryS3PtrOutput {
		return v.S3
	}).(ElasticstackElasticsearchSnapshotRepositoryS3PtrOutput)
}

// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Url() ElasticstackElasticsearchSnapshotRepositoryUrlPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) ElasticstackElasticsearchSnapshotRepositoryUrlPtrOutput {
		return v.Url
	}).(ElasticstackElasticsearchSnapshotRepositoryUrlPtrOutput)
}

// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
func (o ElasticstackElasticsearchSnapshotRepositoryOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticstackElasticsearchSnapshotRepository) pulumi.BoolPtrOutput { return v.Verify }).(pulumi.BoolPtrOutput)
}

type ElasticstackElasticsearchSnapshotRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchSnapshotRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticstackElasticsearchSnapshotRepository)(nil)).Elem()
}

func (o ElasticstackElasticsearchSnapshotRepositoryArrayOutput) ToElasticstackElasticsearchSnapshotRepositoryArrayOutput() ElasticstackElasticsearchSnapshotRepositoryArrayOutput {
	return o
}

func (o ElasticstackElasticsearchSnapshotRepositoryArrayOutput) ToElasticstackElasticsearchSnapshotRepositoryArrayOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryArrayOutput {
	return o
}

func (o ElasticstackElasticsearchSnapshotRepositoryArrayOutput) Index(i pulumi.IntInput) ElasticstackElasticsearchSnapshotRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticstackElasticsearchSnapshotRepository {
		return vs[0].([]*ElasticstackElasticsearchSnapshotRepository)[vs[1].(int)]
	}).(ElasticstackElasticsearchSnapshotRepositoryOutput)
}

type ElasticstackElasticsearchSnapshotRepositoryMapOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchSnapshotRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticstackElasticsearchSnapshotRepository)(nil)).Elem()
}

func (o ElasticstackElasticsearchSnapshotRepositoryMapOutput) ToElasticstackElasticsearchSnapshotRepositoryMapOutput() ElasticstackElasticsearchSnapshotRepositoryMapOutput {
	return o
}

func (o ElasticstackElasticsearchSnapshotRepositoryMapOutput) ToElasticstackElasticsearchSnapshotRepositoryMapOutputWithContext(ctx context.Context) ElasticstackElasticsearchSnapshotRepositoryMapOutput {
	return o
}

func (o ElasticstackElasticsearchSnapshotRepositoryMapOutput) MapIndex(k pulumi.StringInput) ElasticstackElasticsearchSnapshotRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticstackElasticsearchSnapshotRepository {
		return vs[0].(map[string]*ElasticstackElasticsearchSnapshotRepository)[vs[1].(string)]
	}).(ElasticstackElasticsearchSnapshotRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchSnapshotRepositoryInput)(nil)).Elem(), &ElasticstackElasticsearchSnapshotRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchSnapshotRepositoryArrayInput)(nil)).Elem(), ElasticstackElasticsearchSnapshotRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticstackElasticsearchSnapshotRepositoryMapInput)(nil)).Elem(), ElasticstackElasticsearchSnapshotRepositoryMap{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchSnapshotRepositoryOutput{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchSnapshotRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ElasticstackElasticsearchSnapshotRepositoryMapOutput{})
}
