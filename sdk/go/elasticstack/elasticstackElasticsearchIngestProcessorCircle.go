// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Helper data source to which can be used to create a processor to convert circle definitions of shapes to regular polygons which approximate them.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			circle, err := elasticstack.ElasticstackElasticsearchIngestProcessorCircle(ctx, &elasticstack.ElasticstackElasticsearchIngestProcessorCircleArgs{
//				Field:         "circle",
//				ErrorDistance: 28.1,
//				ShapeType:     "geo_shape",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticstack.NewElasticstackElasticsearchIngestPipeline(ctx, "myIngestPipeline", &elasticstack.ElasticstackElasticsearchIngestPipelineArgs{
//				Processors: pulumi.StringArray{
//					*pulumi.String(circle.Json),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func ElasticstackElasticsearchIngestProcessorCircle(ctx *pulumi.Context, args *ElasticstackElasticsearchIngestProcessorCircleArgs, opts ...pulumi.InvokeOption) (*ElasticstackElasticsearchIngestProcessorCircleResult, error) {
	var rv ElasticstackElasticsearchIngestProcessorCircleResult
	err := ctx.Invoke("elasticstack:index/elasticstackElasticsearchIngestProcessorCircle:ElasticstackElasticsearchIngestProcessorCircle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ElasticstackElasticsearchIngestProcessorCircle.
type ElasticstackElasticsearchIngestProcessorCircleArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
	ErrorDistance float64 `pulumi:"errorDistance"`
	// The string-valued field to trim whitespace from.
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Which field mapping type is to be used when processing the circle.
	ShapeType string `pulumi:"shapeType"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place
	TargetField *string `pulumi:"targetField"`
}

// A collection of values returned by ElasticstackElasticsearchIngestProcessorCircle.
type ElasticstackElasticsearchIngestProcessorCircleResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
	ErrorDistance float64 `pulumi:"errorDistance"`
	// The string-valued field to trim whitespace from.
	Field string `pulumi:"field"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Which field mapping type is to be used when processing the circle.
	ShapeType string `pulumi:"shapeType"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place
	TargetField *string `pulumi:"targetField"`
}

func ElasticstackElasticsearchIngestProcessorCircleOutput(ctx *pulumi.Context, args ElasticstackElasticsearchIngestProcessorCircleOutputArgs, opts ...pulumi.InvokeOption) ElasticstackElasticsearchIngestProcessorCircleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ElasticstackElasticsearchIngestProcessorCircleResult, error) {
			args := v.(ElasticstackElasticsearchIngestProcessorCircleArgs)
			r, err := ElasticstackElasticsearchIngestProcessorCircle(ctx, &args, opts...)
			var s ElasticstackElasticsearchIngestProcessorCircleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ElasticstackElasticsearchIngestProcessorCircleResultOutput)
}

// A collection of arguments for invoking ElasticstackElasticsearchIngestProcessorCircle.
type ElasticstackElasticsearchIngestProcessorCircleOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
	ErrorDistance pulumi.Float64Input `pulumi:"errorDistance"`
	// The string-valued field to trim whitespace from.
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Which field mapping type is to be used when processing the circle.
	ShapeType pulumi.StringInput `pulumi:"shapeType"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
}

func (ElasticstackElasticsearchIngestProcessorCircleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchIngestProcessorCircleArgs)(nil)).Elem()
}

// A collection of values returned by ElasticstackElasticsearchIngestProcessorCircle.
type ElasticstackElasticsearchIngestProcessorCircleResultOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchIngestProcessorCircleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchIngestProcessorCircleResult)(nil)).Elem()
}

func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) ToElasticstackElasticsearchIngestProcessorCircleResultOutput() ElasticstackElasticsearchIngestProcessorCircleResultOutput {
	return o
}

func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) ToElasticstackElasticsearchIngestProcessorCircleResultOutputWithContext(ctx context.Context) ElasticstackElasticsearchIngestProcessorCircleResultOutput {
	return o
}

// Description of the processor.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) ErrorDistance() pulumi.Float64Output {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) float64 { return v.ErrorDistance }).(pulumi.Float64Output)
}

// The string-valued field to trim whitespace from.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Which field mapping type is to be used when processing the circle.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) ShapeType() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) string { return v.ShapeType }).(pulumi.StringOutput)
}

// Identifier for the processor.
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The field to assign the converted value to, by default `field` is updated in-place
func (o ElasticstackElasticsearchIngestProcessorCircleResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCircleResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticstackElasticsearchIngestProcessorCircleResultOutput{})
}
