// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the information about the registered snaphosts repositories
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myUrlRepoElasticstackElasticsearchSnapshotRepository, err := elasticstack.NewElasticstackElasticsearchSnapshotRepository(ctx, "myUrlRepoElasticstackElasticsearchSnapshotRepository", &elasticstack.ElasticstackElasticsearchSnapshotRepositoryArgs{
//				Url: &elasticstack.ElasticstackElasticsearchSnapshotRepositoryUrlArgs{
//					Url: pulumi.String("https://example.com/repo"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myFsRepoElasticstackElasticsearchSnapshotRepository, err := elasticstack.NewElasticstackElasticsearchSnapshotRepository(ctx, "myFsRepoElasticstackElasticsearchSnapshotRepository", &elasticstack.ElasticstackElasticsearchSnapshotRepositoryArgs{
//				Fs: &elasticstack.ElasticstackElasticsearchSnapshotRepositoryFsArgs{
//					Location:              pulumi.String("/tmp"),
//					Compress:              pulumi.Bool(true),
//					MaxRestoreBytesPerSec: pulumi.String("10mb"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = elasticstack.ElasticstackElasticsearchDataSnapshotRepositoryOutput(ctx, elasticstack.ElasticstackElasticsearchDataSnapshotRepositoryOutputArgs{
//				Name: myFsRepoElasticstackElasticsearchSnapshotRepository.Name,
//			}, nil)
//			_ = elasticstack.ElasticstackElasticsearchDataSnapshotRepositoryOutput(ctx, elasticstack.ElasticstackElasticsearchDataSnapshotRepositoryOutputArgs{
//				Name: myUrlRepoElasticstackElasticsearchSnapshotRepository.Name,
//			}, nil)
//			ctx.Export("repoFsLocation", myFsRepoElasticstackElasticsearchSnapshotRepository.Fs.ApplyT(func(fs elasticstack.ElasticstackElasticsearchSnapshotRepositoryFs) (*string, error) {
//				return &fs.Location, nil
//			}).(pulumi.StringPtrOutput))
//			ctx.Export("repoUrl", myUrlRepoElasticstackElasticsearchSnapshotRepository.Url.ApplyT(func(url elasticstack.ElasticstackElasticsearchSnapshotRepositoryUrl) (*string, error) {
//				return &url.Url, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func ElasticstackElasticsearchDataSnapshotRepository(ctx *pulumi.Context, args *ElasticstackElasticsearchDataSnapshotRepositoryArgs, opts ...pulumi.InvokeOption) (*ElasticstackElasticsearchDataSnapshotRepositoryResult, error) {
	var rv ElasticstackElasticsearchDataSnapshotRepositoryResult
	err := ctx.Invoke("elasticstack:index/elasticstackElasticsearchDataSnapshotRepository:ElasticstackElasticsearchDataSnapshotRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ElasticstackElasticsearchDataSnapshotRepository.
type ElasticstackElasticsearchDataSnapshotRepositoryArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchDataSnapshotRepositoryElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Name of the snapshot repository.
	Name string `pulumi:"name"`
}

// A collection of values returned by ElasticstackElasticsearchDataSnapshotRepository.
type ElasticstackElasticsearchDataSnapshotRepositoryResult struct {
	// Azure Blob storage as a repository. Set only if the type of the fetched repo is `azure`.
	Azures []ElasticstackElasticsearchDataSnapshotRepositoryAzure `pulumi:"azures"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ElasticstackElasticsearchDataSnapshotRepositoryElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Set only if the type of the fetched repo is `fs`.
	Fs []ElasticstackElasticsearchDataSnapshotRepositoryF `pulumi:"fs"`
	// Google Cloud Storage service as a repository. Set only if the type of the fetched repo is `gcs`.
	Gcs []ElasticstackElasticsearchDataSnapshotRepositoryGc `pulumi:"gcs"`
	// HDFS File System as a repository. Set only if the type of the fetched repo is `hdfs`.
	Hdfs []ElasticstackElasticsearchDataSnapshotRepositoryHdf `pulumi:"hdfs"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Name of the snapshot repository.
	Name string `pulumi:"name"`
	// AWS S3 as a repository. Set only if the type of the fetched repo is `s3`.
	S3s []ElasticstackElasticsearchDataSnapshotRepositoryS3 `pulumi:"s3s"`
	// Repository type.
	Type string `pulumi:"type"`
	// URL repository. Set only if the type of the fetched repo is `url`.
	Urls []ElasticstackElasticsearchDataSnapshotRepositoryUrl `pulumi:"urls"`
}

func ElasticstackElasticsearchDataSnapshotRepositoryOutput(ctx *pulumi.Context, args ElasticstackElasticsearchDataSnapshotRepositoryOutputArgs, opts ...pulumi.InvokeOption) ElasticstackElasticsearchDataSnapshotRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ElasticstackElasticsearchDataSnapshotRepositoryResult, error) {
			args := v.(ElasticstackElasticsearchDataSnapshotRepositoryArgs)
			r, err := ElasticstackElasticsearchDataSnapshotRepository(ctx, &args, opts...)
			var s ElasticstackElasticsearchDataSnapshotRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ElasticstackElasticsearchDataSnapshotRepositoryResultOutput)
}

// A collection of arguments for invoking ElasticstackElasticsearchDataSnapshotRepository.
type ElasticstackElasticsearchDataSnapshotRepositoryOutputArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ElasticstackElasticsearchDataSnapshotRepositoryElasticsearchConnectionPtrInput `pulumi:"elasticsearchConnection"`
	// Name of the snapshot repository.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ElasticstackElasticsearchDataSnapshotRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchDataSnapshotRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by ElasticstackElasticsearchDataSnapshotRepository.
type ElasticstackElasticsearchDataSnapshotRepositoryResultOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchDataSnapshotRepositoryResult)(nil)).Elem()
}

func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) ToElasticstackElasticsearchDataSnapshotRepositoryResultOutput() ElasticstackElasticsearchDataSnapshotRepositoryResultOutput {
	return o
}

func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) ToElasticstackElasticsearchDataSnapshotRepositoryResultOutputWithContext(ctx context.Context) ElasticstackElasticsearchDataSnapshotRepositoryResultOutput {
	return o
}

// Azure Blob storage as a repository. Set only if the type of the fetched repo is `azure`.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Azures() ElasticstackElasticsearchDataSnapshotRepositoryAzureArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) []ElasticstackElasticsearchDataSnapshotRepositoryAzure {
		return v.Azures
	}).(ElasticstackElasticsearchDataSnapshotRepositoryAzureArrayOutput)
}

// Elasticsearch connection configuration block.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) ElasticsearchConnection() ElasticstackElasticsearchDataSnapshotRepositoryElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) *ElasticstackElasticsearchDataSnapshotRepositoryElasticsearchConnection {
		return v.ElasticsearchConnection
	}).(ElasticstackElasticsearchDataSnapshotRepositoryElasticsearchConnectionPtrOutput)
}

// Shared filesystem repository. Set only if the type of the fetched repo is `fs`.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Fs() ElasticstackElasticsearchDataSnapshotRepositoryFArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) []ElasticstackElasticsearchDataSnapshotRepositoryF {
		return v.Fs
	}).(ElasticstackElasticsearchDataSnapshotRepositoryFArrayOutput)
}

// Google Cloud Storage service as a repository. Set only if the type of the fetched repo is `gcs`.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Gcs() ElasticstackElasticsearchDataSnapshotRepositoryGcArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) []ElasticstackElasticsearchDataSnapshotRepositoryGc {
		return v.Gcs
	}).(ElasticstackElasticsearchDataSnapshotRepositoryGcArrayOutput)
}

// HDFS File System as a repository. Set only if the type of the fetched repo is `hdfs`.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Hdfs() ElasticstackElasticsearchDataSnapshotRepositoryHdfArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) []ElasticstackElasticsearchDataSnapshotRepositoryHdf {
		return v.Hdfs
	}).(ElasticstackElasticsearchDataSnapshotRepositoryHdfArrayOutput)
}

// Internal identifier of the resource
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the snapshot repository.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) string { return v.Name }).(pulumi.StringOutput)
}

// AWS S3 as a repository. Set only if the type of the fetched repo is `s3`.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) S3s() ElasticstackElasticsearchDataSnapshotRepositoryS3ArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) []ElasticstackElasticsearchDataSnapshotRepositoryS3 {
		return v.S3s
	}).(ElasticstackElasticsearchDataSnapshotRepositoryS3ArrayOutput)
}

// Repository type.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) string { return v.Type }).(pulumi.StringOutput)
}

// URL repository. Set only if the type of the fetched repo is `url`.
func (o ElasticstackElasticsearchDataSnapshotRepositoryResultOutput) Urls() ElasticstackElasticsearchDataSnapshotRepositoryUrlArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchDataSnapshotRepositoryResult) []ElasticstackElasticsearchDataSnapshotRepositoryUrl {
		return v.Urls
	}).(ElasticstackElasticsearchDataSnapshotRepositoryUrlArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticstackElasticsearchDataSnapshotRepositoryResultOutput{})
}
