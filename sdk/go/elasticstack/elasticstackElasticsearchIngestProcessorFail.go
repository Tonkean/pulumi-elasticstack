// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Raises an exception. This is useful for when you expect a pipeline to fail and want to relay a specific message to the requester.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/fail-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fail, err := elasticstack.ElasticstackElasticsearchIngestProcessorFail(ctx, &elasticstack.ElasticstackElasticsearchIngestProcessorFailArgs{
//				If:      pulumi.StringRef("ctx.tags.contains('production') != true"),
//				Message: "The production tag is not present, found tags: {{{tags}}}",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticstack.NewElasticstackElasticsearchIngestPipeline(ctx, "myIngestPipeline", &elasticstack.ElasticstackElasticsearchIngestPipelineArgs{
//				Processors: pulumi.StringArray{
//					*pulumi.String(fail.Json),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func ElasticstackElasticsearchIngestProcessorFail(ctx *pulumi.Context, args *ElasticstackElasticsearchIngestProcessorFailArgs, opts ...pulumi.InvokeOption) (*ElasticstackElasticsearchIngestProcessorFailResult, error) {
	var rv ElasticstackElasticsearchIngestProcessorFailResult
	err := ctx.Invoke("elasticstack:index/elasticstackElasticsearchIngestProcessorFail:ElasticstackElasticsearchIngestProcessorFail", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ElasticstackElasticsearchIngestProcessorFail.
type ElasticstackElasticsearchIngestProcessorFailArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// The error message thrown by the processor.
	Message string `pulumi:"message"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
}

// A collection of values returned by ElasticstackElasticsearchIngestProcessorFail.
type ElasticstackElasticsearchIngestProcessorFailResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// The error message thrown by the processor.
	Message string `pulumi:"message"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
}

func ElasticstackElasticsearchIngestProcessorFailOutput(ctx *pulumi.Context, args ElasticstackElasticsearchIngestProcessorFailOutputArgs, opts ...pulumi.InvokeOption) ElasticstackElasticsearchIngestProcessorFailResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ElasticstackElasticsearchIngestProcessorFailResult, error) {
			args := v.(ElasticstackElasticsearchIngestProcessorFailArgs)
			r, err := ElasticstackElasticsearchIngestProcessorFail(ctx, &args, opts...)
			var s ElasticstackElasticsearchIngestProcessorFailResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ElasticstackElasticsearchIngestProcessorFailResultOutput)
}

// A collection of arguments for invoking ElasticstackElasticsearchIngestProcessorFail.
type ElasticstackElasticsearchIngestProcessorFailOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// The error message thrown by the processor.
	Message pulumi.StringInput `pulumi:"message"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ElasticstackElasticsearchIngestProcessorFailOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchIngestProcessorFailArgs)(nil)).Elem()
}

// A collection of values returned by ElasticstackElasticsearchIngestProcessorFail.
type ElasticstackElasticsearchIngestProcessorFailResultOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchIngestProcessorFailResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchIngestProcessorFailResult)(nil)).Elem()
}

func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) ToElasticstackElasticsearchIngestProcessorFailResultOutput() ElasticstackElasticsearchIngestProcessorFailResultOutput {
	return o
}

func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) ToElasticstackElasticsearchIngestProcessorFailResultOutputWithContext(ctx context.Context) ElasticstackElasticsearchIngestProcessorFailResultOutput {
	return o
}

// Description of the processor.
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Internal identifier of the resource
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) string { return v.Json }).(pulumi.StringOutput)
}

// The error message thrown by the processor.
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) string { return v.Message }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Identifier for the processor.
func (o ElasticstackElasticsearchIngestProcessorFailResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorFailResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticstackElasticsearchIngestProcessorFailResultOutput{})
}
