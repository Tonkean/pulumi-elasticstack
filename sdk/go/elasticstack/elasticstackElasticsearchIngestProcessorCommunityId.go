// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Helper data source to which can be used to create a processor to compute the Community ID for network flow data as defined in the [Community ID Specification](https://github.com/corelight/community-id-spec).
// You can use a community ID to correlate network events related to a single flow.
//
// The community ID processor reads network flow data from related [Elastic Common Schema (ECS)](https://www.elastic.co/guide/en/ecs/1.12) fields by default. If you use the ECS, no configuration is required.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/community-id-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			community, err := elasticstack.ElasticstackElasticsearchIngestProcessorCommunityId(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticstack.NewElasticstackElasticsearchIngestPipeline(ctx, "myIngestPipeline", &elasticstack.ElasticstackElasticsearchIngestPipelineArgs{
//				Processors: pulumi.StringArray{
//					*pulumi.String(community.Json),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func ElasticstackElasticsearchIngestProcessorCommunityId(ctx *pulumi.Context, args *ElasticstackElasticsearchIngestProcessorCommunityIdArgs, opts ...pulumi.InvokeOption) (*ElasticstackElasticsearchIngestProcessorCommunityIdResult, error) {
	var rv ElasticstackElasticsearchIngestProcessorCommunityIdResult
	err := ctx.Invoke("elasticstack:index/elasticstackElasticsearchIngestProcessorCommunityId:ElasticstackElasticsearchIngestProcessorCommunityId", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ElasticstackElasticsearchIngestProcessorCommunityId.
type ElasticstackElasticsearchIngestProcessorCommunityIdArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Field containing the destination IP address.
	DestinationIp *string `pulumi:"destinationIp"`
	// Field containing the destination port.
	DestinationPort *int `pulumi:"destinationPort"`
	// Field containing the IANA number.
	IanaNumber *int `pulumi:"ianaNumber"`
	// Field containing the ICMP code.
	IcmpCode *int `pulumi:"icmpCode"`
	// Field containing the ICMP type.
	IcmpType *int `pulumi:"icmpType"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.
	Seed *int `pulumi:"seed"`
	// Field containing the source IP address.
	SourceIp *string `pulumi:"sourceIp"`
	// Field containing the source port.
	SourcePort *int `pulumi:"sourcePort"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// Output field for the community ID.
	TargetField *string `pulumi:"targetField"`
	// Field containing the transport protocol. Used only when the `ianaNumber` field is not present.
	Transport *string `pulumi:"transport"`
}

// A collection of values returned by ElasticstackElasticsearchIngestProcessorCommunityId.
type ElasticstackElasticsearchIngestProcessorCommunityIdResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Field containing the destination IP address.
	DestinationIp *string `pulumi:"destinationIp"`
	// Field containing the destination port.
	DestinationPort *int `pulumi:"destinationPort"`
	// Field containing the IANA number.
	IanaNumber *int `pulumi:"ianaNumber"`
	// Field containing the ICMP code.
	IcmpCode *int `pulumi:"icmpCode"`
	// Field containing the ICMP type.
	IcmpType *int `pulumi:"icmpType"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.
	Seed *int `pulumi:"seed"`
	// Field containing the source IP address.
	SourceIp *string `pulumi:"sourceIp"`
	// Field containing the source port.
	SourcePort *int `pulumi:"sourcePort"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// Output field for the community ID.
	TargetField *string `pulumi:"targetField"`
	// Field containing the transport protocol. Used only when the `ianaNumber` field is not present.
	Transport *string `pulumi:"transport"`
}

func ElasticstackElasticsearchIngestProcessorCommunityIdOutput(ctx *pulumi.Context, args ElasticstackElasticsearchIngestProcessorCommunityIdOutputArgs, opts ...pulumi.InvokeOption) ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ElasticstackElasticsearchIngestProcessorCommunityIdResult, error) {
			args := v.(ElasticstackElasticsearchIngestProcessorCommunityIdArgs)
			r, err := ElasticstackElasticsearchIngestProcessorCommunityId(ctx, &args, opts...)
			var s ElasticstackElasticsearchIngestProcessorCommunityIdResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput)
}

// A collection of arguments for invoking ElasticstackElasticsearchIngestProcessorCommunityId.
type ElasticstackElasticsearchIngestProcessorCommunityIdOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Field containing the destination IP address.
	DestinationIp pulumi.StringPtrInput `pulumi:"destinationIp"`
	// Field containing the destination port.
	DestinationPort pulumi.IntPtrInput `pulumi:"destinationPort"`
	// Field containing the IANA number.
	IanaNumber pulumi.IntPtrInput `pulumi:"ianaNumber"`
	// Field containing the ICMP code.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// Field containing the ICMP type.
	IcmpType pulumi.IntPtrInput `pulumi:"icmpType"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.
	Seed pulumi.IntPtrInput `pulumi:"seed"`
	// Field containing the source IP address.
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
	// Field containing the source port.
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// Output field for the community ID.
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
	// Field containing the transport protocol. Used only when the `ianaNumber` field is not present.
	Transport pulumi.StringPtrInput `pulumi:"transport"`
}

func (ElasticstackElasticsearchIngestProcessorCommunityIdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchIngestProcessorCommunityIdArgs)(nil)).Elem()
}

// A collection of values returned by ElasticstackElasticsearchIngestProcessorCommunityId.
type ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput struct{ *pulumi.OutputState }

func (ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticstackElasticsearchIngestProcessorCommunityIdResult)(nil)).Elem()
}

func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) ToElasticstackElasticsearchIngestProcessorCommunityIdResultOutput() ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput {
	return o
}

func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) ToElasticstackElasticsearchIngestProcessorCommunityIdResultOutputWithContext(ctx context.Context) ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput {
	return o
}

// Description of the processor.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Field containing the destination IP address.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) DestinationIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.DestinationIp }).(pulumi.StringPtrOutput)
}

// Field containing the destination port.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// Field containing the IANA number.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) IanaNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *int { return v.IanaNumber }).(pulumi.IntPtrOutput)
}

// Field containing the ICMP code.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// Field containing the ICMP type.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

// Internal identifier of the resource
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// Field containing the source IP address.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

// Field containing the source port.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

// Identifier for the processor.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// Output field for the community ID.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

// Field containing the transport protocol. Used only when the `ianaNumber` field is not present.
func (o ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticstackElasticsearchIngestProcessorCommunityIdResult) *string { return v.Transport }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticstackElasticsearchIngestProcessorCommunityIdResultOutput{})
}
